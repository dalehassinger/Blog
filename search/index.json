[{"content":"VMware Explore 2025 was the best conference that I\u0026rsquo;ve ever attended.\nVMware Explore 2025 was unforgettable — my Hackathon team placed 1st, I presented or co-presented 5 Expert Led Workshops in the Hands-On Labs, topped the HOL leaderboard for High-Quality customer conversations, Recorded a Virtually Speaking Podcast, and I had an awesome dinner with two of my role models. Energized by positive customer discussions and the amazing vCommunity!\nVMware Explore 2025 I want to start by thanking Delta Airlines for a smooth travel experience to and from Vegas this year. No delays, no cancellations—everything ran on time. Travel can sometimes be unpredictable, so this hassle-free trip was a welcome relief.\nStaying at The Palazzo Hotel was a great experience. The suites were spacious and comfortable, and the walk to the conference was quick and convenient. I also enjoyed some excellent meals during my stay, with standout dining experiences at Bouchon, Delmonico, TAO Asian Bistro, Noodle Asia, and CHICA.\nThe VMware Explore 2025 Conference was, for me personally, one of the best I’ve attended. Overall, it was a very positive experience.\nMy Hackathon Team earned first place I presented or co-presented five Expert-Led Workshops in the HOL area. I gave a presentation in the Discovery Theater alongside Don Horrox I recorded a Virtually Speaking Podcast about the Hackathon I enjoyed a nice dinner with Brock Peterson and Cosmin Trif, two people who have been great role models in my career In the Hands-on Labs (HOL) area, conversations with customers were very encouraging. Many were eager to learn about VCF 9, and a large number attended HOL sessions as part of their preparation for the VCF certification exams I felt the energy at VMware Explore 2025 was very similar to the earlier years when the conference was known as VMworld. While overall attendance may have been lower, the quality of the event was noticeably higher than in the past year or two. Personally, I’ll take quality over quantity any day.\nMany of the people I spoke with were taking the VCF 9 certification tests offered at the conference. That’s a strong sign of the growing interest and momentum around VCF 9 across the industry.\nHackathon The Hackathon is always a fun and rewarding event for me. This year, I had the honor of serving as a Team Captain, and our team finished in 1st place. After placing 2nd for the past two years, achieving first this year was especially meaningful.\nOur project, a PowerShell MCP Server, was an absolute blast to design and test. One of our main goals was to enable the re-use of existing PowerCLI scripts within an MCP Server—something we were excited to bring to life during the Hackathon.\nHackathon Team Members:\nOur Hackathon team was made up of Don, Amos, Cosmin, and Willie. Don and Amos joined as soon as the Hackathon was announced, while Cosmin and Willie jumped in the evening of the event. It turned out to be a fantastic group, and I’m happy to call all of them friends.\nI always look forward to the opportunity each year to have conversations with the Hackathon Judges, Alan Renouf and William Lam. Back when I was a customer, if either of them had sessions at VMware Explore, those were always the first I registered for.\nTo now have these role models serve as Hackathon judges—and to have them select the project I captained as the winning entry—was an incredibly proud moment in my career.\nHackathon Links:\nAnnouncing Hackathon Explore in Las Vegas\nBroadcom News article about the Hackathon\nHackathon Pics:\nHere are some screenshots of the Dashboards our Hackathon Team created using the PowerShell MCP Server:\nThe MCP Server provides the connection to the data We connected to VCF, vCenter, VCF Operations, and a Network Switch Data is retrieved through prompts, and reports are generated automatically based on those prompts No additional coding is required to create the reports Beyond retrieving data, we also built MCP Tools that can send email, create DNS records, and save HTML reports directly to a specified web server folder Pics from the Hackathon Event:\nWe also walked away with some awesome prizes and a really cool Hackathon T-shirt—a fun bonus on top of an already amazing experience.\nHackathon Comic Book:\nI created the Comic Book to show how prompts can create some amazing results I used ChatGPT-5 to create the Comic Book Hands-On Labs I was a member of the Hands-On Labs Expert-Led Workshop (ELW) Team at VMware Explore 2025. Our team of eight included Christopher Lewis, Shannon Fitzpatrick, William DeMarigny, Cosmin Trif, Scott Bowe, Brock Peterson, Alexis Rondeau, and myself.\nI had the opportunity to present or co-present with Shannon Fitzpatrick, William DeMarigny, Scott Bowe, and Brock Peterson.\nWhen I wasn’t involved with the ELWs, I spent time in the Self-Paced HOL area, helping customers choose courses, get logged in, and ensure they had a great experience. The conversations I had there were very positive—time after time, customers shared how eager they were to learn about VCF 9 and get up to speed with the latest version. Their excitement around using VCF 9 was encouraging.\nNot every customer feels that way, but after a few days of talking with so many engaged attendees, I left feeling really good about the vCommunity.\nThe Wednesday before VMware Explore, the local VMUG hosted a vBeers event, and the conversations there carried the same theme. The local VMUG chapter has asked me to start doing VCF 9 presentations, and attendees expressed interest in meeting more frequently. It’s great to see the community’s energy continuing to grow.\nHands-On Labs Pics:\nExpert Led Workshop Team:\nSelf Paced HOL Area:\nI Love the HOL Command Center All the Dashbaords are created with VCF Operations I want to walk into a Customer NOC someday and see a wall that looks like this\u0026hellip; Top 20 HOL Courses Attended During VMware Explore 2025:\nWhen I joined VMware, Brock Peterson was the one who covered my account while I was still a customer. After I accepted my role at VMware, I sent Brock a text saying, “Maybe someday we’ll get the chance to present together.”\nAt VMware Explore 2025, that became a reality—we co-presented an HOL Expert-Led Workshop. The feedback from attendees was overwhelmingly positive, and I truly hope we’ll have the opportunity to do more presentations together in the future.\nIn addition to working with Brock when I was a customer, Cosmin was also a good resource who supported me along the way. VMware Explore 2025 was the first time the three of us were together in the same place. We shared a great dinner and some meaningful conversations.\nBrock and Cosmin are the best kind of coworkers—talented, supportive, and genuinely great to work with.\nMy VMware Explore 2025 Discovery Theater Session Enhancing VMware Cloud Foundation Operation Management Packs with PowerShell | CODEQT1121LV Session Description:\nIn this session, we will explore how to create VMware Cloud Foundation® (VCF) Operations Management Packs (MPs) using PowerShell to retrieve the data. We will demonstrate how to use PowerShell to run scripts to gather information that can be used to build custom MPs, especially when APIs are not available. PowerShell, with the addition of PowerShell Modules, is a powerful way to get data sources into your MPs, expanding the scope of your monitoring capabilities. Learn how to think outside the box by creating MPs that go beyond traditional API integration and access data that is not readily available via standard APIs. This session will empower you to innovate and create custom MPs tailored to your specific operational needs. Discover how a PowerShell script can serve as an API frontend for your automation workflows.\nDetails:\nI shared the Discovery Theater Stage with Don Horrox, Systems Engineer. I first met Don when he was a VMware customer that I worked with, and I was immediately struck by his deep passion for VMware technologies. Since then, it’s been a pleasure collaborating and presenting multiple times with him. Check out Don\u0026rsquo;s blog, vChamp, to see what he has been sharing with the vCommunity.\nThe questions and feedback we received from the presentation were excellent. I feel we were able to share some new ideas that attendees hadn’t considered before and get them thinking about their own use cases. Management Packs (MPs) can open the door to many interesting and creative monitoring possibilities.\nCODEQT1121LV Announcement: Don and I on the Discovery Theater stage: VMware Explore 2025 Swag:\nI was able to bring home some very cool VMware Explore swag this year. For me, these items are more than just giveaways—they each carry personal meaning. The Raspberry Pi was awarded for serving as captain of the Hackathon team that finished in first place. The Hands-On Labs power brick was awarded for having the most high-quality conversations with customers in the HOL area. Not only does the Virtually Speaking podcast deliver some of the best content you can listen to, but they also give away the coolest power bricks around. I received mine after recording a podcast about the Hackathon. It was a great experience working with Pete and John. Venetian Conference Center The Venetian Conference Center is great because it offers the convenience of having everything under one roof. The rooms are comfortable, and the conference food for breakfast and lunch was particularly good this year. There are also plenty of options for a nice dinner. I had dinner at Delmonico one evening, and as always, the food was excellent.\nVMware Community Podcast After VMware Explore I had the pleasure of being a guest on the CMTY Podcast 738, Wrapping Up VMware Explore Las Vegas, 2025. We discussed the VMware Explore Hackathon and other vCommunity activities. You can listen to the podcast on YouTube. Link to Podcast\nFinal Thoughts: I hope I get the opportunity to do it all again next year. VMware Explore is always one of my favorite weeks of the year. I appreciate the chance to give back to the vCommunity, which I believe is incredibly strong. I\u0026rsquo;ve never encountered another user group where the members are as passionate about a product as the VMware community is. The Hackathon Project has a lot of details I can share. I am going to dedicate a Blog to the topic. My Discovery Theater presentation, Enhancing VMware Cloud Foundation Operation Management Packs with PowerShell | CODEQT1121LV, also has a lot of details I can share. I am going to also dedicate a Blog to the topic. What is it: Is this an ear of corn—or a cheesecake disguised as an ear of corn? If you’re ever in Vegas, stop by CHICA to find out\u0026hellip; 😉\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day. ","date":"2025-09-01T00:00:00Z","image":"https://vcrocs.info/vmware-explore-2025-success-vcommunity-and-inspiration/featured-image_hu_15578b8a3f643aee.png","permalink":"https://vcrocs.info/vmware-explore-2025-success-vcommunity-and-inspiration/","title":"VMware Explore 2025: Success, vCommunity, and Inspiration"},{"content":"Deep Dive into My Involvement at VMware Explore 2025.\n\u0026ldquo;Technology can amplify your message, but the real power of a presentation lies in the connection you make with your audience. Remember, it\u0026rsquo;s not the slides or the software that will leave a lasting impact—it\u0026rsquo;s your passion and the story you tell.\u0026rdquo;\nWhen and Where:\nWebsite: VMware Explore 2025.\nLas Vegas Date: August 25 – 28, 2024\nThe Venetian Convention and Expo Center\nWhat Will I be doing at VMware Explore 2025:\nPresenting one session during the event Participating in four Hands-on Labs as presenter or assisting the users attending Serving as a Team Captain in the Hackathon If you’ve been reading my blogs and are attending VMware Explore, I’d love to connect! Meeting others in the vCommunity and geeking out over VMware technology is one of the highlights of the event for me.\nCome say hello and tell me about the cool things you’re doing with VMware solutions. Better yet—write a blog post about it! I’d be happy to feature you as a guest blogger right here on this site.\nLet’s keep the vCommunity strong by sharing ideas, experiences, and inspiration.\nMy VMware Explore 2025 Session Details My sessions in the VMware Explore 2025 Content Catalog.\nSessions: Enhancing VMware Cloud Foundation Operation Management Packs with PowerShell | CODEQT1121LV In this session, we will explore how to create VMware Cloud Foundation® (VCF) Operations Management Packs (MPs) using PowerShell to retrieve the data. We will demonstrate how to use PowerShell to run scripts to gather information that can be used to build custom MPs, especially when APIs are not available. PowerShell, with the addition of PowerShell Modules, is a powerful way to get data sources into your MPs, expanding the scope of your monitoring capabilities. Learn how to think outside the box by creating MPs that go beyond traditional API integration and access data that is not readily available via standard APIs. This session will empower you to innovate and create custom MPs tailored to your specific operational needs. Discover how a PowerShell script can serve as an API frontend for your automation workflows. I’m excited to share that Don Horrox, Systems Engineer, will be joining me as a co-presenter for this session. I first met Don when he was a VMware customer that I worked with, and I was immediately struck by his deep passion for VMware technologies. Since then, it’s been a pleasure collaborating with him—and together, we’ve put together some compelling content that we’re looking forward to presenting! Check out Don\u0026rsquo;s blog, vChamp, to see what he has been sharing with the vCommunity. VMware Cloud Foundation 9.0 - Operations: VCF Health and Diagnostics | ELW-HOL-2601-11 Hands-on Labs Expert-led Workshops provide technical, hands-on time with VMware product, presented by a subject matter expert. VMware Cloud Foundation 9.0 - Operations: Monitoring Network and Storage Operations In the Private Cloud | ELW-HOL-2601-09 Hands-on Labs Expert-led Workshops provide technical, hands-on time with VMware product, presented by a subject matter expert. Hackathon: Monday, August 25 • 7 PM – 11 PM Learn skills, connect with others in the coding community, and enjoy an after-hours evening of competition and socializing with other data-center automators.\nThe Hackathon is always one of my favorite parts of VMware Explore. I’ve had the privilege of serving as a Team Captain for the past two years—both times, our team proudly finished in 2nd place. I’m thrilled to return as a Team Captain once again for the 2025 Hackathon.\nThis year, our team will be exploring how to hack VMware products and RVTools exports using PowerShell MCP (Model Context Protocol). If that sparks your interest, I’d love for you to reach out! Bring your creativity and let’s collaborate on building prompts around real-world use cases—things that help solve practical challenges using automation and AI-driven workflows.\nLet’s build something meaningful together!\nContent Catalog: Links to resources discussed is this Blog Post: VMware Explore 2025. If you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day. ","date":"2025-07-24T00:00:00Z","image":"https://vcrocs.info/vmware-explore-2025-my-sessions-and-more.../featured-image_hu_4aae570c2c3774e1.png","permalink":"https://vcrocs.info/vmware-explore-2025-my-sessions-and-more.../","title":"VMware Explore 2025 | My Sessions and more..."},{"content":"Time with family at the Delaware Beaches.\nTrue work-life balance is found around a campfire—laughing with family, toes in the sand, and no deadlines except the rising tide at the Delaware beaches.\nA Break from Tech: Camping at the Delaware Beaches Almost all of my blog posts are focused on technology, but I wanted to take a moment to share a little about myself—the person behind the words. My wife and I love camping. She’s happiest relaxing at the beach with a good book, while I enjoy riding my E-Bike on nearby trails. Our favorite destination is the Rehoboth Beach and Bethany Beach area in Delaware.\nE-Bike Dealers in the area that I had good experiences:\nPEDALTEC ELECTRIC BIKES Lewes Cycle Sports We usually stay at one of the Delaware State Parks. If you\u0026rsquo;re considering a trip, plan ahead—reservations fill up fast and often need to be made a year in advance. The beginning of July is a special time for us, as it’s both my wife’s birthday and our anniversary. It’s a week we always try to set aside for camping.\nOur go-to spot is Delaware Seashore State Park. While my wife unwinds by the ocean, soaking in the sights and sounds, I head out on my E-Bike to Gordon’s Pond and ride the trail to Cape Henlopen State Park.\nWe kicked off this trip with our first night at Killens Pond State Park. It was our first time camping there, and we really enjoyed the peaceful, wooded setting. One thing to note—there was no Starlink coverage at our campsite. There was very heavy tree cover and I could not get Starlink to work.\nThe Rehoboth Beach and Bethany Beach area is also home to some great restaurants we love visiting. I usually take the opportunity to enjoy seafood whenever we dine out, since I don’t cook it often at home.\nBluecoast Bethany Off the Hook One tech upgrade that’s really changed our camping experience is Starlink. As long as we have a clear view of the sky, it works flawlessly. We’re able to stream YouTube TV in the camper just like we would at home—blending our love for the outdoors with a little touch of modern convenience. This Blog was posted while sitting in the camper using Starlink for internet access.\nAnother piece of technology I rely on when towing our camper is the Garmin RV Navigator. It helps avoid roads that aren’t suitable for RVs, including those with low overpasses or weight restrictions. Unlike Google or Apple Maps, it\u0026rsquo;s built specifically with RV travel in mind—making it a much safer choice when towing. I would never recommend towing an RV using only Google or Apple Maps. They’re just not designed with RV-specific routes in mind, which can lead to dangerous situations like low clearances or restricted roads.\nI’m also a big fan of the towing technology built into today’s pickup trucks. We have a Chevrolet 2500, and one of my favorite features is what happens when you plug in a trailer—when you activate the turn signal, the large dash display shows a live camera view of the side of the truck and the entire length of the camper.\nIt’s a great safety feature, especially when other drivers are impatient and try to pass at the worst times. Towing doesn’t always get the respect it deserves on the road—everyone seems to be in a rush and eager to get around an RV as quickly as possible.\nA great way to securely access your home lab while camping with Starlink internet is by using Twingate. Unlike traditional VPNs, there’s no need to open remote ports. I run a simple Rocky Linux VM with the Twingate connector, and it works seamlessly. The Twingate Starter Plan is a great (and free) way to get started.\nWhen I get home from this camping trip, it’ll be time to put the finishing touches on my VMware Explore 2025 session, Enhancing VMware Cloud Foundation Operation Management Packs with PowerShell - CODEQT1121LV. I also need to spend some time pulling together content for the VMware Explore Hackathon (I will be a Team Captain)—something I’m really looking forward to.\nIf you’re reading this and plan to attend VMware Explore 2025, feel free to look me up or stop by the Hands-on Labs (HOL) area. I’ll be spending a lot of time there this year as a member of the HOL team!\nCamping Pics: Indian River Inlet Bridge Indian River Inlet Bridge Indian River Inlet Bridge Delaware Seashore State Park Delaware Seashore State Park Delaware Seashore State Park Revelation Brewing - Rehoboth Beach, DE Indian River Inlet Bridge Gordon\u0026rsquo;s Pond State Park, DE - I love riding the elevated trail section Delaware Seashore Fresh Pond Trails Gordon\u0026rsquo;s Pond State Park, DE Delaware Seashore State Park Killens Pond State Park Delaware Seashore State Park Lessons Learned Make time for yourself and your family—it matters. The best burnout remedy? A good camping trip. Riding an E-Bike is pure joy—explore more with ease. ","date":"2025-07-10T00:00:00Z","image":"https://vcrocs.info/tech-enhanced-camping-adventures-july-2025/featured-image_hu_2f962ae1129120b0.png","permalink":"https://vcrocs.info/tech-enhanced-camping-adventures-july-2025/","title":"Tech-Enhanced Camping Adventures | July 2025"},{"content":"VMware vExpert 2025\n⸻\nConsistent contributions turn recognition into impact—community thrives when knowledge is shared.\n⸻\nVMware vExpert 2020–Present\nIn 2025, I was also selected for the vExpert VCF subprogram.\nvExpert Subprograms:\n•\tvExpert VCF\n⸻\nThis marks my sixth consecutive year as a VMware vExpert and the first year participating in the vExpert VCF subprogram.\n⸻\nBeing recognized again as a VMware vExpert highlights a continued commitment to community engagement and knowledge sharing. The vExpert program is centered around recognizing individuals who contribute meaningfully to the VMware ecosystem and the broader vCommunity.\n⸻\nSelected 2024 vCommunity Contributions:\n•\tPresented at VMware Explore 2024 (5 sessions)\n•\tHackathon Team Captain – 2nd Place, VMware Explore 2024\n•\tBlogging – Published more articles in 2024 than any previous year\n⸻\nAbout the VMware vExpert Program:\nThe VMware vExpert Program is a global evangelism and advocacy initiative. It provides recognition and marketing support to individuals who actively share their knowledge and expertise with the community. Benefits include article promotion, visibility at global events, access to beta programs, and insight into VMware’s roadmap.\nThe program awards are individual-based and valid for one year. Both partner and customer employees are eligible. Applications are evaluated based on contributions from the past year, or both past and current activities in the case of second-half applications.\n⸻\nProgram Criteria:\nvExpert recognition is based on community involvement that goes beyond day-to-day responsibilities. Examples of accepted contributions include blogging, authoring books or articles, public speaking, participating in forums, leading VMUGs, producing videos, and more.\n⸻\nAcknowledgments:\nI appreciate the support and collaboration from colleagues at Broadcom, past and present. Thank you to everyone who has been part of my professional journey.\n⸻\nEmail: Dale.Hassinger@vCrocs.info\nLocation: Dillsburg, PA\n9–5 pays the bills, 5–10 advances your career\n⸻\n","date":"2025-06-08T00:00:00Z","image":"https://vcrocs.info/vmware-vexpert-2025-sixth-year/featured-image_hu_3cc7aaec4be908c4.png","permalink":"https://vcrocs.info/vmware-vexpert-2025-sixth-year/","title":"VMware vExpert 2025 | Sixth Year"},{"content":"See your CPU|Overcommit at the Datacenter, Cluster and Host level.\nMy CPU usage is like my Energy Drink intake — dangerously high and probably not sustainable.\nCPU|Overcommit: Many of my blog posts stem from real-world questions I encounter. Recently, someone asked about the CPU|Overcommit ratio for a specific ESXi host. When I checked VCF Operations, I noticed that CPU|Overcommit metrics were available at the Datacenter and Cluster levels—but not at the Host level.\nTo address this gap, I built a Super Metric to calculate the CPU|Overcommit ratio at the host level. You can find the Super Metric formula below.\nTo make it easier to visualize CPU|Overcommit ratios across all levels—Datacenter, Cluster, and Host—I also created a custom dashboard. An example of this dashboard is shown below.\nCPU|Overcommit isn’t inherently a bad thing—in fact, it’s one of the main reasons we virtualize: to efficiently share physical resources across VMs. The key is finding a CPU|Overcommit ratio that works for your specific environment and workloads.\nThat’s why I included the VM Details widget in the dashboard—to help you monitor important metrics like CPU|Ready (ms). Different workloads and use cases will tolerate different levels of overcommit, so keep an eye on performance indicators and adjust accordingly.\nBy default, the CPU|Ready (ms) metric is not enabled in VMware Aria Operations. To activate it, navigate to Operations \u0026gt; Configuration \u0026gt; Policy Definition. Select your Default Policy, then click Edit Policy. Under Metrics and Properties, use the filter to search for \u0026ldquo;cpu|ready\u0026rdquo;. Select Virtual Machine, expand Metrics, then CPU. You’ll find Ready (ms) listed as Deactivated—switch it to Activated and save your changes.\nAllow for a few collection cycles (typically 10–15 minutes), and the CPU Ready (ms) metric will become available for monitoring VM performance.\nDashboard Example: Super Metric: 1 2 {‌ This Resource: ‌cpu|vcpus_allocated_on_all_powered_on_vms}/{‌This Resource: ‌cpu|corecount_provisioned } Lessons Learned: Host CPU|Overcommit isn\u0026rsquo;t a metric available OOTB (Out of the Box). You can download all the components used to build this dashboard from my GitHub repository: 7 Custom Views 1 Super Metric 1 Dashboard Be sure to activate the CPU|Ready (ms) metric, as it’s required for displaying data in the VM Details widget. In my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog helpful, consider buying me a coffee to kickstart my day.\n","date":"2025-06-04T00:00:00Z","image":"https://vcrocs.info/vcf-operations-cpuovercommit-details/featured-image_hu_7c00b50769a5e509.png","permalink":"https://vcrocs.info/vcf-operations-cpuovercommit-details/","title":"VCF Operations | CPU|Overcommit Details"},{"content":"Learn how to monitor SaaS solutions like Zoom by building a custom Management Pack.\nYou start to see the true power of VCF Operations when you add Management Packs (MPs) tailored to the systems your organization needs to monitor.\nWhy create and use a Zoom MP: I rely on Zoom for daily conference calls. Last week, regional issues prevented users from joining scheduled meetings. This highlighted the need for alerts when SaaS tools experience problems.\nWhile I’ve created dashboards in the past to show the status of SaaS services using the Text Display widget, I wanted to take it a step further and receive email alerts from VCF Operations—just as I do for ESXi hosts, VMs, or storage issues.\nTo enable this, I built a Management Pack (MP) to bring the data into VCF Operations. Once the data is available, you can create dashboards, views, alerts, and reports—just like you would for any other monitored system.\nCreating Management Packs (MPs) with the MP Builder requires making API calls. I did some research and found that Zoom status information is available through a REST API.\nI’ve used the MP Builder before for other use cases, so I was already familiar with the process. Building the Zoom MP took about 30 minutes.\nSee the screenshots and steps below—it’s a straightforward process that anyone can follow.\nIn 2025, take some time to get hands-on with the MP Builder in VCF Operations. The platform already delivers solid monitoring out of the box, but when you start building your own Management Packs, that’s when it really starts to shine.\nDashboard Examples: Colors are very poweful in VCF Operations. When you see Green it\u0026rsquo;s good, while Red, Orange, or Yellow suggests something may need attention. Zoom MP Alerts: Screen Shots MP Alert Alert Type: \u0026ldquo;Application: Availability\u0026rdquo; Condition: If \u0026ldquo;Zoom Meetings\u0026rdquo; \u0026ldquo;Status\u0026rdquo; not equal to \u0026ldquo;operational\u0026rdquo; Select the Policy you want to use Building the MP: Screen Shots creating the MP. Define the source Define the Requests Define the Objects I only pick the fields that I want to be included in VCF Operations. You do NOT have to pick all fiields. Set default values for the MP Perform a Collection and then Build Lessons Learned: Management Packs (MPs) provide a way to monitor components that aren’t included by default. MPs provide a good way for you to Alert your Team when SaaS type solutions also have issues. MPs are straightforward to build. Once you understand how the APIs work, you can create powerful integrations. MP Download coming soon\u0026hellip;\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog helpful, consider buying me a coffee to kickstart my day.\n","date":"2025-04-20T00:00:00Z","image":"https://vcrocs.info/vcf-operations-zoom-mp/featured-image_hu_ebcb8944564ff015.png","permalink":"https://vcrocs.info/vcf-operations-zoom-mp/","title":"VCF Operations | Zoom MP"},{"content":"How to use PowerShell Scripts as a Web Server or RESTful API Front End Server\u0026hellip;\nI’m constantly discovering new things, even after years of working with PowerShell. This blog post highlights a feature I only recently came across, and I’m excited to share it with you. My goal is to spark some ideas and inspire new use cases in your own automation journey.\nUse Case: Here’s a PowerShell use case I hadn’t come across until just last week: using a PowerShell script as a web server—no separate web server installation needed. Just run the script, and your machine starts listening for connections on the port you specify. This idea immediately got my wheels turning about all the possibilities this unlocks. You’ll find some example scripts included in this blog.\nAfter getting a basic listener running on port 8080 with a non-SSL connection, I was curious how complex it would be to switch to port 443 with SSL. A bit of research showed it doesn’t take much—just a few changes to the script. Examples of that are also included here.\nOnce I saw how simple it was to handle incoming web requests, I naturally started thinking: what if a PowerShell script could act as an API front end? I tweaked the listener script to respond to RESTful API requests—and just like that, PowerShell was replying with data to API calls. Not every system you need to pull data from has a REST API, but with this technique, you can make your own. That’s a game-changer for my automation.\nPowerShell Script for RESTful API Requests Use Case: One example is the VCF Operations Management Pack (MP) Builder, which needs to make REST API calls. With this setup, a PowerShell script can serve that role directly. If you can script it, you can expose it as an API and include the data within VCF Operations!\nIn my automation journey, I’ve yet to find something I couldn’t automate with PowerShell. Adding modules to your scripts unlocks even more use cases—like connecting to remote systems over SSH and parsing the results. Having a PowerShell script act as a RESTful API front end opens up endless possibilities for automation and integration.\nCode Examples: This example is a simple Web Server (non-ssl) that displays text along with the current date and time, which updates on every page load or refresh.\nScript can be used to show any web page and data you can create. Think about some cool use cases. The image demonstrates how the time updates on each page refresh, highlighting that the web page is dynamic. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 # Web Server for Home Lab Use and a Nice way to see how PowerShell can be used. # Created By: Dale Hassinger param( [int]$port = 8080 # Define a port parameter with a default value of 8080 ) # Flag for cancellation, used to control when to stop the server $cancelled = $false # Register an event handler for Ctrl+C (ConsoleBreak) # When triggered, it sets the $cancelled flag to true so the server can stop gracefully $null = Register-EngineEvent -SourceIdentifier ConsoleBreak -Action { Write-Host \u0026#34;`nCtrl+C detected. Stopping server...\u0026#34; $global:cancelled = $true } try { # Create a new TCP listener that listens on any IP address and the specified port $listener = [System.Net.Sockets.TcpListener]::new([System.Net.IPAddress]::Any, $port) try { # Start the TCP listener $listener.Start() Write-Host \u0026#34;Server started, listening on port $port...\u0026#34; } catch { # Handle failure to start the listener Write-Host \u0026#34;Failed to start listener: $_\u0026#34; return } # Main loop to keep the server running until cancelled while (-not $cancelled) { # Check if a client is attempting to connect if ($listener.Pending()) { # Accept the incoming TCP client connection $client = $listener.AcceptTcpClient() Write-Host \u0026#34;Client connected: $($client.Client.RemoteEndPoint)\u0026#34; # Get the network stream and setup reader/writer for communication $stream = $client.GetStream() $reader = [System.IO.StreamReader]::new($stream) $writer = [System.IO.StreamWriter]::new($stream) $writer.AutoFlush = $true # Ensure output is flushed immediately # Read the first line of the HTTP request from the client $request = $reader.ReadLine() Write-Host \u0026#34;Received: $request\u0026#34; # Get the current date and time to include in the HTML response $currentDateTime = Get-Date -Format \u0026#34;dddd, MMMM dd, yyyy hh:mm:ss tt\u0026#34; # Define the HTML content to return as the response $htmlContent = @\u0026#34; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;PowerShell Web Example\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;style\u0026gt; * { box-sizing: border-box; } body { margin: 0; padding: 0; font-family: \u0026#39;Segoe UI\u0026#39;, Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(120deg, #f0f2f5, #e2e8f0); display: flex; justify-content: center; align-items: center; height: 100vh; } .container { background-color: #ffffff; padding: 40px; border-radius: 16px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); max-width: 600px; width: 90%; text-align: center; } h1 { color: #1a202c; font-size: 2rem; margin-bottom: 20px; } .datetime { font-size: 1.2rem; color: #4a5568; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Welcome to a PowerShell Web Site Example\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;datetime\u0026#34;\u0026gt;Current Date and Time: $currentDateTime\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;@ # Combine HTTP headers and the HTML content into a full HTTP response $response = \u0026#34;HTTP/1.1 200 OK`r`nContent-Type: text/html; charset=UTF-8`r`n`r`n$htmlContent\u0026#34; Write-Host \u0026#34;Sending response...\u0026#34; # Send the response back to the client $writer.WriteLine($response) # Clean up the network resources $reader.Close() $writer.Close() $client.Close() Write-Host \u0026#34;Client disconnected\u0026#34; } else { # Sleep briefly to reduce CPU usage while waiting for new connections Start-Sleep -Milliseconds 100 } } } finally { # Stop the listener if it exists and isn\u0026#39;t already connected if ($listener -and $listener.Server.Connected -eq $false) { $listener.Stop() Write-Host \u0026#34;Server stopped.\u0026#34; } # Clean up the registered Ctrl+C event Unregister-Event -SourceIdentifier ConsoleBreak -ErrorAction SilentlyContinue Remove-Event -SourceIdentifier ConsoleBreak -ErrorAction SilentlyContinue } This example is a simple Web Server (with ssl) that displays text along with the current date and time, which updates on every page load or refresh.\nScript can be used to show any web page and data you can create. Think about some cool use cases. The image demonstrates how the time updates on each page refresh, highlighting that the web page is dynamic. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 # Web Server for Home Lab Use and a Nice way to see how PowerShell can be used. # Created By: Dale Hassinger param( [int]$port = 443, # Default port set to 443 for HTTPS [string]$certPath = \u0026#34;/Users/dalehassinger/Documents/GitHub/PS-TAM-Lab/vcrocs.pfx\u0026#34;, # Path to the SSL certificate (.pfx) [string]$certPassword = \u0026#34;1234\u0026#34; # Password for the SSL certificate ) # Attempt to load the SSL certificate from the specified path using the provided password try { $certificate = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($certPath, $certPassword) Write-Host \u0026#34;Certificate loaded successfully.\u0026#34; } catch { # If certificate loading fails, write the error and exit Write-Host \u0026#34;Failed to load certificate: $_\u0026#34; return } # Define a cancellation flag to gracefully stop the server when Ctrl+C is pressed $cancelled = $false # Register an event to catch Ctrl+C (ConsoleBreak) and flip the cancellation flag $null = Register-EngineEvent -SourceIdentifier ConsoleBreak -Action { Write-Host \u0026#34;`nCtrl+C detected. Stopping server...\u0026#34; $global:cancelled = $true } try { # Initialize a TCP listener on all network interfaces for the specified port $listener = [System.Net.Sockets.TcpListener]::new([System.Net.IPAddress]::Any, $port) try { # Start the TCP listener $listener.Start() Write-Host \u0026#34;Server started, listening on port $port...\u0026#34; } catch { # Handle failure to start the listener Write-Host \u0026#34;Failed to start listener: $_\u0026#34; return } # Server loop that handles incoming client connections until cancelled while (-not $cancelled) { if ($listener.Pending()) { # Accept an incoming TCP client connection $client = $listener.AcceptTcpClient() Write-Host \u0026#34;Client connected: $($client.Client.RemoteEndPoint)\u0026#34; # Get the underlying network stream from the TCP client $networkStream = $client.GetStream() # Wrap the network stream in an SslStream to secure communication $sslStream = New-Object System.Net.Security.SslStream($networkStream, $false) try { # Authenticate the server with the loaded certificate, enforcing TLS 1.2 $sslStream.AuthenticateAsServer($certificate, $false, [System.Security.Authentication.SslProtocols]::Tls12, $false) Write-Host \u0026#34;SSL Authentication successful.\u0026#34; } catch { # If TLS handshake fails, close the client connection and continue Write-Host \u0026#34;SSL Authentication failed: $_\u0026#34; $client.Close() continue } # Create a StreamReader and StreamWriter to handle HTTP data over SSL $reader = New-Object System.IO.StreamReader($sslStream) $writer = New-Object System.IO.StreamWriter($sslStream) $writer.AutoFlush = $true try { # Attempt to read the first line of the HTTP request $request = $reader.ReadLine() Write-Host \u0026#34;Received: $request\u0026#34; } catch { # Handle any errors while reading the request, such as decryption issues Write-Host \u0026#34;Error reading request (possible decryption issue): $_\u0026#34; $client.Close() continue } # Generate the current date/time to include in the response page $currentDateTime = Get-Date -Format \u0026#34;dddd, MMMM dd, yyyy hh:mm:ss tt\u0026#34; # Define HTML content to serve in the response, styled with CSS and displaying the current time $htmlContent = @\u0026#34; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;PowerShell Web Example\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;style\u0026gt; * { box-sizing: border-box; } body { margin: 0; padding: 0; font-family: \u0026#39;Segoe UI\u0026#39;, Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(120deg, #f0f2f5, #e2e8f0); display: flex; justify-content: center; align-items: center; height: 100vh; } .container { background-color: #ffffff; padding: 40px; border-radius: 16px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); max-width: 600px; width: 90%; text-align: center; } h1 { color: #1a202c; font-size: 2rem; margin-bottom: 20px; } .datetime { font-size: 1.2rem; color: #4a5568; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Welcome to a PowerShell Web Site Example using \u0026lt;span style=\u0026#34;color: green;\u0026#34;\u0026gt;SSL connection\u0026lt;/span\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;datetime\u0026#34;\u0026gt;Current Date and Time: $currentDateTime\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;@ # Construct a basic HTTP 200 OK response with the HTML content $response = \u0026#34;HTTP/1.1 200 OK`r`nContent-Type: text/html; charset=UTF-8`r`n`r`n$htmlContent\u0026#34; Write-Host \u0026#34;Sending response...\u0026#34; try { # Send the response to the client $writer.WriteLine($response) } catch { # Catch any errors during transmission Write-Host \u0026#34;Error sending response: $_\u0026#34; } # Clean up: close the streams and the client connection $reader.Close() $writer.Close() $client.Close() Write-Host \u0026#34;Client disconnected\u0026#34; } else { # Wait briefly before checking for new clients to reduce CPU usage Start-Sleep -Milliseconds 100 } } } finally { # Stop the listener and clean up resources if no active connections remain if ($listener -and $listener.Server.Connected -eq $false) { $listener.Stop() Write-Host \u0026#34;Server stopped.\u0026#34; } # Unregister and remove the Ctrl+C event handler Unregister-Event -SourceIdentifier ConsoleBreak -ErrorAction SilentlyContinue Remove-Event -SourceIdentifier ConsoleBreak -ErrorAction SilentlyContinue } This example is a simple RESTful API front end that returns any data that you have in the PS script.\n(4) Sample API calls:\nReturns Status Returns a simple Hello Returns all the VM Names in my lab vCenter Returns Tiered Memory usage of VMs in my Lab Script can be used to return any data you can create. Think about some cool use cases. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 # API Server for Home Lab Use and a Nice way to see how PowerShell can be used. # Created By: Dale Hassinger param( [int]$port = 8080 # Set the port for the HTTP listener (default 8080) ) # Ensure required PowerShell modules are installed $requiredModules = @(\u0026#34;powershell-yaml\u0026#34;, \u0026#34;VMware.PowerCLI\u0026#34;) foreach ($module in $requiredModules) { if (-not (Get-Module -ListAvailable -Name $module)) { Write-Host \u0026#34;$module is not installed. Install it using \u0026#39;Install-Module $module\u0026#39;.\u0026#34; -ForegroundColor Red exit } } # Load YAML configuration file (contains vCenter and ESXi credentials) $cfgFile = \u0026#34;Home-Lab-Config.yaml\u0026#34; $cfg = Get-Content -Path $cfgFile -Raw | ConvertFrom-Yaml # Flag for gracefully stopping the API server with Ctrl+C $cancelled = $false $null = Register-EngineEvent -SourceIdentifier ConsoleBreak -Action { # Log a Ctrl+C (ConsoleBreak) interruption New-LogEvent -message \u0026#34;`nCtrl+C detected. Stopping server...\u0026#34; -level \u0026#34;warn\u0026#34; $global:cancelled = $true } # Function to log messages with timestamp and level coloring Function New-LogEvent { param( [string]$message, [string]$level ) $timeStamp = Get-Date -Format \u0026#34;MM-dd-yyyy HH:mm:ss\u0026#34; switch ($level.ToLower()) { \u0026#34;info\u0026#34; { Write-Host \u0026#34;[$timeStamp] $message\u0026#34; -ForegroundColor Green } \u0026#34;warn\u0026#34; { Write-Host \u0026#34;[$timeStamp] $message\u0026#34; -ForegroundColor Red } default { Write-Host \u0026#34;[$timeStamp] $message\u0026#34; -ForegroundColor Yellow } } } # Main function to process incoming API requests function Get-ApiResponse { param ( [string]$method, [string]$path ) # Split path into route and query string (e.g. /hello?name=Dale) $route, $queryString = $path -split \u0026#39;\\?\u0026#39;, 2 $params = @{} if ($queryString) { $pairs = $queryString -split \u0026#39;\u0026amp;\u0026#39; foreach ($pair in $pairs) { $key, $value = $pair -split \u0026#39;=\u0026#39;, 2 $params[$key] = $value } } # Route handling using switch based on method and path switch (\u0026#34;$method $route\u0026#34;) { \u0026#34;GET /hello\u0026#34; { # Return a greeting, optionally personalized with ?name= $name = $params[\u0026#34;name\u0026#34;] if (-not $name) { $name = \u0026#34;vCrocs\u0026#34; } return @{ StatusCode = \u0026#34;200 OK\u0026#34; ContentType = \u0026#34;application/json\u0026#34; Body = \u0026#34;{ `\u0026#34;message`\u0026#34;: `\u0026#34;Hello, $name from PowerShell API`\u0026#34; }\u0026#34; } } \u0026#34;GET /status\u0026#34; { # Return a simple health check status with timestamp return @{ StatusCode = \u0026#34;200 OK\u0026#34; ContentType = \u0026#34;application/json\u0026#34; Body = \u0026#39;{ \u0026#34;status\u0026#34;: \u0026#34;ok\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;\u0026#39; + (Get-Date).ToString(\u0026#34;o\u0026#34;) + \u0026#39;\u0026#34; }\u0026#39; } } \u0026#34;GET /vms\u0026#34; { # Connect to vCenter and retrieve list of VMs (excluding vCLS) $vCenter = Connect-VIServer -Server $cfg.vCenter.server -User $cfg.vCenter.username -Password $cfg.vCenter.password -Protocol https $vms = Get-VM | Where-Object { $_.Name -notlike \u0026#34;vCLS-*\u0026#34; } | Select-Object Name | Sort-Object Name $return = $vms | ConvertTo-Json Disconnect-VIServer -Server * -Confirm:$false return @{ StatusCode = \u0026#34;200 OK\u0026#34; ContentType = \u0026#34;application/json\u0026#34; Body = \u0026#34;{\u0026#34;\u0026#34;results\u0026#34;\u0026#34;:$return}\u0026#34; } } \u0026#34;GET /tiered\u0026#34; { # Return detailed memory tier stats (Tier0-RAM and Tier1-NVMe) for each VM # Uses sshpass to connect to each host and run esxcli and memstats $vCenter = Connect-VIServer -Server $cfg.vCenter.server -User $cfg.vCenter.username -Password $cfg.vCenter.password -Protocol https $esxiHosts = Get-VMHost | Select-Object Name | Sort-Object Name $combinedResults = @() foreach ($esxiHost in $esxiHosts) { $server = $esxiHost.Name $username = $cfg.Host101.username $password = $cfg.Host101.password New-LogEvent -message (\u0026#34;Connecting to Host Name: \u0026#34; + $server) -level \u0026#34;info\u0026#34; if (-not (Get-Command sshpass -ErrorAction SilentlyContinue)) { Write-Error \u0026#34;sshpass is not installed or not in your PATH. Please install sshpass and try again.\u0026#34; exit 1 } # Get VM ID to Name mapping $vmCommand = \u0026#34;esxcli --formatter csv vm process list | cut -d \u0026#39;,\u0026#39; -f 2,5\u0026#34; $args_vm = @(\u0026#34;-p\u0026#34;, $password, \u0026#34;ssh\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;ConnectTimeout=10\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;PreferredAuthentications=password\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;PubkeyAuthentication=no\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;StrictHostKeyChecking=no\u0026#34;, \u0026#34;$username@$server\u0026#34;, $vmCommand) $vmOutput = \u0026amp; sshpass @args_vm $VMXCartelID = $vmOutput | ConvertFrom-Csv # Run memstats to get memory usage details $memCommand = \u0026#39;memstats -r vmtier-stats -u mb -s name:memSize:active:tier0Consumed:tier1Consumed\u0026#39; $args_mem = @(\u0026#34;-p\u0026#34;, $password, \u0026#34;ssh\u0026#34;, \u0026#34;-l\u0026#34;, $username, $server, $memCommand) $memOutput = \u0026amp; sshpass @args_mem # Clean and parse memstats output $lines = $memOutput -split \u0026#34;`n\u0026#34; | ForEach-Object { $_.Trim() } | Where-Object { $_ -notmatch \u0026#39;^-{2,}|Total|Start|No.|VIRTUAL|Unit|Selected\u0026#39; } $pattern = \u0026#39;^(?\u0026lt;name\u0026gt;\\S+)\\s+(?\u0026lt;memSize\u0026gt;\\d+)\\s+(?\u0026lt;active\u0026gt;\\d+)\\s+(?\u0026lt;tier0Consumed\u0026gt;\\d+)\\s+(?\u0026lt;tier1Consumed\u0026gt;\\d+)$\u0026#39; $tieredMEM = @() foreach ($line in $lines) { if ($line -match $pattern) { $tieredMEM += [pscustomobject]@{ Name = $matches[\u0026#39;name\u0026#39;] MemSizeMB = [int]$matches[\u0026#39;memSize\u0026#39;] ActiveMB = [int]$matches[\u0026#39;active\u0026#39;] \u0026#34;Tier0-RAM\u0026#34; = [int]$matches[\u0026#39;tier0Consumed\u0026#39;] \u0026#34;Tier1-NVMe\u0026#34; = [int]$matches[\u0026#39;tier1Consumed\u0026#39;] } } } # Clean up names and match Cartel IDs to Display Names $tieredMEM | ForEach-Object { $_.Name = $_.Name -replace \u0026#39;^vm\\.\u0026#39;, \u0026#39;\u0026#39; } $vmNameMap = @{} foreach ($entry in $VMXCartelID) { $vmNameMap[$entry.VMXCartelID] = $entry.DisplayName } foreach ($vm in $tieredMEM) { if ($vmNameMap.ContainsKey($vm.Name)) { $vm.Name = $vmNameMap[$vm.Name] } } # Remove system VMs (vCLS) $tieredMEM = $tieredMEM | Where-Object { $_.Name -notlike \u0026#34;vCLS-*\u0026#34; } # Aggregate host results $combinedResults += $tieredMEM } $return = $combinedResults | ConvertTo-Json Disconnect-VIServer -Confirm:$false return @{ StatusCode = \u0026#34;200 OK\u0026#34; ContentType = \u0026#34;application/json\u0026#34; Body = \u0026#34;{\u0026#34;\u0026#34;results\u0026#34;\u0026#34;:$return}\u0026#34; } } default { # Fallback/default response return @{ StatusCode = \u0026#34;200 OK\u0026#34; ContentType = \u0026#34;application/json\u0026#34; Body = \u0026#39;{ \u0026#34;results\u0026#34;: \u0026#34;Default API reply\u0026#34; }\u0026#39; } } } } # Start the TCP listener and main server loop try { $listener = [System.Net.Sockets.TcpListener]::new([System.Net.IPAddress]::Any, $port) try { $listener.Start() New-LogEvent -message \u0026#34;API server started on port $port...\u0026#34; -level \u0026#34;info\u0026#34; } catch { Write-Host \u0026#34;Failed to start listener: $_\u0026#34; return } while (-not $cancelled) { if ($listener.Pending()) { $client = $listener.AcceptTcpClient() $stream = $client.GetStream() $reader = [System.IO.StreamReader]::new($stream) $writer = [System.IO.StreamWriter]::new($stream) $writer.AutoFlush = $true $requestLine = $reader.ReadLine() New-LogEvent -message \u0026#34;Received: $requestLine\u0026#34; -level \u0026#34;info\u0026#34; if ($requestLine -match \u0026#39;^(GET|POST|PUT|DELETE) (/[^ ]*)\u0026#39;) { $method = $matches[1] $path = $matches[2] $apiResponse = Get-ApiResponse -method $method -path $path $body = $apiResponse.Body # Construct HTTP response manually $response = @\u0026#34; HTTP/1.1 $($apiResponse.StatusCode) Content-Type: $($apiResponse.ContentType) Content-Length: $($body.Length) $body \u0026#34;@ $writer.Write($response) # Log short response preview if ($body.Length -ge 50) { $shortBody = $body.Substring(0,50) + \u0026#34;...\u0026#34; } else { $shortBody = $body } New-LogEvent -message \u0026#34;Returned: $shortBody\u0026#34; -level \u0026#34;info\u0026#34; } # Clean up connection $reader.Close() $writer.Close() $client.Close() New-LogEvent -message \u0026#34;Client disconnected\u0026#34; } else { Start-Sleep -Milliseconds 100 } } } finally { # Cleanup on exit $listener.Stop() New-LogEvent -message \u0026#34;Server stopped.\u0026#34; -level \u0026#34;warn\u0026#34; Unregister-Event -SourceIdentifier ConsoleBreak -ErrorAction SilentlyContinue Remove-Event -SourceIdentifier ConsoleBreak -ErrorAction SilentlyContinue } YAML file contents to use with the PowerShell Script I\u0026rsquo;ve been using a YAML file with all my current scripts to store values for connecting to vCenter, VCF Operations, VCF Automation, and more. If anything changes, I just update the YAML file, and all the scripts continue to work without any issues. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # vCenter Connection vCenter: server: vcsa8x.vcrocs.local username: administrator@vcrocs.local password: VMware1! ignoreCertErrors: true # A Single ESXi Host Connection Host101: server: 192.168.6.101 username: root password: VMware1! # VCF Operations OPS: opsURL: https://vao.vcrocs.local opsUsername: admin opsPassword: VMware1! authSource: local # VCF Automation Automation: autoURL: vaa.vcrocs.local autoUsername: configadmin autoPassword: VMware1! autoDomain: System Domain Here is a sample PowerShell Script web page that is used with the Text Display Widget within a VCF Operations Dashboard.\nThe PowerShell Script is running as a service within a Linux VM There is a 2nd PS script that runs and collects the Tiered Memory Metrics every five minutes and saves the data as a json file that is used with the web page 100s of use cases I have been using Rocky Linux more in my lab for testing PowerShell Automation scripts.\nHere is how I install PowerShell on Rocky Linux:\n1 2 3 4 5 6 7 8 9 10 11 12 # Install PowerShell sudo dnf install https://github.com/PowerShell/PowerShell/releases/download/v7.5.0/powershell-7.5.0-1.rh.x86_64.rpm # Turn off Firewall in your lab to make testing easier sudo systemctl stop firewalld sudo systemctl disable firewalld # Install sshpass to use with PS scripts where you want to make a SSH connection sudo dnf install epel-release sudo dnf install sshpass sshpass -V How to setup a PowerShell Script to run as a service with Rocky Linux:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # Create a new service file (e.g., myscript.service) under /etc/systemd/system/: sudo nano /etc/systemd/system/vcrocs-api.service # Then add the following content: [Unit] Description=PowerShell API Service After=network.target [Service] Type=simple ExecStart=/usr/bin/pwsh -File /root/http-server-api-test-8080.ps1 Restart=on-failure RestartSec=10 User=root WorkingDirectory=/root [Install] WantedBy=multi-user.target # After saving the file, reload systemd to recognize the new service: sudo systemctl daemon-reload # Then enable the service so it starts on boot: sudo systemctl enable vcrocs-api.service # Start the service sudo systemctl start vcrocs-api.service # Service Status sudo systemctl status vcrocs-api.service # Stop the Service sudo systemctl stop vcrocs-api.service Use Visual Studio Code (VS Code) to create, edit, and run PowerShell scripts on your remote Linux-based PowerShell servers:\nTry using the VS Code Remote-SSH extension with a Linux server — it’s a setup I really enjoy. Your code is saved and executed directly on the remote Linux machine. Running a simple PS script on a remote Linux server that uses the VMware PowerCLI module.\nI can edit any type of file I need to on the remote Linux server using this technique\nSteps to create a Self Signed SSL Certifcate to test with:\n1 2 3 4 5 6 7 8 9 # Using openssl openssl genrsa -out vcrocs.key 2048 openssl req -new -key vcrocs.key -out vcrocs.csr openssl x509 -req -days 365 -in vcrocs.csr -signkey vcrocs.key -out vcrocs.crt openssl pkcs12 -export -out vcrocs.pfx -inkey vcrocs.key -in vcrocs.crt If you’re primarily a Windows user and hesitant about using Linux, here’s a quick tip: try installing Cockpit — it provides a user-friendly GUI to help manage your Linux VM with ease.\nHere’s some IT career advice: Get comfortable working with both Windows and Linux. Both operating systems play key roles in enterprise environments. If you’re a Linux user, don’t shy away from using PowerShell. With VMware PowerCLI, automation becomes much easier and more powerful. Steps to install Cockpit on Rocky Liunux:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Update the server sudo dnf update -y # install Cockpit sudo dnf install cockpit -y sudo systemctl enable --now cockpit.socket # FW changes sudo firewall-cmd --permanent --add-service=cockpit sudo firewall-cmd --reload # Allow root to use Cockpit sudo nano /etc/cockpit/disallowed-users # Remove root Nice UI for Linux Management:\nWatch Performance when the PowerShell scripts are running:\nSee the PowerShell Services:\nLessons learned: A PowerShell Script can be a Web Server or a RESTful API front end Great way to test web pages in a lab or simple web server The above scripts are cross platform. Can run on Windows, Mac or Linux I like that I can take a bare bones Linux VM, install PowerShell, add the script and I have web pages available or a RESTful API front end In my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2025-04-09T00:00:00Z","image":"https://vcrocs.info/powershell-script-as-a-web/api-server/featured-image_hu_24c920e416d42b63.png","permalink":"https://vcrocs.info/powershell-script-as-a-web/api-server/","title":"PowerShell Script as a Web/API Server"},{"content":"Add CustomProperties to a VM Deployment after the Virtual Machine is created.\nUse CustomProperties in VMware VCF Automation to drive CMDB integration—keeping users and process logic out of vCenter where they don\u0026rsquo;t belong.\nNote: VCF Automation 8.18.1 was used to create this Blog\nI recently received a great question about using CustomProperties in VMware VCF Automation to keep the CMDB up to date—without relying on direct access to vCenter. I\u0026rsquo;m a big fan of this approach. Many organizations aim to limit who and what can access vCenter to maintain a secure and streamlined environment. The fewer hands in vCenter, the better—keep it lean and mean.\nAs part of the conversation, I was also asked how to capture a VM property that isn\u0026rsquo;t available out of the box in VCF Automation: the \u0026ldquo;bios id\u0026rdquo;. While you can retrieve it with PowerCLI by connecting to vCenter, the goal was to avoid pulling data from vCenter continuously just to populate the CMDB.\nFortunately, I found a Broadcom TechDoc that explains how to add CustomProperties to an existing VM deployment. I\u0026rsquo;m all about real-world examples, so below is how I added the \u0026ldquo;bios id\u0026rdquo; as a custom property to a deployed VM—no direct vCenter calls required to keep CMDB accurate and current.\nSteps: Steps to add a customProperty to a VM deployment:\nStart with a Design Template that includes the customProperties you want to associate with the VM during the build process. Set up a Subscription that triggers an ABX Action to run Post-Provisioning. When the new VM deployment starts, you will not see the customProperty \u0026ldquo;bios id\u0026rdquo; until after the ABX Action runs. The ABX Action connects to vCenter, retrieves the VM\u0026rsquo;s \u0026ldquo;bios id\u0026rdquo;, and writes it back as a customProperty on the deployment. This action only needs to run once—the \u0026ldquo;bios id\u0026rdquo; is static. Design Template: Sample Design Template YAML code YAML code shows some examples that can be used with any VM build 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 formatVersion: 2 name: Rocky-Basic outputs: __deploymentOverview: value: | **The following vSphere Virtual Machine has been provisioned with VMware VCF Automation.** **Original Build Specs Used:** IP: ${input.IP} Memory(MB): ${input.totalMemoryMB} CPU (Count): ${input.cpuCount} Core (Count): ${input.coreCount} **Connect to Server using Cockpit:** http://${input.IP}:9090 **Check out these Blogs for Updates/Tips/Tricks on the VMware VCF Operations/Automation Products:** **Brock Peterson:** https://www.BrockPeterson.com **Dale Hassinger:** https://www.vCROCS.info **Cosmin Trif:** https://www.cosmin.gq **Link to vCROCS VCF Operations:** https://vao.vcrocs.local **Link to vCROCS VCF Operations for Logs:** https://vaol.vcrocs.local #cloud-config inputs: CustomizationSpec: type: string description: Customization Specification default: LINUX title: CustomizationSpec VMName: type: string title: VM Name minLength: 1 maxLength: 15 default: DB-ROCKY-204 IP: type: string default: 192.168.5.204 totalMemoryMB: type: integer title: Memory(MB) default: 1024 cpuCount: type: integer title: CPU (count) default: 1 coreCount: type: integer title: Core (count) default: 1 folderName: type: string title: vCenter Folder default: Rocky-Linux enum: - Rocky-Linux - ESXi-01-VMs - ESXi-02-VMs VolumeGB: type: string title: \u0026#39;Volume Size GB:\u0026#39; default: \u0026#39;30\u0026#39; resources: Network_VMs: type: Cloud.vSphere.Network properties: name: PG-VMs networkType: existing constraints: - tag: Network:VM vCenter_Rocky: type: Cloud.vSphere.Machine properties: image: ROCKY9 name: ${input.VMName} totalMemoryMB: ${input.totalMemoryMB} cpuCount: ${input.cpuCount} coreCount: ${input.coreCount} biosName: ${input.VMName} fqdn: ${input.VMName}.vcrocs.local folderName: Rocky-Linux storage: bootDiskCapacityInGB: ${input.VolumeGB} remoteAccess: authentication: usernamePassword username: root password: ${secret.administrator} customizationSpec: ${input.CustomizationSpec} constraints: - tag: VPZ:VM networks: - network: ${resource.Network_VMs.id} assignment: static address: ${input.IP} Subscription: Screenshot of the Subscription configured to trigger the ABX Action Utilizes the Post Provision Event Topic Includes a filter to run only for a specific Blueprint Defines the ABX Action to be executed ABX Action: Screen shot of ABX Action Screen shot of ABX Action code and inputs I created a Blog that goes into detail about ABX Action Constants and Secrets. Take a look for more information. Using ABX Action Constants and Secrets is a recommended best practice for enhancing security and simplifying updates to values shared across multiple ABX Actions. ABX Action Function PowerShell Code Connects to vCenter to retrieve the \u0026ldquo;bios id\u0026rdquo; value Connects to VCF Automation to obtain an access token Adds a new customProperty to the VM deployment Confirms that the customProperty value has been successfully set 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 function handler($context, $inputs) { # Extract input values from ABX context and inputs $vmName = $inputs.customProperties.biosName $VCFAutomationServer = $inputs.VCFAutomationServer $VCFAutomationUsername = $inputs.VCFAutomationUsername $vCenterServer = $inputs.vCenterServer $vCenterUsername = $inputs.vCenterUsername $vCenterPassword = $context.getSecret($inputs.vCenterPassword) $VCFAutomationPassword = $context.getSecret($inputs.VCFAutomationPassword) # Output variable values for debugging (avoid writing sensitive secrets) Write-Host \u0026#34;---PS Variables:\u0026#34; Write-Host \u0026#34;--vCenterServer: \u0026#34; $vCenterServer Write-Host \u0026#34;vCenterUsername: \u0026#34; $vCenterUsername #Write-Host \u0026#34;vCenterPassword: \u0026#34; $vCenterPassword Write-Host \u0026#34;--VCF Automation Server: \u0026#34; $VCFAutomationServer Write-Host \u0026#34;VCF Automation Username: \u0026#34; $VCFAutomationUsername #Write-Host \u0026#34;VCF Automation Password: \u0026#34; $VCFAutomationPassword Write-Host \u0026#34;VM Name:\u0026#34; $vmName # Connect to vCenter and retrieve VM information Write-Host \u0026#34;Connecting to vCenter...\u0026#34; $viConnection = Connect-VIServer -Server $vCenterServer -User $vCenterUsername -Password $vCenterPassword -WarningAction SilentlyContinue -Protocol https -Force # Get BIOS UUID of the specified VM $results = Get-VM -Name $vmName $biosID = $results.ExtensionData.Config.Uuid Write-Host \u0026#34;BIOS ID:\u0026#34; $biosID # Disconnect from vCenter to clean up session Write-Host \u0026#34;Disconnecting from vCenter...\u0026#34; Disconnect-VIServer -Server * -Confirm:$false # --- VCF Automation API Integration --- # Assign base server name to variable for reuse $vas = $VCFAutomationServer # Step 1: Authenticate to VCF Automation API $uri = \u0026#34;https://$vas/csp/gateway/am/api/login\u0026#34; Write-Host \u0026#34;uri:\u0026#34; $uri # Build the request body for login $body = @{ username = $VCFAutomationUsername password = $VCFAutomationPassword domain = \u0026#34;System Domain\u0026#34; } | ConvertTo-Json # Define base headers for all API calls $header = @{ \u0026#39;accept\u0026#39; = \u0026#39;*/*\u0026#39; \u0026#39;Content-Type\u0026#39; = \u0026#39;application/json\u0026#39; } # Request an access token Write-Host \u0026#34;Making VCF Automation API Call to get token...\u0026#34; $response = Invoke-RestMethod -Uri $uri -Method Post -Headers $header -Body $body -SkipCertificateCheck # Add access token to headers for subsequent API calls $accessToken = \u0026#34;Bearer \u0026#34; + $response.cspAuthToken $header.Add(\u0026#34;Authorization\u0026#34;, $accessToken) # Step 2: Get machine ID based on VM name $filter = [System.Net.WebUtility]::UrlEncode(\u0026#34;name eq \u0026#39;$vmName\u0026#39;\u0026#34;) $uri = \u0026#34;https://$vas/iaas/api/machines?`$filter=$filter\u0026#34; Write-Host \u0026#34;uri:\u0026#34; $uri Write-Host \u0026#34;Making VCF Automation API Call to get Machine ID...\u0026#34; $results = Invoke-RestMethod -Uri $uri -Method GET -Headers $header -SkipCertificateCheck $machineID = $results.content.id Write-Host \u0026#34;machine id:\u0026#34; $machineID # Step 3: Patch the machine with BIOS ID $uri = \u0026#34;https://$vas/iaas/api/machines/$machineID\u0026#34; Write-Host \u0026#34;uri:\u0026#34; $uri # Build the PATCH payload $bodyObj = @{ customProperties = @{ biosID = $biosID } } $body = $bodyObj | ConvertTo-Json Write-Host \u0026#34;Body:\u0026#34; $body # Send the PATCH request to update the BIOS ID Write-Host \u0026#34;Making VCF Automation API Call to set BIOS ID...\u0026#34; $response = Invoke-RestMethod -Uri $uri -Method Patch -Headers $header -Body $body -SkipCertificateCheck Write-Host \u0026#34;biosID Response:\u0026#34; $response.customProperties.biosID # Step 4: Verification – Confirm that the BIOS ID was updated $filter = [System.Net.WebUtility]::UrlEncode(\u0026#34;name eq \u0026#39;$vmName\u0026#39;\u0026#34;) $uri = \u0026#34;https://$vas/iaas/api/machines?`$filter=$filter\u0026#34; Write-Host \u0026#34;uri:\u0026#34; $uri $results = Invoke-RestMethod -Uri $uri -Method GET -Headers $header -SkipCertificateCheck $biosID = $results.content.customProperties.biosID Write-Host \u0026#34;Verify BIOS ID:\u0026#34; $biosID # Return original inputs return $inputs } Code to get customProperties from a deployment: PowerShell Code to make an API Call to VCF Automation to get a deployment CustomProperty values This sample code demonstrates how any process can retrieve customProperty values from VCF Automation. It uses an API call, so the logic remains consistent across use cases. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 # ------------- Code to Get VCF Automation Deployment customProperty Values -------------- # Code works in DDC Lab # Date: 2025.03.28 # Check if the powershell-yaml module is installed if (-not (Get-Module -ListAvailable -Name powershell-yaml)) { Write-Host \u0026#34;PowerShell-YAML module is not installed. Please install it using \u0026#39;Install-Module powershell-yaml\u0026#39;.\u0026#34; exit } # Check if the VMware PowerCLI module is installed if (-not (Get-Module -ListAvailable -Name VMware.PowerCLI)) { Write-Host \u0026#34;VMware PowerCLI module is not installed. Please install it using \u0026#39;Install-Module VMware.PowerCLI\u0026#39;.\u0026#34; exit } # Load YAML configuration file $cfgFile = \u0026#34;VCF-Nested-Step-1-Host-Only-YAML.yaml\u0026#34; $cfg = Get-Content -Path $cfgFile -Raw | ConvertFrom-Yaml # Set the VM name to retrieve customProperties for $vmName = \u0026#34;DB-ROCKY-208\u0026#34; # Get the VCF Automation server from the YAML config $vraServer = $cfg.Automation.autoURL # Prepare login URI $uri = \u0026#34;https://$vraServer/csp/gateway/am/api/login\u0026#34; # Prepare login request body $body = @{ username = $cfg.Automation.autoUsername password = $cfg.Automation.autoPassword domain = $cfg.Automation.autoDomain } | ConvertTo-Json #$body # Optional output for debugging # Set standard request headers $header = @{ \u0026#39;accept\u0026#39; = \u0026#39;*/*\u0026#39; \u0026#39;Content-Type\u0026#39; = \u0026#39;application/json\u0026#39; } # Authenticate and get access token $response = Invoke-RestMethod -Uri $uri -Method Post -Headers $header -Body $body -SkipCertificateCheck $accessToken = \u0026#34;Bearer \u0026#34; + $response.cspAuthToken # Add Authorization header for subsequent API calls $header.Add(\u0026#34;Authorization\u0026#34;,$accessToken) # Define URI to fetch deployed machines $filter = [System.Net.WebUtility]::UrlEncode(\u0026#34;name eq \u0026#39;$vmName\u0026#39;\u0026#34;) $uri = \u0026#34;https://$vraServer/iaas/api/machines?`$filter=$filter\u0026#34; #$uri # Get list of VMs and extract customProperties for the matching VM name $results = Invoke-RestMethod -uri $uri -Method GET -Headers $header -SkipCertificateCheck # Output the customProperties $results.content.customProperties YAML file contents to use with the PowerShell Script to get customProperties I\u0026rsquo;ve been using a YAML file with all my current scripts to store values for connecting to vCenter, VCF Operations, VCF Automation, and more. If anything changes, I just update the YAML file, and all the scripts continue to work without any issues. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # vCenter Connection vCenter: server: vcsa8x.vcrocs.local username: administrator@vcrocs.local password: VMware1! ignoreCertErrors: true # A Single ESXi Host Connection Host101: server: 192.168.6.101 username: root password: VMware1! # VCF Operations OPS: opsURL: https://vao.vcrocs.local opsUsername: admin opsPassword: VMware1! authSource: local # VCF Automation Automation: autoURL: vaa.vcrocs.local autoUsername: configadmin autoPassword: VMware1! autoDomain: System Domain Lessons learned: Using customProperties with VCF Automation is a great way to keep 3rd party processes out of VMware vCenter. customProperty values can be added Post Provision of a new VM deployment in VCF Automation. Think of other customProperties you would want to add to a VCF Automation VM Deployment. This technique can be done for a lot use cases. The primary purpose of this blog post is to inform VCF Automation users that it\u0026rsquo;s possible to add or modify customProperties for VM deployments even after the VM has been created. In my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2025-03-30T00:00:00Z","image":"https://vcrocs.info/vcf-automation-customproperties/featured-image_hu_4d564a31a5dcc63c.png","permalink":"https://vcrocs.info/vcf-automation-customproperties/","title":"VCF Automation | CustomProperties"},{"content":"How to use a Rocky Linux PowerShell Host with VCF Automation Orchestrator. Linux ❤️ PowerShell!\nStreamline VMware Automation with VCF Automation, a Rocky Linux PowerShell host, custom workflows, and the simplicity of PowerCLI.\nI like using PowerShell on Linux in my Lab: In most cases, a PowerShell Host for VCF Automation Orchestrator is set up on a Windows Server, which works seamlessly. Having spent much of my career working with Microsoft Windows Server, I’m well-versed in its capabilities. However, in my lab, where resource efficiency is a priority, I prefer to run Linux VMs whenever possible. I keep these Linux VMs lean and mean for maximum performance.\nI set out to explore how a Rocky Linux VM could function as a PowerShell Host. By default, VCF Automation Orchestrator includes a workflow called “Run SSH Command”, designed to execute SSH commands on a server. I began testing with this built-in workflow and customized it to better align with my requirements.\nTo keep the setup simple, I wanted to create a single workflow where I could specify the PS script path and name. The Linux VM details—such as hostname, username, password, and port—would remain static.\nFor 2025, I’ve been invited to be a VMware Community {code} Coach! This year, my blogs will feature even more code examples to help others get started with automation, VMware solutions, and much more\u0026hellip;\nRunning PowerShell from the CLI and Executing a Script: 1 2 3 4 pwsh -file /home/administrator/Home-Lab-PS.ps1 # If you want to use Script Parameters pwsh -file /home/administrator/Home-Lab-PS.ps1 -vmName \u0026#34;VM-01\u0026#34; -PowerState \u0026#34;On\u0026#34; Workflow Design: Click to download the workflow Import the Package into Orchestrator Java Script used in the Workflow to SSH to the Rocky Linux PowerShell Host and run a PS Script:\nClick arrow to expand the JavaScript code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 var session = null; try { if (port) { session = new SSHSession(hostNameOrIP, username, port); } else { System.log(\u0026#34;A port value is not provided! Using default port 22\u0026#34;); session = new SSHSession(hostNameOrIP, username); } if (passwordAuthentication){ System.log(\u0026#34;Connecting with password\u0026#34;); } else { if (path == null || path == \u0026#34;\u0026#34;){ System.log(\u0026#34;using default\u0026#34;); path = defaultKeyPairPath; } System.log(\u0026#34;Connecting with key pair (\u0026#34; + path + \u0026#34;)\u0026#34;); password = passphrase; } session.connectWithPasswordOrIdentity(passwordAuthentication, password, path); System.log(\u0026#34;Connected!\u0026#34;); System.log(\u0026#34;Executing \u0026#39;\u0026#34; + cmd + \u0026#34;\u0026#39; using encoding \u0026#39;\u0026#34; + (encoding ? encoding : \u0026#34;Default System Encoding\u0026#34;) + \u0026#34;\u0026#39;\u0026#34;); session.setEncoding(encoding); session.executeCommand(cmd, true); output = session.getOutput(); System.log(\u0026#34;Output: \u0026#39;\u0026#34; + output + \u0026#34;\u0026#39;\u0026#34;); } catch (e) { throw \u0026#34;Unable to execute command: \u0026#34; + e; } finally { if (session) { session.disconnect(); } } Code Examples: YAML file to store values to be used with scripts Click arrow to expand the YAML code:\n1 2 3 4 5 6 # vCenter Connection Values vCenter: server: vcsa8x.vcrocs.local username: administrator@vcrocs.local password: VMware1! ignoreCertErrors: true Sample PowerShell Script:\nSample script that I used to show that Rocky Linux can be used as a PowerShell Host 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # Ensure required modules are installed before proceeding $requiredModules = @(\u0026#34;powershell-yaml\u0026#34;, \u0026#34;VMware.PowerCLI\u0026#34;) foreach ($module in $requiredModules) { if (-not (Get-Module -ListAvailable -Name $module)) { Write-Host \u0026#34;$module is not installed. Install it using \u0026#39;Install-Module $module\u0026#39;.\u0026#34; -ForegroundColor Red exit } } # Read YAML configuration $cfgFile = \u0026#34;Home-Lab-Config.yaml\u0026#34; $cfg = Get-Content -Path $cfgFile -Raw | ConvertFrom-Yaml Write-Host \u0026#34;Executing Script\u0026#34; # Connect to vCenter Write-Host \u0026#34;Connecting to vCenter...\u0026#34; try { $credential = New-Object PSCredential ($cfg.vCenter.username, (ConvertTo-SecureString $cfg.vCenter.password -AsPlainText -Force)) $vCenter = Connect-VIServer -Server $cfg.vCenter.server -Credential $credential -Force Write-Host \u0026#34;Running commands...\u0026#34; $vmNames = Get-VM | Select-Object Name, PowerState | Sort-Object Name $vmNames.Name Disconnect-VIServer -Server * -Confirm:$false Write-Host \u0026#34;Disconnecting from vCenter...\u0026#34; return \u0026#34;Script Completed\u0026#34; } catch { Write-Host \u0026#34;An error occurred: $_\u0026#34; return \u0026#34;Error: $_\u0026#34; } VCF Automation Catalog with an Option to run the Orchestrator Workflow that was created to run the script on Rocky Linux Orchestrator Workflow as a Catalog Item This is a simple example to give you ideas. The script that will run could bascially Automate anything Script Parameters become fields on a custom form If you can write a script for the process, you can Automate it with Orchestrator Install PowerShell on Rocky Linux: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Install PowerShell on Rocky Linux sudo dnf install -y powershell # Ensure OpenSSH is installed and running sudo dnf install -y openssh-server sudo systemctl enable --now sshd # Create a PowerShell subsystem entry in the SSH daemon config echo \u0026#34;Subsystem powershell /usr/bin/pwsh -sshs -NoProfile\u0026#34; | sudo tee -a /etc/ssh/sshd_config # Restart the SSH service sudo systemctl restart sshd Lessons Learned: If you like to use Linux for Servers, this is a good use case for running PowerShell scripts If you have existing PowerShell scripts that run on a Windows Server, most scripts should run on Linux with little to no modifications I enjoy bringing consistency to my scripts by leveraging a YAML file, similar to the approach used in automation platforms I work with All the scripts in this blog were created and tested on a Mac using PowerShell Don’t dismiss PowerShell just because it was created by Microsoft. Embrace it to enhance your automation journey! In my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog helpful, consider buying me a coffee to kickstart my day.\n","date":"2025-03-15T00:00:00Z","image":"https://vcrocs.info/vcf-automation-linux-powershell-host/featured-image_hu_73ed19300509d942.png","permalink":"https://vcrocs.info/vcf-automation-linux-powershell-host/","title":"VCF Automation | Linux PowerShell Host"},{"content":"Streamlining PowerCLI Scripts: Using YAML for Variable Management\nThe true power of automation lies in simplicity—storing all your home lab variables in a single YAML file transforms complexity into clarity, making every deployment seamless and every configuration effortless.\nWhy am I using a YAML file: Many automation tools and platforms rely on YAML files for configuration due to their readability and flexibility. In VMware VCF Automation—something I frequently work with—YAML is used extensively for Design Templates. To maintain consistency across my automation scripts, I centralized all my Home Lab variables in a single YAML file.\nTo work with YAML in PowerShell, I’m using the \u0026ldquo;PowerShell-YAML\u0026rdquo; module, which provides a simple and efficient way to read and write YAML data. In this blog post, I’ll share several sample scripts demonstrating how easy it is to integrate YAML into PowerShell-based automation.\nAll required variables for the PowerShell scripts are centralized in a single YAML configuration file for streamlined management.\nFor 2025, I’ve been invited to be a VMware Community {code} Coach! This year, my blogs will feature even more code examples to help others get started with automation, VMware solutions, and much more\u0026hellip;\nCode Examples: The sample YAML file contains all the variables for my home lab:\nYou can see that I have defined variables for several products within my home lab The YAML file is organized into major categories, such as NH, vCenter, Host101, and OPS, each representing a different area of configuration for my Lab Within each top-level section, specific settings are defined using key-value pairs. For example, in NH, values like VIServer, VIUsername, and VIPassword store configuration details for a nested host setup Some sections, like NH → Hosts, contain lists (denoted by -), where multiple items (e.g., ESXi hosts) are grouped together with attributes such as Hostname, IP, and Create Separate Functional Areas NH configures the nested ESXi environment vCenter stores vCenter connection details Host101 provides credentials for a single ESXi host OPS defines login details for VCF Operations Click arrow to expand the YAML code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 # NH is Nested Host NH: VIServer: 192.168.6.100 VIUsername: administrator@vcrocs.local VIPassword: VMware1! NestedESXiApplianceOVA: /Users/dalehassinger/Downloads/Nested_ESXi8.0u3c_Appliance_Template_v1.ova verboseLogFile: /Users/dalehassinger/Documents/GitHub/PS-TAM-Lab/VCF-Nested-Step-1-Host-Only-YAML.log NestedESXiMGMTvCPU: 12 NestedESXiMGMTvMEM: 88 NestedESXiMGMTCachingvDisk: 4 NestedESXiMGMTCapacityvDisk: 500 NestedESXiMGMTBootDisk: 32 VMDatastore: ESX-04-2TB-02 VMCluster: CLUSTER-03-VCF VMNetwork: VMs VMNetmask: 255.255.252.0 VMGateway: 192.168.4.1 VMDNS: 192.168.6.1 VMNTP: time.google.com VMPassword: VMware1! VMDomain: vcrocs.local VMSyslog: 192.168.6.94 Hosts: - Hostname: VCF-DDC-ESX178 IP: 192.168.4.178 Create: True - Hostname: VCF-DDC-ESX179 IP: 192.168.4.179 Create: False - Hostname: VCF-DDC-ESX180 IP: 192.168.4.180 Create: True # vCenter Connection vCenter: server: vcsa8x.vcrocs.local username: administrator@vcrocs.local password: VMware1! ignoreCertErrors: true # A Single ESXi Host Connection Host101: server: 192.168.6.101 username: root password: VMware1! # VCF Operations OPS: opsURL: https://vao.vcrocs.local opsUsername: admin opsPassword: VMware1! authSource: local Sample Script to create Nested ESXi VMs:\nThe initial lines of code ensure that the necessary PowerShell modules are installed before executing the script The PowerShell code then reads the Home-Lab-Config.yaml file, loads its content as a raw string, and converts it from YAML format into a structured PowerShell object stored in $cfg The PowerShell code accesses the properties within the NH section of the $cfg object, which was previously loaded from a YAML configuration file The code references the NH section of the YAML configuration, accessing its VIServer value, where NH represents a structured key within the YAML file, organizing configuration settings into hierarchical sections. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 # Ensure required modules are installed before proceeding $requiredModules = @(\u0026#34;powershell-yaml\u0026#34;, \u0026#34;VMware.PowerCLI\u0026#34;) foreach ($module in $requiredModules) { if (-not (Get-Module -ListAvailable -Name $module)) { Write-Host \u0026#34;$module is not installed. Install it using \u0026#39;Install-Module $module\u0026#39;.\u0026#34; -ForegroundColor Red exit } } # Read YAML configuration $cfgFile = \u0026#34;/Users/dalehassinger/Documents/GitHub/PS-TAM-Lab/Home-Lab-Config.yaml\u0026#34; $cfg = Get-Content -Path $cfgFile -Raw | ConvertFrom-Yaml # Function to display configuration details Function Show-ConfigValue { param ( [string]$label, [string]$value, [switch]$newLine ) Write-Host -NoNewline -ForegroundColor Green \u0026#34;${label}: \u0026#34; Write-Host -ForegroundColor White $value if ($newLine) { Write-Host \u0026#34;`n\u0026#34; } } # Display Nested ESXi Build Details Write-Host -ForegroundColor Magenta \u0026#34;`nNested ESXi Build Details:`n\u0026#34; Write-Host -ForegroundColor Yellow \u0026#34;---- vCenter Server used to Build Nested ESXi Host(s) ----\u0026#34; Show-ConfigValue \u0026#34;vCenter Server Address\u0026#34; $cfg.NH.VIServer -newLine Show-ConfigValue \u0026#34;VM Network\u0026#34; $cfg.NH.VMNetwork Show-ConfigValue \u0026#34;VM Storage\u0026#34; $cfg.NH.VMDatastore Show-ConfigValue \u0026#34;VM Cluster\u0026#34; $cfg.NH.VMCluster -newLine Write-Host -ForegroundColor Yellow \u0026#34;---- ESXi Configuration for VCF Management Domain ----\u0026#34; $hostnames = ($cfg.NH.Hosts | Where-Object { $_.Create } | ForEach-Object { $_.Hostname }) -join \u0026#34;, \u0026#34; Show-ConfigValue \u0026#34;ESXi VM Name(s)\u0026#34; $hostnames $hostips = ($cfg.NH.Hosts | Where-Object { $_.Create } | ForEach-Object { $_.ip }) -join \u0026#34;, \u0026#34; Show-ConfigValue \u0026#34;IP Address(s)\u0026#34; $hostips Show-ConfigValue \u0026#34;vCPU\u0026#34; $cfg.NH.NestedESXiMGMTvCPU Show-ConfigValue \u0026#34;vMEM\u0026#34; \u0026#34;$($cfg.NH.NestedESXiMGMTvMEM) GB\u0026#34; Show-ConfigValue \u0026#34;Caching VMDK\u0026#34; \u0026#34;$($cfg.NH.NestedESXiMGMTCachingvDisk) GB\u0026#34; Show-ConfigValue \u0026#34;Capacity VMDK\u0026#34; \u0026#34;$($cfg.NH.NestedESXiMGMTCapacityvDisk) GB\u0026#34; -newLine Show-ConfigValue \u0026#34;Netmask\u0026#34; $cfg.NH.VMNetmask Show-ConfigValue \u0026#34;Gateway\u0026#34; $cfg.NH.VMGateway Show-ConfigValue \u0026#34;DNS\u0026#34; $cfg.NH.VMDNS Show-ConfigValue \u0026#34;NTP\u0026#34; $cfg.NH.VMNTP Show-ConfigValue \u0026#34;Syslog\u0026#34; $cfg.NH.VMSyslog -newLine # Build Start Time $StartTime = Get-Date # Function to log events Function New-LogEvent { param([string]$message) $timeStamp = Get-Date -Format \u0026#34;MM-dd-yyyy HH:mm:ss\u0026#34; Write-Host \u0026#34;[$timeStamp] $message\u0026#34; -ForegroundColor Green \u0026#34;[$timeStamp] $message\u0026#34; | Out-File -Append -LiteralPath $cfg.NH.verboseLogFile } # Connect to vCenter New-LogEvent \u0026#34;Connecting to vCenter: $($cfg.NH.VIServer)...\u0026#34; $viConnection = Connect-VIServer $cfg.NH.VIServer -User $cfg.NH.VIUsername -Password $cfg.NH.VIPassword -WarningAction SilentlyContinue -Protocol https -Force # Get datastore, cluster, and random ESXi host $datastore = Get-Datastore -Server $viConnection -Name $cfg.NH.VMDatastore | Select-Object -First 1 $cluster = Get-Cluster -Server $viConnection -Name $cfg.NH.VMCluster $vmhost = $cluster | Get-VMHost | Get-Random -Count 1 # Iterate over each Nested ESXi Host in YAML foreach ($nestedhost in $cfg.NH.Hosts) { if (-not $nestedhost.Create) { New-LogEvent \u0026#34;Skipping host: $($nestedhost.Hostname) as per configuration.\u0026#34; continue } # Check if the VM already exists if (Get-VM -Name $nestedhost.Hostname -ErrorAction SilentlyContinue) { New-LogEvent \u0026#34;Nested ESXi Host: $($nestedhost.Hostname) already exists. Skipping deployment.\u0026#34; continue } # Configure VM settings $VMHostName = \u0026#34;$($nestedhost.Hostname).$($cfg.NH.VMDomain)\u0026#34; $ovfconfig = Get-OvfConfiguration $cfg.NH.NestedESXiApplianceOVA $networkMapLabel = ($ovfconfig.ToHashTable().keys | Where {$_ -Match \u0026#34;NetworkMapping\u0026#34;}).replace(\u0026#34;NetworkMapping.\u0026#34;,\u0026#34;\u0026#34;).replace(\u0026#34;-\u0026#34;,\u0026#34;_\u0026#34;).replace(\u0026#34; \u0026#34;,\u0026#34;_\u0026#34;) $ovfconfig.NetworkMapping.$networkMapLabel.value = $cfg.NH.VMNetwork $ovfconfig.common.guestinfo.hostname.value = $VMHostName $ovfconfig.common.guestinfo.ipaddress.value = $nestedhost.IP $ovfconfig.common.guestinfo.netmask.value = $cfg.NH.VMNetmask $ovfconfig.common.guestinfo.gateway.value = $cfg.NH.VMGateway $ovfconfig.common.guestinfo.dns.value = $cfg.NH.VMDNS $ovfconfig.common.guestinfo.domain.value = $cfg.NH.VMDomain $ovfconfig.common.guestinfo.ntp.value = $cfg.NH.VMNTP $ovfconfig.common.guestinfo.syslog.value = $cfg.NH.VMSyslog $ovfconfig.common.guestinfo.password.value = $cfg.NH.VMPassword $ovfconfig.common.guestinfo.ssh.value = $true New-LogEvent \u0026#34;Deploying Nested ESXi VM: $($nestedhost.Hostname) with IP $($nestedhost.IP) ...\u0026#34; $vm = Import-VApp -Source $cfg.NH.NestedESXiApplianceOVA -OvfConfiguration $ovfconfig -Name $nestedhost.Hostname -Location $cfg.NH.VMCluster -VMHost $vmhost -Datastore $datastore -DiskStorageFormat thin -Force New-LogEvent \u0026#34;Updating vCPU: $($cfg.NH.NestedESXiMGMTvCPU) \u0026amp; vMEM: $($cfg.NH.NestedESXiMGMTvMEM) GB ...\u0026#34; Set-VM -VM $vm -NumCpu $cfg.NH.NestedESXiMGMTvCPU -CoresPerSocket $cfg.NH.NestedESXiMGMTvCPU -MemoryGB $cfg.NH.NestedESXiMGMTvMEM -Confirm:$false | Out-File -Append -LiteralPath $cfg.NH.verboseLogFile New-LogEvent \u0026#34;Updating vSAN Disks (Boot: $($cfg.NH.NestedESXiMGMTBootDisk) GB, Cache: $($cfg.NH.NestedESXiMGMTCachingvDisk) GB, Capacity: $($cfg.NH.NestedESXiMGMTCapacityvDisk) GB)...\u0026#34; Get-HardDisk -VM $vm -Name \u0026#34;Hard disk 1\u0026#34; | Set-HardDisk -CapacityGB $cfg.NH.NestedESXiMGMTBootDisk -Confirm:$false | Out-File -Append -LiteralPath $cfg.NH.verboseLogFile Get-HardDisk -VM $vm -Name \u0026#34;Hard disk 2\u0026#34; | Set-HardDisk -CapacityGB $cfg.NH.NestedESXiMGMTCachingvDisk -Confirm:$false | Out-File -Append -LiteralPath $cfg.NH.verboseLogFile Get-HardDisk -VM $vm -Name \u0026#34;Hard disk 3\u0026#34; | Set-HardDisk -CapacityGB $cfg.NH.NestedESXiMGMTCapacityvDisk -Confirm:$false | Out-File -Append -LiteralPath $cfg.NH.verboseLogFile New-LogEvent \u0026#34;Powering On $($nestedhost.Hostname) ...\u0026#34; $vm | Start-Vm -RunAsync | Out-Null } # Disconnect from vCenter New-LogEvent \u0026#34;Disconnecting from vCenter...\u0026#34; Disconnect-VIServer -Server * -Confirm:$false $EndTime = Get-Date $duration = [math]::Round((New-TimeSpan -Start $StartTime -End $EndTime).TotalMinutes,2) New-LogEvent \u0026#34;VCF Lab Nested ESXi Hosts Build Complete!\u0026#34; New-LogEvent \u0026#34;StartTime: $StartTime\u0026#34; New-LogEvent \u0026#34;EndTime: $EndTime\u0026#34; New-LogEvent \u0026#34;Duration: $duration minutes to deploy Nested ESXi Hosts\u0026#34; Sample Script to connect to vCenter using variables from a YAML file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Ensure required modules are installed before proceeding $requiredModules = @(\u0026#34;powershell-yaml\u0026#34;, \u0026#34;VMware.PowerCLI\u0026#34;) foreach ($module in $requiredModules) { if (-not (Get-Module -ListAvailable -Name $module)) { Write-Host \u0026#34;$module is not installed. Install it using \u0026#39;Install-Module $module\u0026#39;.\u0026#34; -ForegroundColor Red exit } } # Read YAML configuration $cfgFile = \u0026#34;/Users/dalehassinger/Documents/GitHub/PS-TAM-Lab/Home-Lab-Config.yaml\u0026#34; $cfg = Get-Content -Path $cfgFile -Raw | ConvertFrom-Yaml # Connect to vCenter $credential = New-Object PSCredential ($cfg.vCenter.username, (ConvertTo-SecureString $cfg.vCenter.password -AsPlainText -Force)) $vCenter = Connect-VIServer -Server $cfg.vCenter.server -Credential $credential -Force Get-VM | Select-Object Name | Sort-Object Name Disconnect-VIServer -Server * -Confirm:$false Sample Script to Connect to an ESXi Host Using Variables from a YAML File:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Ensure required modules are installed before proceeding $requiredModules = @(\u0026#34;powershell-yaml\u0026#34;, \u0026#34;VMware.PowerCLI\u0026#34;) foreach ($module in $requiredModules) { if (-not (Get-Module -ListAvailable -Name $module)) { Write-Host \u0026#34;$module is not installed. Install it using \u0026#39;Install-Module $module\u0026#39;.\u0026#34; -ForegroundColor Red exit } } # Read YAML configuration $cfgFile = \u0026#34;/Users/dalehassinger/Documents/GitHub/PS-TAM-Lab/Home-Lab-Config.yaml\u0026#34; $cfg = Get-Content -Path $cfgFile -Raw | ConvertFrom-Yaml # Connect to a ESXi Host $credential = New-Object PSCredential ($cfg.Host101.username, (ConvertTo-SecureString $cfg.Host101.password -AsPlainText -Force)) $hostConnection = Connect-VIServer -Server $cfg.Host101.server -Credential $credential -Force Get-VM | Select-Object Name | Sort-Object Name Disconnect-VIServer -Server * -Confirm:$false Sample Script to Connect to a VCF Operations Appliance Using Variables from a YAML File:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Ensure required modules are installed before proceeding $requiredModules = @(\u0026#34;powershell-yaml\u0026#34;, \u0026#34;VMware.PowerCLI\u0026#34;) foreach ($module in $requiredModules) { if (-not (Get-Module -ListAvailable -Name $module)) { Write-Host \u0026#34;$module is not installed. Install it using \u0026#39;Install-Module $module\u0026#39;.\u0026#34; -ForegroundColor Red exit } } # Define YAML configuration file path $cfgFile = \u0026#34;/Users/dalehassinger/Documents/GitHub/PS-TAM-Lab/Home-Lab-Config.yaml\u0026#34; # Read YAML configuration into PowerShell object $cfg = Get-Content -Path $cfgFile -Raw | ConvertFrom-Yaml # Extract Aria Operations (OPS) credentials from the YAML file $opsURL = $cfg.OPS.opsURL $opsUsername = $cfg.OPS.opsUsername $authSource = $cfg.OPS.authSource $opsPassword = $cfg.OPS.opsPassword # ----- Obtain Aria Operations authentication token ----- $authUri = \u0026#34;$opsURL/suite-api/api/auth/token/acquire?_no_links=true\u0026#34; # Construct the request body as a hashtable $bodyHashtable = @{ username = $opsUsername authSource = $authSource password = $opsPassword } # Convert the hashtable to JSON format $body = $bodyHashtable | ConvertTo-Json # Execute REST API call to retrieve the authentication token $tokenResponse = Invoke-RestMethod -Uri $authUri -Method Post -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;Content-Type\u0026#34; = \u0026#34;application/json\u0026#34; } -Body $body -SkipCertificateCheck # Extract the token from the API response $authorization = \u0026#34;OpsToken \u0026#34; + $tokenResponse.token # ----- Retrieve the VM Operations identifier ----- $resourceUri = \u0026#34;$opsURL/suite-api/api/resources?resourceKind=HostSystem\u0026amp;page=0\u0026amp;pageSize=1000\u0026amp;_no_links=true\u0026#34; # Execute REST API call to fetch ESXi host system resources $resourceResponse = Invoke-RestMethod -Uri $resourceUri -Method Get -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;Authorization\u0026#34; = $authorization } -SkipCertificateCheck # Extract resource list and convert to JSON for better readability $identifierList = $resourceResponse.resourceList | ConvertTo-Json -Depth 10 # Convert the JSON string back to a PowerShell object $data = $identifierList | ConvertFrom-Json # Display the names of all retrieved ESXi hosts $data.resourceKey.name Lessons Learned: I enjoy bringing consistency to my scripts by leveraging a YAML file, similar to the approach used in automation platforms I work with. All the scripts in this blog were created and tested on a Mac using PowerShell. Don’t dismiss PowerShell just because it was created by Microsoft. Embrace it to enhance your automation journey! Integrating PowerShell with YAML has been something I’ve wanted to explore for a while. I’m glad I took the time to develop the necessary code and share it with the vCommunity. I created a Google NotebookLM Podcast based on the content of this blog. While it may not be entirely accurate, is any podcast ever 100% perfect, even when real people are speaking? Take a moment to listen and share your thoughts with me!\nvCROCS Deep Dive Podcast | PowerCLI and YAML\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog helpful, consider buying me a coffee to kickstart my day.\n","date":"2025-03-08T00:00:00Z","image":"https://vcrocs.info/powercli-and-yaml/featured-image_hu_86853ef54d2bfc62.png","permalink":"https://vcrocs.info/powercli-and-yaml/","title":"PowerCLI and YAML"},{"content":"Home Lab Automation!\nThe real power of innovation comes not from the tools we use, but from the mindset we bring. Think outside the box, and any type of computer can become the key to endless possibilities.\nLet\u0026rsquo;s get Started: Ready to dive into automation? Excellent choice!\nPlanning to automate on a Mac, Linux, or Windows? Fantastic!\nI love that VMware PowerCLI is built as a PowerShell module, making automation seamless across Mac, Linux, and Windows. Since VMware is my primary focus for automation, PowerShell is my go-to tool—thanks to PowerCLI. So far in my Automation journey, there hasn’t been a process I couldn’t automate with PowerShell.\nFor 2025, I’ve been invited to be a VMware Community {code} Coach! This year, my blogs will feature even more code examples to help others get started with automation, VMware solutions, and much more\u0026hellip;\nIn my home lab, I needed a quick and easy way to power on and off my VMs. Some VMs I want to shut down every evening and start up again each morning—not just to save electricity, but also to give my MS-01s a bit of a break. In this blog, I’ll share the scripts I created to automate this process.\nI have a VCF environment running in my lab on a nested ESXi host, (See my Blog to create an VCF in your lab with a script). My goal is to log into the ESXi host, gracefully shut down all VCF VMs, then log into vCenter to shut down the nested ESXi host. To ensure a clean shutdown, I’ve added logic to verify that all VMs are powered off before proceeding to the next steps. In this blog, I’ll share the code I use to automate this process.\n\u0026ndash;\nCode Examples: Script to Shutdown my VCF VMs:\nClick arrow to expand the PowerShell code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 ### # PowerShell Script for Shutting Down VMs # Author: Dale Hassinger # Description: This script shuts down specific VMs on an ESXi host and vCenter. # It also ensures proper logging and handles connections cleanly. ### # ------------ Configuration Section ------------ # ESXi connection parameters $ESXiHost = \u0026#34;192.168.4.179\u0026#34; $ESXiUser = \u0026#34;root\u0026#34; $ESXiPassword = \u0026#34;VMware1!\u0026#34; # vCenter connection parameters $vCenterServer = \u0026#34;192.168.6.100\u0026#34; $vCenterUser = \u0026#34;administrator@vcrocs.local\u0026#34; $vCenterPassword = \u0026#34;VMware1!\u0026#34; # Log file location $logFile = \u0026#34;/home/administrator/power-off.log\u0026#34; # VMs to shut down on ESXi $VMsToShutdown = @(\u0026#34;vcf-m01-sddcm01\u0026#34;, \u0026#34;vcf-m01-vc01\u0026#34;, \u0026#34;vcf-m01-nsx01a\u0026#34;) # VM to shut down on vCenter (Nested ESXi) $VMToShutdown = \u0026#34;VCF-DDC-ESX179\u0026#34; # ------------ Log Function ------------ # Function to write log messages with timestamps function Write-Log { param ( [string]$Message ) $LogDate = \u0026#34;[ \u0026#34; + (Get-Date).ToString(\u0026#34;MM-dd-yyyy HH:mm:ss\u0026#34;) + \u0026#34; ] - \u0026#34; $Output = $LogDate + $Message Write-Host $Output Add-Content -Path $logFile -Value $Output } # ------------ Log File Setup ------------ # Remove existing log file if it exists if (Test-Path $logFile) { Remove-Item -Path $logFile -Force } # Create a new empty log file New-Item -Path $logFile -ItemType File -Force | Out-Null # ------------ Connect to vCenter ------------ Write-Log \u0026#34;Connecting to vCenter...\u0026#34; $vCenterConnection = Connect-VIServer -Server $vCenterServer -User $vCenterUser -Password $vCenterPassword -Force -Protocol https # Check if the nested ESXi host is running Write-Log \u0026#34;Checking if nested ESXi Host $VMToShutdown is running...\u0026#34; $vm = Get-VM -Name $VMToShutdown -ErrorAction SilentlyContinue if ($vm -and $vm.PowerState -eq \u0026#34;PoweredOn\u0026#34;) { Write-Log \u0026#34;Host is running. Connecting...\u0026#34; $vCenterConnection = Connect-VIServer -Server $ESXiHost -User $ESXiUser -Password $ESXiPassword -Force -Protocol https Write-Log \u0026#34;Connected to Host $ESXiHost.\u0026#34; } else { Write-Log \u0026#34;Host is not running. Exiting script.\u0026#34; Disconnect-VIServer -Server * -Confirm:$false exit } # ------------ Shutdown VMs on ESXi ------------ foreach ($vmName in $VMsToShutdown) { $vm = Get-VM -Name $vmName -ErrorAction SilentlyContinue if ($vm -and $vm.PowerState -eq \u0026#34;PoweredOn\u0026#34;) { Write-Log \u0026#34;Shutting down VM: $vmName\u0026#34; $shutdownVM = Shutdown-VMGuest -VM $vm -Confirm:$false # Wait for VM to fully shut down Write-Log \u0026#34;Waiting for VM $vmName to fully shut down...\u0026#34; do { Start-Sleep -Seconds 5 $vm = Get-VM -Name $vmName -ErrorAction SilentlyContinue } while ($vm -and $vm.PowerState -ne \u0026#34;PoweredOff\u0026#34;) Write-Log \u0026#34;VM $vmName is now fully shut down.\u0026#34; } else { Write-Log \u0026#34;VM $vmName is already powered off or not found.\u0026#34; } } # Disconnect from ESXi host Write-Log \u0026#34;Disconnecting from ESXi host...\u0026#34; Disconnect-VIServer -Server $ESXiHost -Confirm:$false Write-Log \u0026#34;Disconnected from ESXi host.\u0026#34; # ------------ Shutdown Nested Host on vCenter ------------ Write-Log \u0026#34;Shutting down VM: $VMToShutdown on vCenter\u0026#34; $vm = Get-VM -Name $VMToShutdown -ErrorAction SilentlyContinue if ($vm -and $vm.PowerState -eq \u0026#34;PoweredOn\u0026#34;) { $shutdownVM = Shutdown-VMGuest -VM $vm -Confirm:$false # Wait for VM to fully shut down Write-Log \u0026#34;Waiting for VM $VMToShutdown to fully shut down...\u0026#34; do { Start-Sleep -Seconds 5 $vm = Get-VM -Name $VMToShutdown -ErrorAction SilentlyContinue } while ($vm -and $vm.PowerState -ne \u0026#34;PoweredOff\u0026#34;) Write-Log \u0026#34;VM $VMToShutdown is now fully shut down.\u0026#34; } else { Write-Log \u0026#34;VM $VMToShutdown is already powered off or not found.\u0026#34; } # ------------ Cleanup and Disconnect -------------------- Write-Log \u0026#34;Disconnecting from vCenter...\u0026#34; Disconnect-VIServer -Server * -Confirm:$false Write-Log \u0026#34;Disconnected from vCenter.\u0026#34; Write-Log \u0026#34;Script execution completed.\u0026#34; Script to PowerOn my VCF VMs:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 ### # PowerShell Script for Powering On VMs # Author: Dale Hassinger # Description: This script starts specific VMs on an ESXi host and vCenter. # It also ensures proper logging and handles connections cleanly. ### # ------------ Configuration Section ------------ # vCenter connection parameters $vCenterServer = \u0026#34;192.168.6.100\u0026#34; $vCenterUser = \u0026#34;administrator@vcrocs.local\u0026#34; $vCenterPassword = \u0026#34;VMware1!\u0026#34; # ESXi connection parameters $ESXiHost = \u0026#34;192.168.4.179\u0026#34; $ESXiUser = \u0026#34;root\u0026#34; $ESXiPassword = \u0026#34;VMware1!\u0026#34; # Log file location $logFile = \u0026#34;/home/administrator/power-on.log\u0026#34; # VMs to start on ESXi $VMsToStart = @(\u0026#34;vcf-m01-sddcm01\u0026#34;, \u0026#34;vcf-m01-vc01\u0026#34;, \u0026#34;vcf-m01-nsx01a\u0026#34;) # VM to start on vCenter $VMToStart = \u0026#34;VCF-DDC-ESX179\u0026#34; # ------------ Log Function ------------ # Function to write log messages with timestamps function Write-Log { param ( [string]$Message ) $LogDate = \u0026#34;[ \u0026#34; + (Get-Date).ToString(\u0026#34;MM-dd-yyyy HH:mm:ss\u0026#34;) + \u0026#34; ] - \u0026#34; $Output = $LogDate + $Message Write-Host $Output Add-Content -Path $logFile -Value $Output } # ------------ Log File Setup ------------ # Remove existing log file if it exists if (Test-Path $logFile) { Remove-Item -Path $logFile -Force } # Create a new empty log file New-Item -Path $logFile -ItemType File -Force | Out-Null # ------------ Connect to vCenter ------------ Write-Log \u0026#34;Connecting to vCenter...\u0026#34; $vcenterConnection = Connect-VIServer -Server $vCenterServer -User $vCenterUser -Password $vCenterPassword -Force -Protocol https # Check if VM is powered off before starting $vm = Get-VM -Name $VMToStart -ErrorAction SilentlyContinue if ($vm -and $vm.PowerState -ne \u0026#34;PoweredOn\u0026#34;) { Write-Log \u0026#34;Starting VM: $VMToStart\u0026#34; $startVM = Start-VM -VM $VMToStart -Confirm:$false # Wait for VM to be fully powered on Write-Log \u0026#34;Waiting for VM to fully power on...\u0026#34; do { Start-Sleep -Seconds 5 $vm = Get-VM -Name $VMToStart -ErrorAction SilentlyContinue } while ($vm -and $vm.PowerState -ne \u0026#34;PoweredOn\u0026#34;) Write-Log \u0026#34;VM $VMToStart is now fully powered on.\u0026#34; } else { Write-Log \u0026#34;VM $VMToStart is already powered on or not found.\u0026#34; } # Disconnect from vCenter Write-Log \u0026#34;Disconnecting from vCenter...\u0026#34; Disconnect-VIServer -Server * -Confirm:$false Write-Log \u0026#34;Disconnected from vCenter.\u0026#34; # Wait for Nested ESXi host to start Write-Log \u0026#34;Waiting 2 minutes for Nested host to start...\u0026#34; Start-Sleep -Seconds 120 # ------------ Connect to ESXi Host ------------ Write-Log \u0026#34;Connecting to ESXi host $ESXiHost...\u0026#34; $vcenterConnection = Connect-VIServer -Server $ESXiHost -User $ESXiUser -Password $ESXiPassword -Force -Protocol https Write-Log \u0026#34;Connected to ESXi host $ESXiHost.\u0026#34; # Start the VMs one at a time and wait until each is running before proceeding foreach ($vmName in $VMsToStart) { $vm = Get-VM -Name $vmName -ErrorAction SilentlyContinue if ($vm -and $vm.PowerState -ne \u0026#34;PoweredOn\u0026#34;) { Write-Log \u0026#34;Starting VM: $vmName\u0026#34; $startVM = Start-VM -VM $vmName -Confirm:$false # Wait for VM to be fully powered on Write-Log \u0026#34;Waiting for VM $vmName to fully power on...\u0026#34; do { Start-Sleep -Seconds 5 $vm = Get-VM -Name $vmName -ErrorAction SilentlyContinue } while ($vm -and $vm.PowerState -ne \u0026#34;PoweredOn\u0026#34;) Write-Log \u0026#34;VM $vmName is now fully powered on.\u0026#34; } else { Write-Log \u0026#34;VM $vmName is already powered on or not found.\u0026#34; } } # ------------ Cleanup and Disconnect ------------ Write-Log \u0026#34;Disconnecting from ESXi host...\u0026#34; Disconnect-VIServer -Server $ESXiHost -Confirm:$false Write-Log \u0026#34;Disconnected from ESXi host.\u0026#34; Write-Log \u0026#34;Script execution completed.\u0026#34; Screenshots: A screenshot of the nested ESXi host within vCenter to illustrate what the script will power on and off:\nA screenshot of the nested ESXi host VCF VMs to illustrate what the script will power on and off:\nTo automate tasks in my lab, I use a Rocky Linux VM with PowerShell installed. I’ve set up cron jobs to execute my PowerShell scripts on a schedule. Here are some details on how I configured these cron jobs to streamline automation.\nA great resource for setting up cron jobs properly? ChatGPT! It’s a handy tool for troubleshooting and getting the syntax just right.\nProper format to run PowerShell Scripts with a cron job.\nClick arrow to expand the cron job code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Power On VCF Lab @ 5:00 am everyday 0 5 * * * /usr/bin/pwsh /home/administrator/power-on.ps1 \u0026gt;\u0026gt; /home/administrator/power-on.log 2\u0026gt;\u0026amp;1 # Power Off VCF Lab @ 11:59 pm everyday 59 11 * * * /usr/bin/pwsh /home/administrator/power-off.ps1 \u0026gt;\u0026gt; /home/administrator/power-off.log 2\u0026gt;\u0026amp;1 # cron format for day/time * * * * * command_to_run │ │ │ │ │ │ │ │ │ └── Day of the week (0-7, Sunday = 0 or 7) │ │ │ └──── Month (1-12) │ │ └────── Day of the month (1-31) │ └──────── Hour (0-23) └────────── Minute (0-59) Click arrow to expand the cron commands:\n1 2 3 4 5 6 7 8 9 # edit cron jobs crontab -e # List cron jobs crontab -l # restart cron service sudo systemctl restart crond Examples of Cron Expressions Cron Expression Meaning 0 0 * * * Runs at midnight every day 0 12 * * 1-5 Runs at noon (12:00 PM) Monday to Friday */15 * * * * Runs every 15 minutes 30 9 1 * * Runs at 9:30 AM on the 1st day of every month 0 18 * * 5 Runs at 6:00 PM every Friday 0 3 * * 1,3,5 Runs at 3:00 AM on Monday, Wednesday, and Friday Lessons learned: Automating VM power on and off helps ensure consistency in your workflows. All the scripts in this blog were created and tested on a Mac using PowerShell. In the lab, the scripts are scheduled and executed on a Rocky Linux VM with PowerShell installed. Don’t dismiss PowerShell just because it was created by Microsoft. Embrace it to enhance your automation journey! I created a Google NotebookLM Podcast based on the content of this blog. While it may not be entirely accurate, is any podcast ever 100% perfect, even when real people are speaking? Take a moment to listen and share your thoughts with me!\nvCROCS Deep Dive Podcast | PowerCLI on Mac, Linux and Windows\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2025-02-21T00:00:00Z","image":"https://vcrocs.info/powercli-on-mac-linux-and-windows/featured-image_hu_a8347f09cdadb8ef.png","permalink":"https://vcrocs.info/powercli-on-mac-linux-and-windows/","title":"PowerCLI on Mac, Linux, and Windows"},{"content":"How to use Input Arrays with ABX Actions.\nDon’t automate for the sake of automation—automate to simplify, accelerate, and improve.\nNote: VCF Automation 8.18.1 was used to create this Blog\nI recently received a question about leveraging an Array Input from a VCF Automation Template and processing the array data within an ABX Action. Below, you\u0026rsquo;ll find example code and screenshots demonstrating the approach. If you\u0026rsquo;re working with array inputs in your automation workflows, this guide should be helpful!\nScreenshots demonstrating the use of VCF Automation Input Arrays:\nExample manual Deployment that has an Array Input Example Custom Form using an Array Input Screen Shot of the YAML Code for Input Array:\nDefine the input type as array Use the array input in the \u0026ldquo;Cloud.vSphere.Machine\u0026rdquo; - \u0026ldquo;properties:\u0026rdquo; section All properties values will get passed in the ABX Action Screen Shot of the Inputs:\nIf you haven\u0026rsquo;t worked with YAML array inputs before, use the Inputs screens in VCF Automation to assist in formatting the YAML correctly. This will ensure the data is structured properly before being passed to the ABX Action. Screen Shot of the Array Creation with Inputs:\nExample screen of creating an Array Screen Shot of the Subscription to execute an ABX Action during an VM Build:\nIn this example I am running an ABX Action during Pre Allocation of a new VM Build Screen Shot of the Array Creation with Inputs:\nHere\u0026rsquo;s an example of PowerShell code that takes a YAML array string passed to an ABX Action, cleans it up, and converts it into a PowerShell array This is the most critical step in this blog post. Take the time to understand how the YAML string is transformed into a PowerShell array, as this enables you to leverage the array values for any automation tasks needed in your server build process. The PowerShell code processes the YAML string by replacing unnecessary characters, ensuring proper formatting, and then splitting the string on commas to create a PowerShell array. This transformation allows the data to be easily iterated and used within the ABX Action. Screen Shot of the YAML Array Values:\nThis example demonstrates how the YAML array format is passed to the ABX Action as a string. Understanding this format is essential for parsing and utilizing the array data effectively within your automation logic. Screen Shot of the PowerShell Array Code Ouput:\nExample screen of PowerShell code output Screen Shot of ABX successful run:\nShows that the ABX Action was successfully run. VCF Automation Design Template Example Template Yaml Code:\nCode from the screen shots above. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 formatVersion: 2 name: Rocky-Basic outputs: __deploymentOverview: value: | **The following vSphere Virtual Machine has been provisioned with VMware VCF Automation.** **Original Build Specs Used:** IP: ${input.IP} Memory(MB): ${input.totalMemoryMB} CPU (Count): ${input.cpuCount} Core (Count): ${input.coreCount} **Connect to Server using Cockpit:** http://${input.IP}:9090 **Check out these Blogs for Updates/Tips/Tricks on the VMware VCF Operations/Automation Products:** **Brock Peterson:** https://www.BrockPeterson.com **Dale Hassinger:** https://www.vCROCS.info **Cosmin Trif:** https://www.cosmin.gq **Link to vCROCS VCF Operations:** https://vao.vcrocs.local **Link to vCROCS VCF Operations for Logs:** https://vaol.vcrocs.local #cloud-config inputs: CustomizationSpec: type: string description: Customization Specification default: LINUX title: CustomizationSpec VMName: type: string title: VM Name minLength: 1 maxLength: 15 default: Rocky-Array-202 IP: type: string default: 192.168.5.202 totalMemoryMB: type: integer title: Memory(MB) default: 1024 cpuCount: type: integer title: CPU (count) default: 1 coreCount: type: integer title: Core (count) default: 1 folderName: type: string title: vCenter Folder default: Rocky-Linux enum: - Rocky-Linux - ESXi-01-VMs - ESXi-02-VMs VolumeGB: type: string title: \u0026#39;Volume Size GB:\u0026#39; default: \u0026#39;20\u0026#39; vmAdminUsers: type: array items: type: string title: \u0026#39;Admin Users:\u0026#39; minItems: 1 maxItems: 4 default: - dale.hassinger description: VM Admin Users resources: Network_VMs: type: Cloud.vSphere.Network properties: name: PG-VMs networkType: existing constraints: - tag: Network:VM vCenter_Rocky: type: Cloud.vSphere.Machine properties: image: ROCKY9 #flavor: SM totalMemoryMB: ${input.totalMemoryMB} cpuCount: ${input.cpuCount} coreCount: ${input.coreCount} name: ${input.VMName} fqdn: ${input.VMName}.vcrocs.local folderName: Rocky-Linux vmAdminUsers: ${input.vmAdminUsers} storage: bootDiskCapacityInGB: ${input.VolumeGB} remoteAccess: authentication: usernamePassword username: root password: ${secret.administrator} customizationSpec: ${input.CustomizationSpec} constraints: - tag: VPZ:VM networks: - network: ${resource.Network_VMs.id} assignment: static address: ${input.IP} VCF Automation Design Template Example ABX Action Code:\nCode from the screen shots above. My example code simply outputs the values to demonstrate how to create the array and validate that the code works. Once you have this structure in place, you can extend the foreach section to automate any tasks you need. Click arrow to expand the ABX Action PowerShell code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 function handler($context, $inputs) { if(!$inputs.customProperties.vmAdminUsers){ $vmAdminUsers = \u0026#34;NA\u0026#34; }else{ $vmAdminUsers = $inputs.customProperties.vmAdminUsers } Write-Host \u0026#34;STR vmAdminUsers:\u0026#34; $vmAdminUsers # Input string #$vmAdminUsers = \u0026#39;[\\\u0026#34;dale.hassinger\\\u0026#34;,\\\u0026#34;brock\\\u0026#34;,\\\u0026#34;chris\\\u0026#34;]\u0026#39; # Convert the string into an array $Array = $vmAdminUsers -replace \u0026#39;[\\[\\\\\\\u0026#34;\\]]\u0026#39;, \u0026#39;\u0026#39; -split \u0026#39;,\u0026#39; # Output the array # Iterate through each item in the array and display its value foreach ($Item in $Array) { Write-Host \u0026#34;Username: $Item\u0026#34; } Write-Host \u0026#34;Array:\u0026#34; $Array Write-Host \u0026#34;Array Count:\u0026#34;$Array.Count return $inputs } Lessons learned: Using Array Inputs are a great way to use multiple values for processes needed to build new VMs. After you take the YAML array string and turn it into a PowerShell array, you can use the values to automate anything you can script. I created a Google NotebookLM Podcast based on the content of this blog. While it may not be entirely accurate, is any podcast ever 100% perfect, even when real people are speaking? Take a moment to listen and share your thoughts with me!\nvCROCS Deep Dive Podcast | VCF Automation | Input Arrays\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2025-01-31T00:00:00Z","image":"https://vcrocs.info/vcf-automation-input-arrays/featured-image_hu_1df6a588a6d98b17.png","permalink":"https://vcrocs.info/vcf-automation-input-arrays/","title":"VCF Automation | Input Arrays"},{"content":"How to script a VCF SDDC Manager install on a single Nested ESXi Host!\nYou have to work hard to get your thinking clean to make it simple. But it\u0026rsquo;s worth it in the end because once you get there, you can move mountains. - Steve Jobs\nProduct Versions used for this Blog:\nVMware Cloud Foundation: 5.2.1 PowerCLI: 13.3 PowerShell: 7.4.6 Use Case for Creating this Blog Goals: Leverage my existing Home Lab Hardware to start using and learning about VMware Cloud Foundation (VCF). Enable quick creation or re-creation of a VCF environment. Run VCF on a single Minisforum MS-01 using nested ESXi. For this use case, a vCenter is already set up and running with multiple physical ESXi hosts. Utilize Tiered Memory with the MS-01 to support more VMs and explore how Tiered Memory works. Run the Cloud Builder steps manually to gain hands-on experience, using a JSON file generated by the script for deployment. Install VCF 5.2.1 with the script, then manually upgrade to VCF 5.2.1.1 to learn how SDDC Manager performs upgrades. Manually create Workload Domains to better understand the deployment process and deepen learning. Add the line bringup.mgmt.cluster.minimum.size=1 to the file /etc/vmware/vcf/bringup/application.properties to enable VCF SDDC Manager to run on a single nested ESXi host. Ensure performance is sufficient for learning purposes, without requiring production-level speed. Initial Considerations: I explored VMware Holodeck as an option, but the resource requirements were too high for my setup.\nInspiration and Approach: I came across William Lam\u0026rsquo;s Blog about running VCF on a single NUC and decided to adapt that idea for my lab. William also provides a PowerShell script that automates the entire VCF installation in a single run. William\u0026rsquo;s script does require more than one ESXi Host.\nOutcome: After evaluating the available options, I decided to modify some of the example PowerShell scripts and processes to deploy and manage VCF in my Home Lab.\nThis blog serves as a guide to automate VMware Cloud Foundation (VCF) deployment in a home lab environment. It is also designed as a learning resource for VCF, which is why some steps are performed manually.\nBy combining automation with hands-on tasks, the goal is to help you understand VCF deployment processes while enabling you to streamline repetitive tasks for future setups.\nWhether you\u0026rsquo;re exploring VCF for the first time or looking to optimize your home lab, this approach provides flexibility to learn, experiment, and refine your deployment strategies.\nThis blog post shares the scripts and the steps I followed to make it all work.\nHome Lab Hardware Primary Systems:\n(2) Minisforum MS-01 96 GB memory Intel Core i9-13900H (14 cores: 6 Performance + 8 Efficient) I use all cores and specify which cores to use per VM with Scheduling Affinity rules. VMs like VCF Automation and Operations, I use the performance cores. VMs with light use, I specify the Efficient Cores. Storage Configuration: 1 TB NVMe for Tiered Memory @ 400% (SAMSUNG 990 PRO SSD NVMe) To specify the amount of tiered memory you want to use, you need to set a percentage. This percentage determines how much tiered memory is allocated relative to the physical memory. For example, in my lab, I have 96 GB of physical memory. Using a 400% tiered memory configuration:\n￼ - (96 GB * 400%) + 96 GB physical = 480 GB Total Memory. 4 TB NVMe for Storage (SAMSUNG 990 PRO SSD NVMe) 1 NVMe slot open for future expansion (1) MS-01 runs everything in my lab but the VCF environment (1) MS-01 is dedicated for this VCF environment. All VMs that it takes for a VCF environment Additional Systems:\n(2) Apple Mac Minis (Intel-based) Running Fusion and Nested ESXi 64 GB memory each Processors: 1 with Intel i3 1 with Intel i5 Thoughts on the Minisforum MS-01:\nI’m extremely satisfied with the Minisforum MS-01. If I expand my lab, I plan to add more MS-01 units. The MS-01 includes (2) SFP ports, and I’m considering adding 10 GbE networking to support future lab improvements. The MS-01 CPU fan will run continuously due to the high number of VMs running. PowerShell Scripts: Script Overview - Step 1\nPurpose: This script automates the creation of the Nested ESXi Host required by VCF Cloud Builder to deploy and configure the VCF environment.\nSteps Performed:\nCreate the Nested ESXi Host – Prepares the environment for VCF Cloud Builder to handle the installation and deployment process. This script is designed to install nested ESXi hosts and can be reused for various use cases. By keeping this step as a separate script, it allows flexibility for future deployments beyond this specific lab setup. Update this script with names and IP addresses that match your lab environment. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 # Script to add Nested ESXi Host # Author: Dale Hassinger # Based on Script by: William Lam and other vCommunity Web Sites # vCenter Server used to deploy VMware Cloud Foundation Lab $VIServer = \u0026#34;192.168.6.100\u0026#34; $VIUsername = \u0026#34;administrator@vcrocs.local\u0026#34; $VIPassword = \u0026#34;VMware1!\u0026#34; # Full Path to the Nested ESXi $NestedESXiApplianceOVA = \u0026#34;/Users/dalehassinger/Downloads/Nested_ESXi8.0u3c_Appliance_Template_v1.ova\u0026#34; # Nested ESXi VMs for Management Domain $NestedESXiHostnameToIPsForManagementDomain = @{ \u0026#34;VCF-DDC-ESX179\u0026#34; = \u0026#34;192.168.4.179\u0026#34; } # End Nested Names # Nested ESXi VM Resources for Management Domain $NestedESXiMGMTvCPU = \u0026#34;12\u0026#34; $NestedESXiMGMTvMEM = \u0026#34;88\u0026#34; #GB $NestedESXiMGMTCachingvDisk = \u0026#34;4\u0026#34; #GB $NestedESXiMGMTCapacityvDisk = \u0026#34;500\u0026#34; #GB $NestedESXiMGMTBootDisk = \u0026#34;32\u0026#34; #GB # General Deployment Configuration for Nested ESXi # These Values are for existing existing vCenter Install #$VMDatacenter = \u0026#34;Datacenter-DB-01\u0026#34; $VMCluster = \u0026#34;VCF_LAB\u0026#34; $VMNetwork = \u0026#34;VMs\u0026#34; $VMDatastore = \u0026#34;ESX-04-2TB\u0026#34; $VMNetmask = \u0026#34;255.255.252.0\u0026#34; $VMGateway = \u0026#34;192.168.4.1\u0026#34; $VMDNS = \u0026#34;192.168.6.1\u0026#34; $VMNTP = \u0026#34;time.google.com\u0026#34; $VMPassword = \u0026#34;VMware1!\u0026#34; $VMDomain = \u0026#34;vcrocs.local\u0026#34; $VMSyslog = \u0026#34;192.168.6.94\u0026#34; #$VMFolder = \u0026#34;VCF-VMs\u0026#34; #### DO NOT EDIT BEYOND HERE #### # 1 = yes # 0 - no $confirmDeployment = 1 $deployNestedESXiVMsForMgmt = 1 $StartTimeLogFile = Get-Date -Format \u0026#34;yyyyMMddHHmm\u0026#34; #$StartTimeLogFile $verboseLogFile = \u0026#34;vcf-lab-deployment-$StartTimeLogFile.log\u0026#34; #$verboseLogFile $StartTime = Get-Date Function New-LogEvent { param( [Parameter(Mandatory=$true)][String]$message, [Parameter(Mandatory=$false)][String]$color=\u0026#34;green\u0026#34; ) $timeStamp = Get-Date -Format \u0026#34;MM-dd-yyyy_hh:mm:ss\u0026#34; Write-Host -NoNewline -ForegroundColor White \u0026#34;[$timestamp]\u0026#34; Write-Host -ForegroundColor $color \u0026#34; $message\u0026#34; $logMessage = \u0026#34;[$timeStamp] $message\u0026#34; $logMessage | Out-File -Append -LiteralPath $verboseLogFile } # End Function if($confirmDeployment -eq 1) { Write-Host -ForegroundColor Magenta \u0026#34;`nNested ESXi Build Details:`n\u0026#34; Write-Host -ForegroundColor Yellow \u0026#34;`n---- vCenter Server used to Build Nested ESXi Hosts ----\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;vCenter Server Address: \u0026#34; Write-Host -ForegroundColor White $VIServer Write-Host -NoNewline \u0026#34;`n\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;VM Network: \u0026#34; Write-Host -ForegroundColor White $VMNetwork Write-Host -NoNewline -ForegroundColor Green \u0026#34;VM Storage: \u0026#34; Write-Host -ForegroundColor White $VMDatastore Write-Host -NoNewline -ForegroundColor Green \u0026#34;VM Cluster: \u0026#34; Write-Host -ForegroundColor White $VMCluster if($deployNestedESXiVMsForMgmt -eq 1) { Write-Host -ForegroundColor Yellow \u0026#34;`n\u0026#34; Write-Host -ForegroundColor Yellow \u0026#34;`---- vESXi Configuration for VCF Management Domain ----\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;# of Nested ESXi VMs: \u0026#34; Write-Host -ForegroundColor White $NestedESXiHostnameToIPsForManagementDomain.count Write-Host -NoNewline -ForegroundColor Green \u0026#34;-------IP Address(s): \u0026#34; Write-Host -ForegroundColor White $NestedESXiHostnameToIPsForManagementDomain.Values Write-Host -NoNewline -ForegroundColor Green \u0026#34;----------------vCPU: \u0026#34; Write-Host -ForegroundColor White $NestedESXiMGMTvCPU Write-Host -NoNewline -ForegroundColor Green \u0026#34;----------------vMEM: \u0026#34; Write-Host -ForegroundColor White \u0026#34;$NestedESXiMGMTvMEM GB\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;--------Caching VMDK: \u0026#34; Write-Host -ForegroundColor White \u0026#34;$NestedESXiMGMTCachingvDisk GB\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;-------Capacity VMDK: \u0026#34; Write-Host -ForegroundColor White \u0026#34;$NestedESXiMGMTCapacityvDisk GB\u0026#34; } # End If Write-Host -NoNewline \u0026#34;`n\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;Netmask: \u0026#34; Write-Host -ForegroundColor White $VMNetmask Write-Host -NoNewline -ForegroundColor Green \u0026#34;Gateway: \u0026#34; Write-Host -ForegroundColor White $VMGateway Write-Host -NoNewline -ForegroundColor Green \u0026#34;----DNS: \u0026#34; Write-Host -ForegroundColor White $VMDNS Write-Host -NoNewline -ForegroundColor Green \u0026#34;----NTP: \u0026#34; Write-Host -ForegroundColor White $VMNTP Write-Host -NoNewline -ForegroundColor Green \u0026#34;-Syslog: \u0026#34; Write-Host -ForegroundColor White $VMSyslog Write-Host -NoNewline \u0026#34;`n\u0026#34; } # End If # Connect to vCenter if($deployNestedESXiVMsForMgmt -eq 1 -or $deployNestedESXiVMsForWLD -eq 1 -or $deployCloudBuilder -eq 1 -or $moveVMsIntovApp -eq 1) { New-LogEvent \u0026#34;Connecting to Management vCenter Server: $VIServer ...\u0026#34; $viConnection = Connect-VIServer $VIServer -User $VIUsername -Password $VIPassword -WarningAction SilentlyContinue -Protocol https -Force $datastore = Get-Datastore -Server $viConnection -Name $VMDatastore | Select-Object -First 1 $cluster = Get-Cluster -Server $viConnection -Name $VMCluster $vmhost = $cluster | Get-VMHost | Get-Random -Count 1 } # --- Start Nested ESXi MGT Hosts Build if($deployNestedESXiVMsForMgmt -eq 1) { $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { $VMName = $_.Key #Write-Host \u0026#34;VMname:\u0026#34;$VMName $VMIPAddress = $_.Value #Write-Host \u0026#34;IP:\u0026#34;$VMIPAddress $ovfconfig = Get-OvfConfiguration $NestedESXiApplianceOVA #$ovfconfig.Common.guestinfo $networkMapLabel = ($ovfconfig.ToHashTable().keys | where {$_ -Match \u0026#34;NetworkMapping\u0026#34;}).replace(\u0026#34;NetworkMapping.\u0026#34;,\u0026#34;\u0026#34;).replace(\u0026#34;-\u0026#34;,\u0026#34;_\u0026#34;).replace(\u0026#34; \u0026#34;,\u0026#34;_\u0026#34;) $ovfconfig.NetworkMapping.$networkMapLabel.value = $VMNetwork $ovfconfig.common.guestinfo.hostname.value = \u0026#34;${VMName}.${VMDomain}\u0026#34; $ovfconfig.common.guestinfo.ipaddress.value = $VMIPAddress $ovfconfig.common.guestinfo.netmask.value = $VMNetmask $ovfconfig.common.guestinfo.gateway.value = $VMGateway $ovfconfig.common.guestinfo.dns.value = $VMDNS $ovfconfig.common.guestinfo.domain.value = $VMDomain $ovfconfig.common.guestinfo.ntp.value = $VMNTP $ovfconfig.common.guestinfo.syslog.value = $VMSyslog $ovfconfig.common.guestinfo.password.value = $VMPassword $ovfconfig.common.guestinfo.ssh.value = $true New-LogEvent \u0026#34;Deploying Nested ESXi VM $VMName ...\u0026#34; $vm = Import-VApp -Source $NestedESXiApplianceOVA -OvfConfiguration $ovfconfig -Name $VMName -Location $VMCluster -VMHost $vmhost -Datastore $datastore -DiskStorageFormat thin -Force New-LogEvent \u0026#34;Adding vmnic2/vmnic3 to Nested ESXi VMs ...\u0026#34; $vmPortGroup = Get-VirtualNetwork -Name $VMNetwork -Location ($cluster | Get-Datacenter) if($vmPortGroup.NetworkType -eq \u0026#34;Distributed\u0026#34;) { $vmPortGroup = Get-VDPortgroup -Name $VMNetwork $vmPortGroup = $vmPortGroup[0] New-NetworkAdapter -VM $vm -Type Vmxnet3 -Portgroup $vmPortGroup.Name -StartConnected -confirm:$false | Out-File -Append -LiteralPath $verboseLogFile New-NetworkAdapter -VM $vm -Type Vmxnet3 -Portgroup $vmPortGroup.Name -StartConnected -confirm:$false | Out-File -Append -LiteralPath $verboseLogFile } else { New-NetworkAdapter -VM $vm -Type Vmxnet3 -NetworkName $vmPortGroup.Name -StartConnected -confirm:$false | Out-File -Append -LiteralPath $verboseLogFile New-NetworkAdapter -VM $vm -Type Vmxnet3 -NetworkName $vmPortGroup.Name -StartConnected -confirm:$false | Out-File -Append -LiteralPath $verboseLogFile } # End If $vm | New-AdvancedSetting -name \u0026#34;ethernet2.filter4.name\u0026#34; -value \u0026#34;dvfilter-maclearn\u0026#34; -confirm:$false -ErrorAction SilentlyContinue | Out-File -Append -LiteralPath $verboseLogFile $vm | New-AdvancedSetting -Name \u0026#34;ethernet2.filter4.onFailure\u0026#34; -value \u0026#34;failOpen\u0026#34; -confirm:$false -ErrorAction SilentlyContinue | Out-File -Append -LiteralPath $verboseLogFile $vm | New-AdvancedSetting -name \u0026#34;ethernet3.filter4.name\u0026#34; -value \u0026#34;dvfilter-maclearn\u0026#34; -confirm:$false -ErrorAction SilentlyContinue | Out-File -Append -LiteralPath $verboseLogFile $vm | New-AdvancedSetting -Name \u0026#34;ethernet3.filter4.onFailure\u0026#34; -value \u0026#34;failOpen\u0026#34; -confirm:$false -ErrorAction SilentlyContinue | Out-File -Append -LiteralPath $verboseLogFile New-LogEvent \u0026#34;Updating vCPU Count to $NestedESXiMGMTvCPU \u0026amp; vMEM to $NestedESXiMGMTvMEM GB ...\u0026#34; Set-VM -Server $viConnection -VM $vm -NumCpu $NestedESXiMGMTvCPU -CoresPerSocket $NestedESXiMGMTvCPU -MemoryGB $NestedESXiMGMTvMEM -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile New-LogEvent \u0026#34;Updating vSAN Cache VMDK size to $NestedESXiMGMTCachingvDisk GB \u0026amp; Capacity VMDK size to $NestedESXiMGMTCapacityvDisk GB ...\u0026#34; Get-HardDisk -Server $viConnection -VM $vm -Name \u0026#34;Hard disk 2\u0026#34; | Set-HardDisk -CapacityGB $NestedESXiMGMTCachingvDisk -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile Get-HardDisk -Server $viConnection -VM $vm -Name \u0026#34;Hard disk 3\u0026#34; | Set-HardDisk -CapacityGB $NestedESXiMGMTCapacityvDisk -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile New-LogEvent \u0026#34;Updating vSAN Boot Disk size to $NestedESXiMGMTBootDisk GB ...\u0026#34; Get-HardDisk -Server $viConnection -VM $vm -Name \u0026#34;Hard disk 1\u0026#34; | Set-HardDisk -CapacityGB $NestedESXiMGMTBootDisk -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile New-LogEvent \u0026#34;Powering On $vmname ...\u0026#34; $vm | Start-Vm -RunAsync | Out-Null } # End Foreach } # End If if($deployNestedESXiVMsForMgmt -eq 1 -or $deployNestedESXiVMsForWLD -eq 1 -or $deployCloudBuilder -eq 1) { New-LogEvent \u0026#34;Disconnecting from $VIServer ...\u0026#34; Disconnect-VIServer -Server $viConnection -Confirm:$false } $EndTime = Get-Date $duration = [math]::Round((New-TimeSpan -Start $StartTime -End $EndTime).TotalMinutes,2) New-LogEvent \u0026#34;VCF Lab Nested ESXi Host Build Complete!\u0026#34; New-LogEvent \u0026#34;StartTime: $StartTime\u0026#34; New-LogEvent \u0026#34;EndTime: $EndTime\u0026#34; New-LogEvent \u0026#34;Duration: $duration minutes to Deploy Nested ESXi Hosts\u0026#34; Script Overview - Step 2\nPurpose: This script automates the setup of VCF Cloud Builder and prepares the configuration required to deploy the VCF Management Domain.\nSteps Performed:\nCreates the Cloud Builder VM – Deploys the virtual machine needed to orchestrate the VCF installation. Generate the JSON Configuration File – Creates the input file required by Cloud Builder to install the VCF Management Domain. The step to create the JSON file is worth reviewing. It is the easiest method I have found to generate the JSON file required for VCF Cloud Builder. Update this script with names and IP addresses that match your lab environmentcript to create Cloud Builder VM and json file # Author: Dale Hassinger # Based on Script by: William Lam and some other examples I saw on vCommunity sites # vCenter Server used to deploy VMware Cloud Foundation Lab $VIServer = \u0026#34;192.168.6.100\u0026#34; $VIUsername = \u0026#34;administrator@vcrocs.local\u0026#34; $VIPassword = \u0026#34;VMware1!\u0026#34; # Full Path to Cloud Builder OVA #$CloudBuilderOVA = \u0026#34;/Users/dalehassinger/Downloads/VMware-Cloud-Builder-5.2.0.0-24108943_OVF10.ova\u0026#34; $CloudBuilderOVA = \u0026#34;/Users/dalehassinger/Downloads/VMware-Cloud-Builder-5.2.1.0-24307856_OVF10.ova\u0026#34; # VCF Licenses or leave blank for evaluation mode (requires VCF 5.1.1 or later) $VCSALicense = \u0026#34;\u0026#34; $ESXILicense = \u0026#34;\u0026#34; $VSANLicense = \u0026#34;\u0026#34; $NSXLicense = \u0026#34;\u0026#34; # VCF Configurations $VCFManagementDomainPoolName = \u0026#34;vcf-m01-rp01\u0026#34; $VCFManagementDomainJSONFile = \u0026#34;vcf-mgmt.json\u0026#34; # Cloud Builder Configurations $CloudbuilderVMHostname = \u0026#34;vcf-m01-cb01\u0026#34; $CloudbuilderFQDN = \u0026#34;vcf-m01-cb01.vcrocs.local\u0026#34; $CloudbuilderIP = \u0026#34;192.168.4.180\u0026#34; $CloudbuilderAdminUsername = \u0026#34;admin\u0026#34; $CloudbuilderAdminPassword = \u0026#34;VMw@re123!VMw@re123!\u0026#34; $CloudbuilderRootPassword = \u0026#34;VMw@re123!VMw@re123!\u0026#34; # SDDC Manager Configuration $SddcManagerHostname = \u0026#34;vcf-m01-sddcm01\u0026#34; $SddcManagerIP = \u0026#34;192.168.4.181\u0026#34; $SddcManagerVcfPassword = \u0026#34;VMware1!VMware1!\u0026#34; $SddcManagerRootPassword = \u0026#34;VMware1!VMware1!\u0026#34; $SddcManagerRestPassword = \u0026#34;VMware1!VMware1!\u0026#34; $SddcManagerLocalPassword = \u0026#34;VMware1!VMware1!\u0026#34; $NestedESXiHostnameToIPsForManagementDomain = @{ \u0026#34;VCF-DDC-ESX179\u0026#34; = \u0026#34;192.168.4.179\u0026#34; } # Nested ESXi VM Resources for Management Domain $NestedESXiMGMTvCPU = \u0026#34;12\u0026#34; $NestedESXiMGMTvMEM = \u0026#34;78\u0026#34; #GB $NestedESXiMGMTCachingvDisk = \u0026#34;4\u0026#34; #GB $NestedESXiMGMTCapacityvDisk = \u0026#34;500\u0026#34; #GB # Nested ESXi VM Resources for Workload Domain $NestedESXiWLDvCPU = \u0026#34;8\u0026#34; $NestedESXiWLDvMEM = \u0026#34;36\u0026#34; #GB $NestedESXiWLDCachingvDisk = \u0026#34;4\u0026#34; #GB $NestedESXiWLDCapacityvDisk = \u0026#34;200\u0026#34; #GB # ESXi Network Configuration $NestedESXiManagementNetworkCidr = \u0026#34;192.168.4.0/22\u0026#34; # should match $VMNetwork configuration $NestedESXivMotionNetworkCidr = \u0026#34;192.168.8.0/24\u0026#34; $NestedESXivSANNetworkCidr = \u0026#34;192.168.9.0/24\u0026#34; $NestedESXiNSXTepNetworkCidr = \u0026#34;192.168.10.0/24\u0026#34; # vCenter Configuration $VCSAName = \u0026#34;vcf-m01-vc01\u0026#34; $VCSAIP = \u0026#34;192.168.4.182\u0026#34; $VCSARootPassword = \u0026#34;VMware1!\u0026#34; $VCSASSOPassword = \u0026#34;VMware1!\u0026#34; $EnableVCLM = $true # NSX Configuration $NSXManagerSize = \u0026#34;medium\u0026#34; $NSXManagerVIPHostname = \u0026#34;vcf-m01-nsx01\u0026#34; $NSXManagerVIPIP = \u0026#34;192.168.4.183\u0026#34; $NSXManagerNode1Hostname = \u0026#34;vcf-m01-nsx01a\u0026#34; $NSXManagerNode1IP = \u0026#34;192.168.4.184\u0026#34; $NSXRootPassword = \u0026#34;VMware1!VMware1!\u0026#34; $NSXAdminPassword = \u0026#34;VMware1!VMware1!\u0026#34; $NSXAuditPassword = \u0026#34;VMware1!VMware1!\u0026#34; # General Deployment Configuration for Nested ESXi \u0026amp; Cloud Builder VM # This is information from you current vCenter lab environment $VMDatacenter = \u0026#34;Datacenter-DB-01\u0026#34; $VMCluster = \u0026#34;VCF_LAB\u0026#34; $VMNetwork = \u0026#34;VMs\u0026#34; $VMDatastore = \u0026#34;ESX-04-2TB\u0026#34; $VMNetmask = \u0026#34;255.255.252.0\u0026#34; $VMGateway = \u0026#34;192.168.4.1\u0026#34; $VMDNS = \u0026#34;192.168.6.1\u0026#34; $VMNTP = \u0026#34;time.google.com\u0026#34; $VMPassword = \u0026#34;VMware1!\u0026#34; $VMDomain = \u0026#34;vcrocs.local\u0026#34; $VMSyslog = \u0026#34;192.168.6.94\u0026#34; $VMFolder = \u0026#34;VCF-VMs\u0026#34; #### DO NOT EDIT BEYOND HERE #### $verboseLogFile = \u0026#34;vcf-lab-deployment.log\u0026#34; $random_string = -join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_}) $VAppName = \u0026#34;Nested-VCF-Lab-$random_string\u0026#34; $SeparateNSXSwitch = $false $VCFVersion = \u0026#34;\u0026#34; $preCheck = 1 $confirmDeployment = 1 $deployNestedESXiVMsForMgmt = 1 # WLD Setup $deployNestedESXiVMsForWLD = 0 $deployCloudBuilder = 1 $moveVMsIntovApp = 1 $generateMgmJson = 1 $StartTime = Get-Date Function New-LogEvent { param( [Parameter(Mandatory=$true)][String]$message, [Parameter(Mandatory=$false)][String]$color=\u0026#34;green\u0026#34; ) $timeStamp = Get-Date -Format \u0026#34;MM-dd-yyyy_hh:mm:ss\u0026#34; Write-Host -NoNewline -ForegroundColor White \u0026#34;[$timestamp]\u0026#34; Write-Host -ForegroundColor $color \u0026#34; $message\u0026#34; $logMessage = \u0026#34;[$timeStamp] $message\u0026#34; $logMessage | Out-File -Append -LiteralPath $verboseLogFile } # End Function if($preCheck -eq 1) { # Detect VCF version based on Cloud Builder OVA (support is 5.1.0+) if($CloudBuilderOVA -match \u0026#34;5.2.0\u0026#34; -or $CloudBuilderOVA -match \u0026#34;5.2.1\u0026#34;) { $VCFVersion = \u0026#34;5.2.0\u0026#34; } elseif($CloudBuilderOVA -match \u0026#34;5.1.1\u0026#34;) { $VCFVersion = \u0026#34;5.1.1\u0026#34; } elseif($CloudBuilderOVA -match \u0026#34;5.1.0\u0026#34;) { $VCFVersion = \u0026#34;5.1.0\u0026#34; } else { $VCFVersion = $null } if($VCFVersion -eq $null) { Write-Host -ForegroundColor Red \u0026#34;`nOnly VCF 5.1.0+ is currently supported ...`n\u0026#34; exit } if($VCFVersion -ge \u0026#34;5.2.0\u0026#34;) { write-host \u0026#34;here\u0026#34; if( $CloudbuilderAdminPassword.ToCharArray().count -lt 15 -or $CloudbuilderRootPassword.ToCharArray().count -lt 15) { Write-Host -ForegroundColor Red \u0026#34;`nCloud Builder passwords must be 15 characters or longer ...`n\u0026#34; exit } } if(!(Test-Path $NestedESXiApplianceOVA)) { Write-Host -ForegroundColor Red \u0026#34;`nUnable to find $NestedESXiApplianceOVA ...`n\u0026#34; exit } if(!(Test-Path $CloudBuilderOVA)) { Write-Host -ForegroundColor Red \u0026#34;`nUnable to find $CloudBuilderOVA ...`n\u0026#34; exit } if($PSVersionTable.PSEdition -ne \u0026#34;Core\u0026#34;) { Write-Host -ForegroundColor Red \u0026#34;`tPowerShell Core was not detected, please install that before continuing ... `n\u0026#34; exit } } if($confirmDeployment -eq 1) { Write-Host -ForegroundColor Magenta \u0026#34;`nPlease confirm the following configuration will be deployed:`n\u0026#34; Write-Host -ForegroundColor Yellow \u0026#34;---- VCF Automated Lab Deployment Configuration ---- \u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;VMware Cloud Foundation Version: \u0026#34; Write-Host -ForegroundColor White $VCFVersion Write-Host -NoNewline -ForegroundColor Green \u0026#34;Nested ESXi Image Path: \u0026#34; Write-Host -ForegroundColor White $NestedESXiApplianceOVA Write-Host -NoNewline -ForegroundColor Green \u0026#34;Cloud Builder Image Path: \u0026#34; Write-Host -ForegroundColor White $CloudBuilderOVA Write-Host -ForegroundColor Yellow \u0026#34;`n---- vCenter Server Deployment Target Configuration ----\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;vCenter Server Address: \u0026#34; Write-Host -ForegroundColor White $VIServer Write-Host -NoNewline -ForegroundColor Green \u0026#34;VM Network: \u0026#34; Write-Host -ForegroundColor White $VMNetwork Write-Host -NoNewline -ForegroundColor Green \u0026#34;VM Storage: \u0026#34; Write-Host -ForegroundColor White $VMDatastore Write-Host -NoNewline -ForegroundColor Green \u0026#34;VM Cluster: \u0026#34; Write-Host -ForegroundColor White $VMCluster Write-Host -NoNewline -ForegroundColor Green \u0026#34;VM vApp: \u0026#34; Write-Host -ForegroundColor White $VAppName Write-Host -ForegroundColor Yellow \u0026#34;`n---- Cloud Builder Configuration ----\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;Hostname: \u0026#34; Write-Host -ForegroundColor White $CloudbuilderVMHostname Write-Host -NoNewline -ForegroundColor Green \u0026#34;IP Address: \u0026#34; Write-Host -ForegroundColor White $CloudbuilderIP if($deployNestedESXiVMsForMgmt -eq 1) { Write-Host -ForegroundColor Yellow \u0026#34;`n---- vESXi Configuration for VCF Management Domain ----\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;# of Nested ESXi VMs: \u0026#34; Write-Host -ForegroundColor White $NestedESXiHostnameToIPsForManagementDomain.count Write-Host -NoNewline -ForegroundColor Green \u0026#34;IP Address(s): \u0026#34; Write-Host -ForegroundColor White $NestedESXiHostnameToIPsForManagementDomain.Values Write-Host -NoNewline -ForegroundColor Green \u0026#34;vCPU: \u0026#34; Write-Host -ForegroundColor White $NestedESXiMGMTvCPU Write-Host -NoNewline -ForegroundColor Green \u0026#34;vMEM: \u0026#34; Write-Host -ForegroundColor White \u0026#34;$NestedESXiMGMTvMEM GB\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;Caching VMDK: \u0026#34; Write-Host -ForegroundColor White \u0026#34;$NestedESXiMGMTCachingvDisk GB\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;Capacity VMDK: \u0026#34; Write-Host -ForegroundColor White \u0026#34;$NestedESXiMGMTCapacityvDisk GB\u0026#34; } # End If if($deployNestedESXiVMsForWLD -eq 1) { Write-Host -ForegroundColor Yellow \u0026#34;`n---- vESXi Configuration for VCF Workload Domain ----\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;# of Nested ESXi VMs: \u0026#34; Write-Host -ForegroundColor White $NestedESXiHostnameToIPsForWorkloadDomain.count Write-Host -NoNewline -ForegroundColor Green \u0026#34;IP Address(s): \u0026#34; Write-Host -ForegroundColor White $NestedESXiHostnameToIPsForWorkloadDomain.Values Write-Host -NoNewline -ForegroundColor Green \u0026#34;vCPU: \u0026#34; Write-Host -ForegroundColor White $NestedESXiWLDvCPU Write-Host -NoNewline -ForegroundColor Green \u0026#34;vMEM: \u0026#34; Write-Host -ForegroundColor White \u0026#34;$NestedESXiWLDvMEM GB\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;Caching VMDK: \u0026#34; Write-Host -ForegroundColor White \u0026#34;$NestedESXiWLDCachingvDisk GB\u0026#34; Write-Host -NoNewline -ForegroundColor Green \u0026#34;Capacity VMDK: \u0026#34; Write-Host -ForegroundColor White \u0026#34;$NestedESXiWLDCapacityvDisk GB\u0026#34; } # End If Write-Host -NoNewline -ForegroundColor Green \u0026#34;`nNetmask \u0026#34; Write-Host -ForegroundColor White $VMNetmask Write-Host -NoNewline -ForegroundColor Green \u0026#34;Gateway: \u0026#34; Write-Host -ForegroundColor White $VMGateway Write-Host -NoNewline -ForegroundColor Green \u0026#34;DNS: \u0026#34; Write-Host -ForegroundColor White $VMDNS Write-Host -NoNewline -ForegroundColor Green \u0026#34;NTP: \u0026#34; Write-Host -ForegroundColor White $VMNTP Write-Host -NoNewline -ForegroundColor Green \u0026#34;Syslog: \u0026#34; Write-Host -ForegroundColor White $VMSyslog } # End If if($deployNestedESXiVMsForMgmt -eq 1 -or $deployNestedESXiVMsForWLD -eq 1 -or $deployCloudBuilder -eq 1 -or $moveVMsIntovApp -eq 1) { New-LogEvent \u0026#34;Connecting to Management vCenter Server $VIServer ...\u0026#34; $viConnection = Connect-VIServer $VIServer -User $VIUsername -Password $VIPassword -WarningAction SilentlyContinue -Protocol https -Force $datastore = Get-Datastore -Server $viConnection -Name $VMDatastore | Select -First 1 $cluster = Get-Cluster -Server $viConnection -Name $VMCluster $vmhost = $cluster | Get-VMHost | Get-Random -Count 1 } # End if # Start Create Cloud Builder VM if($deployCloudBuilder -eq 1) { $ovfconfig = Get-OvfConfiguration $CloudBuilderOVA $networkMapLabel = ($ovfconfig.ToHashTable().keys | where {$_ -Match \u0026#34;NetworkMapping\u0026#34;}).replace(\u0026#34;NetworkMapping.\u0026#34;,\u0026#34;\u0026#34;).replace(\u0026#34;-\u0026#34;,\u0026#34;_\u0026#34;).replace(\u0026#34; \u0026#34;,\u0026#34;_\u0026#34;) $ovfconfig.NetworkMapping.$networkMapLabel.value = $VMNetwork $ovfconfig.common.guestinfo.hostname.value = $CloudbuilderFQDN $ovfconfig.common.guestinfo.ip0.value = $CloudbuilderIP $ovfconfig.common.guestinfo.netmask0.value = $VMNetmask $ovfconfig.common.guestinfo.gateway.value = $VMGateway $ovfconfig.common.guestinfo.DNS.value = $VMDNS $ovfconfig.common.guestinfo.domain.value = $VMDomain $ovfconfig.common.guestinfo.searchpath.value = $VMDomain $ovfconfig.common.guestinfo.ntp.value = $VMNTP $ovfconfig.common.guestinfo.ADMIN_USERNAME.value = $CloudbuilderAdminUsername $ovfconfig.common.guestinfo.ADMIN_PASSWORD.value = $CloudbuilderAdminPassword $ovfconfig.common.guestinfo.ROOT_PASSWORD.value = $CloudbuilderRootPassword New-LogEvent \u0026#34;Deploying Cloud Builder VM $CloudbuilderVMHostname ...\u0026#34; $vm = Import-VApp -Source $CloudBuilderOVA -OvfConfiguration $ovfconfig -Name $CloudbuilderVMHostname -Location $VMCluster -VMHost $vmhost -Datastore $datastore -DiskStorageFormat thin -Force New-LogEvent \u0026#34;Powering On $CloudbuilderVMHostname ...\u0026#34; $vm | Start-Vm -RunAsync | Out-Null } # Move VMs into vApp. Keeps all the VCF VMs together. if($moveVMsIntovApp -eq 1) { # Check whether DRS is enabled as that is required to create vApp if((Get-Cluster -Server $viConnection $cluster).DrsEnabled) { New-LogEvent \u0026#34;Creating vApp $VAppName ...\u0026#34; $rp = Get-ResourcePool -Name Resources -Location $cluster $VApp = New-VApp -Name $VAppName -Server $viConnection -Location $cluster if(-Not (Get-Folder $VMFolder -ErrorAction Ignore)) { New-LogEvent \u0026#34;Creating VM Folder $VMFolder ...\u0026#34; $folder = New-Folder -Name $VMFolder -Server $viConnection -Location (Get-Datacenter $VMDatacenter | Get-Folder vm) } if($deployNestedESXiVMsForMgmt -eq 1) { New-LogEvent \u0026#34;Moving Nested ESXi VMs into $VAppName vApp ...\u0026#34; $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { $vm = Get-VM -Name $_.Key -Server $viConnection -Location $cluster | where{$_.ResourcePool.Id -eq $rp.Id} Move-VM -VM $vm -Server $viConnection -Destination $VApp -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile } } if($deployNestedESXiVMsForWLD -eq 1) { New-LogEvent \u0026#34;Moving Nested ESXi VMs into $VAppName vApp ...\u0026#34; $NestedESXiHostnameToIPsForWorkloadDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { $vm = Get-VM -Name $_.Key -Server $viConnection -Location $cluster | where{$_.ResourcePool.Id -eq $rp.Id} Move-VM -VM $vm -Server $viConnection -Destination $VApp -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile } } if($deployCloudBuilder -eq 1) { $cloudBuilderVM = Get-VM -Name $CloudbuilderVMHostname -Server $viConnection -Location $cluster | where{$_.ResourcePool.Id -eq $rp.Id} New-LogEvent \u0026#34;Moving $CloudbuilderVMHostname into $VAppName vApp ...\u0026#34; Move-VM -VM $cloudBuilderVM -Server $viConnection -Destination $VApp -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile } New-LogEvent \u0026#34;Moving $VAppName to VM Folder $VMFolder ...\u0026#34; Move-VApp -Server $viConnection $VAppName -Destination (Get-Folder -Server $viConnection $VMFolder) | Out-File -Append -LiteralPath $verboseLogFile } else { New-LogEvent \u0026#34;vApp $VAppName will NOT be created as DRS is NOT enabled on vSphere Cluster ${cluster} ...\u0026#34; } } # Create Cloud Builder json file used to deploy VCF if($generateMgmJson -eq 1) { if($SeparateNSXSwitch) { $useNSX = \u0026#34;false\u0026#34; } else { $useNSX = \u0026#34;true\u0026#34; } $esxivMotionNetwork = $NestedESXivMotionNetworkCidr.split(\u0026#34;/\u0026#34;)[0] $esxivMotionNetworkOctects = $esxivMotionNetwork.split(\u0026#34;.\u0026#34;) $esxivMotionGateway = ($esxivMotionNetworkOctects[0..2] -join \u0026#39;.\u0026#39;) + \u0026#34;.1\u0026#34; $esxivMotionStart = ($esxivMotionNetworkOctects[0..2] -join \u0026#39;.\u0026#39;) + \u0026#34;.101\u0026#34; $esxivMotionEnd = ($esxivMotionNetworkOctects[0..2] -join \u0026#39;.\u0026#39;) + \u0026#34;.118\u0026#34; $esxivSANNetwork = $NestedESXivSANNetworkCidr.split(\u0026#34;/\u0026#34;)[0] $esxivSANNetworkOctects = $esxivSANNetwork.split(\u0026#34;.\u0026#34;) $esxivSANGateway = ($esxivSANNetworkOctects[0..2] -join \u0026#39;.\u0026#39;) + \u0026#34;.1\u0026#34; $esxivSANStart = ($esxivSANNetworkOctects[0..2] -join \u0026#39;.\u0026#39;) + \u0026#34;.101\u0026#34; $esxivSANEnd = ($esxivSANNetworkOctects[0..2] -join \u0026#39;.\u0026#39;) + \u0026#34;.118\u0026#34; $esxiNSXTepNetwork = $NestedESXiNSXTepNetworkCidr.split(\u0026#34;/\u0026#34;)[0] $esxiNSXTepNetworkOctects = $esxiNSXTepNetwork.split(\u0026#34;.\u0026#34;) $esxiNSXTepGateway = ($esxiNSXTepNetworkOctects[0..2] -join \u0026#39;.\u0026#39;) + \u0026#34;.1\u0026#34; $esxiNSXTepStart = ($esxiNSXTepNetworkOctects[0..2] -join \u0026#39;.\u0026#39;) + \u0026#34;.101\u0026#34; $esxiNSXTepEnd = ($esxiNSXTepNetworkOctects[0..2] -join \u0026#39;.\u0026#39;) + \u0026#34;.118\u0026#34; $hostSpecs = @() $count = 1 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { $VMName = $_.Key $VMIPAddress = $_.Value $hostSpec = [ordered]@{ \u0026#34;association\u0026#34; = \u0026#34;vcf-m01-dc01\u0026#34; \u0026#34;ipAddressPrivate\u0026#34; = [ordered]@{ \u0026#34;ipAddress\u0026#34; = $VMIPAddress \u0026#34;cidr\u0026#34; = $NestedESXiManagementNetworkCidr \u0026#34;gateway\u0026#34; = $VMGateway } \u0026#34;hostname\u0026#34; = $VMName \u0026#34;credentials\u0026#34; = [ordered]@{ \u0026#34;username\u0026#34; = \u0026#34;root\u0026#34; \u0026#34;password\u0026#34; = $VMPassword } \u0026#34;sshThumbprint\u0026#34; = \u0026#34;SHA256:DUMMY_VALUE\u0026#34; \u0026#34;sslThumbprint\u0026#34; = \u0026#34;SHA25_DUMMY_VALUE\u0026#34; \u0026#34;vSwitch\u0026#34; = \u0026#34;vSwitch0\u0026#34; \u0026#34;serverId\u0026#34; = \u0026#34;host-$count\u0026#34; } $hostSpecs+=$hostSpec $count++ } $vcfConfig = [ordered]@{ \u0026#34;subscriptionLicensing\u0026#34; = $false \u0026#34;skipEsxThumbprintValidation\u0026#34; = $true \u0026#34;managementPoolName\u0026#34; = $VCFManagementDomainPoolName \u0026#34;sddcId\u0026#34; = \u0026#34;vcf-m01\u0026#34; \u0026#34;taskName\u0026#34; = \u0026#34;workflowconfig/workflowspec-ems.json\u0026#34; \u0026#34;esxLicense\u0026#34; = \u0026#34;$ESXILicense\u0026#34; \u0026#34;ceipEnabled\u0026#34; = $true \u0026#34;ntpServers\u0026#34; = @($VMNTP) \u0026#34;dnsSpec\u0026#34; = [ordered]@{ \u0026#34;subdomain\u0026#34; = $VMDomain \u0026#34;domain\u0026#34; = $VMDomain \u0026#34;nameserver\u0026#34; = $VMDNS } \u0026#34;sddcManagerSpec\u0026#34; = [ordered]@{ \u0026#34;ipAddress\u0026#34; = $SddcManagerIP \u0026#34;netmask\u0026#34; = $VMNetmask \u0026#34;hostname\u0026#34; = $SddcManagerHostname \u0026#34;localUserPassword\u0026#34; = \u0026#34;$SddcManagerLocalPassword\u0026#34; \u0026#34;vcenterId\u0026#34; = \u0026#34;vcenter-1\u0026#34; \u0026#34;secondUserCredentials\u0026#34; = [ordered]@{ \u0026#34;username\u0026#34; = \u0026#34;vcf\u0026#34; \u0026#34;password\u0026#34; = $SddcManagerVcfPassword } \u0026#34;rootUserCredentials\u0026#34; = [ordered]@{ \u0026#34;username\u0026#34; = \u0026#34;root\u0026#34; \u0026#34;password\u0026#34; = $SddcManagerRootPassword } \u0026#34;restApiCredentials\u0026#34; = [ordered]@{ \u0026#34;username\u0026#34; = \u0026#34;admin\u0026#34; \u0026#34;password\u0026#34; = $SddcManagerRestPassword } } \u0026#34;networkSpecs\u0026#34; = @( [ordered]@{ \u0026#34;networkType\u0026#34; = \u0026#34;MANAGEMENT\u0026#34; \u0026#34;subnet\u0026#34; = $NestedESXiManagementNetworkCidr \u0026#34;gateway\u0026#34; = $VMGateway \u0026#34;vlanId\u0026#34; = \u0026#34;0\u0026#34; \u0026#34;mtu\u0026#34; = \u0026#34;1500\u0026#34; \u0026#34;portGroupKey\u0026#34; = \u0026#34;vcf-m01-cl01-vds01-pg-mgmt\u0026#34; \u0026#34;standbyUplinks\u0026#34; = @() \u0026#34;activeUplinks\u0026#34; = @(\u0026#34;uplink1\u0026#34;,\u0026#34;uplink2\u0026#34;) } [ordered]@{ \u0026#34;networkType\u0026#34; = \u0026#34;VMOTION\u0026#34; \u0026#34;subnet\u0026#34; = $NestedESXivMotionNetworkCidr \u0026#34;gateway\u0026#34; = $esxivMotionGateway \u0026#34;vlanId\u0026#34; = \u0026#34;0\u0026#34; \u0026#34;mtu\u0026#34; = \u0026#34;9000\u0026#34; \u0026#34;portGroupKey\u0026#34; = \u0026#34;vcf-m01-cl01-vds01-pg-vmotion\u0026#34; \u0026#34;association\u0026#34; = \u0026#34;vcf-m01-dc01\u0026#34; \u0026#34;includeIpAddressRanges\u0026#34; = @(@{\u0026#34;startIpAddress\u0026#34; = $esxivMotionStart;\u0026#34;endIpAddress\u0026#34; = $esxivMotionEnd}) \u0026#34;standbyUplinks\u0026#34; = @() \u0026#34;activeUplinks\u0026#34; = @(\u0026#34;uplink1\u0026#34;,\u0026#34;uplink2\u0026#34;) } [ordered]@{ \u0026#34;networkType\u0026#34; = \u0026#34;VSAN\u0026#34; \u0026#34;subnet\u0026#34; = $NestedESXivSANNetworkCidr \u0026#34;gateway\u0026#34;= $esxivSANGateway \u0026#34;vlanId\u0026#34; = \u0026#34;0\u0026#34; \u0026#34;mtu\u0026#34; = \u0026#34;9000\u0026#34; \u0026#34;portGroupKey\u0026#34; = \u0026#34;vcf-m01-cl01-vds01-pg-vsan\u0026#34; \u0026#34;includeIpAddressRanges\u0026#34; = @(@{\u0026#34;startIpAddress\u0026#34; = $esxivSANStart;\u0026#34;endIpAddress\u0026#34; = $esxivSANEnd}) \u0026#34;standbyUplinks\u0026#34; = @() \u0026#34;activeUplinks\u0026#34; = @(\u0026#34;uplink1\u0026#34;,\u0026#34;uplink2\u0026#34;) } ) \u0026#34;nsxtSpec\u0026#34; = [ordered]@{ \u0026#34;nsxtManagerSize\u0026#34; = $NSXManagerSize \u0026#34;nsxtManagers\u0026#34; = @(@{\u0026#34;hostname\u0026#34; = $NSXManagerNode1Hostname;\u0026#34;ip\u0026#34; = $NSXManagerNode1IP}) \u0026#34;rootNsxtManagerPassword\u0026#34; = $NSXRootPassword \u0026#34;nsxtAdminPassword\u0026#34; = $NSXAdminPassword \u0026#34;nsxtAuditPassword\u0026#34; = $NSXAuditPassword \u0026#34;rootLoginEnabledForNsxtManager\u0026#34; = $true \u0026#34;sshEnabledForNsxtManager\u0026#34; = $true \u0026#34;overLayTransportZone\u0026#34; = [ordered]@{ \u0026#34;zoneName\u0026#34; = \u0026#34;vcf-m01-tz-overlay01\u0026#34; \u0026#34;networkName\u0026#34; = \u0026#34;netName-overlay\u0026#34; } \u0026#34;vlanTransportZone\u0026#34; = [ordered]@{ \u0026#34;zoneName\u0026#34; = \u0026#34;vcf-m01-tz-vlan01\u0026#34; \u0026#34;networkName\u0026#34; = \u0026#34;netName-vlan\u0026#34; } \u0026#34;vip\u0026#34; = $NSXManagerVIPIP \u0026#34;vipFqdn\u0026#34; = $NSXManagerVIPHostname \u0026#34;nsxtLicense\u0026#34; = $NSXLicense \u0026#34;transportVlanId\u0026#34; = \u0026#34;2005\u0026#34; \u0026#34;ipAddressPoolSpec\u0026#34; = [ordered]@{ \u0026#34;name\u0026#34; = \u0026#34;vcf-m01-c101-tep01\u0026#34; \u0026#34;description\u0026#34; = \u0026#34;ESXi Host Overlay TEP IP Pool\u0026#34; \u0026#34;subnets\u0026#34; = @( @{ \u0026#34;ipAddressPoolRanges\u0026#34; = @(@{\u0026#34;start\u0026#34; = $esxiNSXTepStart;\u0026#34;end\u0026#34; = $esxiNSXTepEnd}) \u0026#34;cidr\u0026#34; = $NestedESXiNSXTepNetworkCidr \u0026#34;gateway\u0026#34; = $esxiNSXTepGateway } ) } } \u0026#34;vsanSpec\u0026#34; = [ordered]@{ \u0026#34;vsanName\u0026#34; = \u0026#34;vsan-1\u0026#34; \u0026#34;vsanDedup\u0026#34; = \u0026#34;false\u0026#34; \u0026#34;licenseFile\u0026#34; = $VSANLicense \u0026#34;datastoreName\u0026#34; = \u0026#34;vcf-m01-cl01-ds-vsan01\u0026#34; } \u0026#34;dvSwitchVersion\u0026#34; = \u0026#34;7.0.0\u0026#34; \u0026#34;dvsSpecs\u0026#34; = @( [ordered]@{ \u0026#34;dvsName\u0026#34; = \u0026#34;vcf-m01-cl01-vds01\u0026#34; \u0026#34;vcenterId\u0026#34; = \u0026#34;vcenter-1\u0026#34; \u0026#34;vmnics\u0026#34; = @(\u0026#34;vmnic0\u0026#34;,\u0026#34;vmnic1\u0026#34;) \u0026#34;mtu\u0026#34; = \u0026#34;9000\u0026#34; \u0026#34;networks\u0026#34; = @( \u0026#34;MANAGEMENT\u0026#34;, \u0026#34;VMOTION\u0026#34;, \u0026#34;VSAN\u0026#34; ) \u0026#34;niocSpecs\u0026#34; = @( @{\u0026#34;trafficType\u0026#34;=\u0026#34;VSAN\u0026#34;;\u0026#34;value\u0026#34;=\u0026#34;HIGH\u0026#34;} @{\u0026#34;trafficType\u0026#34;=\u0026#34;VMOTION\u0026#34;;\u0026#34;value\u0026#34;=\u0026#34;LOW\u0026#34;} @{\u0026#34;trafficType\u0026#34;=\u0026#34;VDP\u0026#34;;\u0026#34;value\u0026#34;=\u0026#34;LOW\u0026#34;} @{\u0026#34;trafficType\u0026#34;=\u0026#34;VIRTUALMACHINE\u0026#34;;\u0026#34;value\u0026#34;=\u0026#34;HIGH\u0026#34;} @{\u0026#34;trafficType\u0026#34;=\u0026#34;MANAGEMENT\u0026#34;;\u0026#34;value\u0026#34;=\u0026#34;NORMAL\u0026#34;} @{\u0026#34;trafficType\u0026#34;=\u0026#34;NFS\u0026#34;;\u0026#34;value\u0026#34;=\u0026#34;LOW\u0026#34;} @{\u0026#34;trafficType\u0026#34;=\u0026#34;HBR\u0026#34;;\u0026#34;value\u0026#34;=\u0026#34;LOW\u0026#34;} @{\u0026#34;trafficType\u0026#34;=\u0026#34;FAULTTOLERANCE\u0026#34;;\u0026#34;value\u0026#34;=\u0026#34;LOW\u0026#34;} @{\u0026#34;trafficType\u0026#34;=\u0026#34;ISCSI\u0026#34;;\u0026#34;value\u0026#34;=\u0026#34;LOW\u0026#34;} ) \u0026#34;isUsedByNsxt\u0026#34; = $useNSX } ) \u0026#34;clusterSpec\u0026#34; = [ordered]@{ \u0026#34;clusterName\u0026#34; = \u0026#34;vcf-m01-cl01\u0026#34; \u0026#34;vcenterName\u0026#34; = \u0026#34;vcenter-1\u0026#34; \u0026#34;clusterEvcMode\u0026#34; = \u0026#34;\u0026#34; \u0026#34;hostFailuresToTolerate\u0026#34; = 0 \u0026#34;vmFolders\u0026#34; = [ordered] @{ \u0026#34;MANAGEMENT\u0026#34; = \u0026#34;vcf-m01-fd-mgmt\u0026#34; \u0026#34;NETWORKING\u0026#34; = \u0026#34;vcf-m01-fd-nsx\u0026#34; \u0026#34;EDGENODES\u0026#34; = \u0026#34;vcf-m01-fd-edge\u0026#34; } \u0026#34;clusterImageEnabled\u0026#34; = $EnableVCLM } \u0026#34;resourcePoolSpecs\u0026#34; =@( [ordered]@{ \u0026#34;name\u0026#34; = \u0026#34;vcf-m01-cl01-rp-sddc-mgmt\u0026#34; \u0026#34;type\u0026#34; = \u0026#34;management\u0026#34; \u0026#34;cpuReservationPercentage\u0026#34; = 0 \u0026#34;cpuLimit\u0026#34; = -1 \u0026#34;cpuReservationExpandable\u0026#34; = $true \u0026#34;cpuSharesLevel\u0026#34; = \u0026#34;normal\u0026#34; \u0026#34;cpuSharesValue\u0026#34; = 0 \u0026#34;memoryReservationMb\u0026#34; = 0 \u0026#34;memoryLimit\u0026#34; = -1 \u0026#34;memoryReservationExpandable\u0026#34; = $true \u0026#34;memorySharesLevel\u0026#34; = \u0026#34;normal\u0026#34; \u0026#34;memorySharesValue\u0026#34; = 0 } [ordered]@{ \u0026#34;name\u0026#34; = \u0026#34;vcf-m01-cl01-rp-sddc-edge\u0026#34; \u0026#34;type\u0026#34; = \u0026#34;network\u0026#34; \u0026#34;cpuReservationPercentage\u0026#34; = 0 \u0026#34;cpuLimit\u0026#34; = -1 \u0026#34;cpuReservationExpandable\u0026#34; = $true \u0026#34;cpuSharesLevel\u0026#34; = \u0026#34;normal\u0026#34; \u0026#34;cpuSharesValue\u0026#34; = 0 \u0026#34;memoryReservationPercentage\u0026#34; = 0 \u0026#34;memoryLimit\u0026#34; = -1 \u0026#34;memoryReservationExpandable\u0026#34; = $true \u0026#34;memorySharesLevel\u0026#34; = \u0026#34;normal\u0026#34; \u0026#34;memorySharesValue\u0026#34; = 0 } [ordered]@{ \u0026#34;name\u0026#34; = \u0026#34;vcf-m01-cl01-rp-user-edge\u0026#34; \u0026#34;type\u0026#34; = \u0026#34;compute\u0026#34; \u0026#34;cpuReservationPercentage\u0026#34; = 0 \u0026#34;cpuLimit\u0026#34; = -1 \u0026#34;cpuReservationExpandable\u0026#34; = $true \u0026#34;cpuSharesLevel\u0026#34; = \u0026#34;normal\u0026#34; \u0026#34;cpuSharesValue\u0026#34; = 0 \u0026#34;memoryReservationPercentage\u0026#34; = 0 \u0026#34;memoryLimit\u0026#34; = -1 \u0026#34;memoryReservationExpandable\u0026#34; = $true \u0026#34;memorySharesLevel\u0026#34; = \u0026#34;normal\u0026#34; \u0026#34;memorySharesValue\u0026#34; = 0 } [ordered]@{ \u0026#34;name\u0026#34; = \u0026#34;vcf-m01-cl01-rp-user-vm\u0026#34; \u0026#34;type\u0026#34; = \u0026#34;compute\u0026#34; \u0026#34;cpuReservationPercentage\u0026#34; = 0 \u0026#34;cpuLimit\u0026#34; = -1 \u0026#34;cpuReservationExpandable\u0026#34; = $true \u0026#34;cpuSharesLevel\u0026#34; = \u0026#34;normal\u0026#34; \u0026#34;cpuSharesValue\u0026#34; = 0 \u0026#34;memoryReservationPercentage\u0026#34; = 0 \u0026#34;memoryLimit\u0026#34; = -1 \u0026#34;memoryReservationExpandable\u0026#34; = $true \u0026#34;memorySharesLevel\u0026#34; = \u0026#34;normal\u0026#34; \u0026#34;memorySharesValue\u0026#34; = 0 } ) \u0026#34;pscSpecs\u0026#34; = @( [ordered]@{ \u0026#34;pscId\u0026#34; = \u0026#34;psc-1\u0026#34; \u0026#34;vcenterId\u0026#34; = \u0026#34;vcenter-1\u0026#34; \u0026#34;adminUserSsoPassword\u0026#34; = $VCSASSOPassword \u0026#34;pscSsoSpec\u0026#34; = @{\u0026#34;ssoDomain\u0026#34;=\u0026#34;vsphere.local\u0026#34;} } ) \u0026#34;vcenterSpec\u0026#34; = [ordered]@{ \u0026#34;vcenterIp\u0026#34; = $VCSAIP \u0026#34;vcenterHostname\u0026#34; = $VCSAName \u0026#34;vcenterId\u0026#34; = \u0026#34;vcenter-1\u0026#34; \u0026#34;licenseFile\u0026#34; = $VCSALicense \u0026#34;vmSize\u0026#34; = \u0026#34;tiny\u0026#34; \u0026#34;storageSize\u0026#34; = \u0026#34;\u0026#34; \u0026#34;rootVcenterPassword\u0026#34; = $VCSARootPassword } \u0026#34;hostSpecs\u0026#34; = $hostSpecs \u0026#34;excludedComponents\u0026#34; = @(\u0026#34;NSX-V\u0026#34;, \u0026#34;AVN\u0026#34;, \u0026#34;EBGP\u0026#34;) } if($SeparateNSXSwitch) { $sepNsxSwitchSpec = [ordered]@{ \u0026#34;dvsName\u0026#34; = \u0026#34;vcf-m01-nsx-vds01\u0026#34; \u0026#34;vcenterId\u0026#34; = \u0026#34;vcenter-1\u0026#34; \u0026#34;vmnics\u0026#34; = @(\u0026#34;vmnic2\u0026#34;,\u0026#34;vmnic3\u0026#34;) \u0026#34;mtu\u0026#34; = 9000 \u0026#34;networks\u0026#34; = @() \u0026#34;isUsedByNsxt\u0026#34; = $true } $vcfConfig.dvsSpecs+=$sepNsxSwitchSpec } # License Later feature only applicable for VCF 5.1.1 and later if($VCFVersion -ge \u0026#34;5.1.1\u0026#34;) { if($VCSALicense -eq \u0026#34;\u0026#34; -and $ESXILicense -eq \u0026#34;\u0026#34; -and $VSANLicense -eq \u0026#34;\u0026#34; -and $NSXLicense -eq \u0026#34;\u0026#34;) { $EvaluationMode = $true } else { $EvaluationMode = $false } $vcfConfig.add(\u0026#34;deployWithoutLicenseKeys\u0026#34;,$EvaluationMode) } New-LogEvent \u0026#34;Generating Cloud Builder VCF Management Domain configuration deployment file $VCFManagementDomainJSONFile\u0026#34; $vcfConfig | ConvertTo-Json -Depth 20 | Out-File -LiteralPath $VCFManagementDomainJSONFile } # Make Config Change to Cloud Builder to work with only one Host $vm = Get-VM -Name $CloudbuilderVMHostname $o = Invoke-VMScript -VM $vm -ScriptText \u0026#39;echo \u0026#34;bringup.mgmt.cluster.minimum.size=1\u0026#34; \u0026gt;\u0026gt; /etc/vmware/vcf/bringup/application.properties\u0026#39; -GuestUser \u0026#34;root\u0026#34; -GuestPassword $CloudbuilderRootPassword -ScriptType Bash $o = Invoke-VMScript -VM $vm -ScriptText \u0026#39;cat /etc/vmware/vcf/bringup/application.properties\u0026#39; -GuestUser \u0026#34;root\u0026#34; -GuestPassword $CloudbuilderRootPassword -ScriptType Bash $o = Invoke-VMScript -VM $vm -ScriptText \u0026#39;systemctl restart vcf-bringup.service\u0026#39; -GuestUser \u0026#34;root\u0026#34; -GuestPassword $CloudbuilderRootPassword -ScriptType Bash $o = Invoke-VMScript -VM $VM -ScriptText \u0026#34;systemctl status vcf-bringup.service\u0026#34; -GuestUser \u0026#34;root\u0026#34; -GuestPassword $CloudbuilderRootPassword -ScriptType Bash # Extract the service Status $outPut = ($o.ScriptOutput -split \u0026#34;`n\u0026#34;)[2] -replace \u0026#39;since.*\u0026#39;, \u0026#39;\u0026#39; -replace \u0026#39;^\\s+\u0026#39;, \u0026#39;\u0026#39; Write-Host \u0026#34;VCF Bringup Service:\u0026#34;$outPut # Disconnect from vCenter if($deployNestedESXiVMsForMgmt -eq 1 -or $deployNestedESXiVMsForWLD -eq 1 -or $deployCloudBuilder -eq 1) { New-LogEvent \u0026#34;Disconnecting from $VIServer ...\u0026#34; Disconnect-VIServer -Server $viConnection -Confirm:$false } $EndTime = Get-Date $duration = [math]::Round((New-TimeSpan -Start $StartTime -End $EndTime).TotalMinutes,2) New-LogEvent \u0026#34;VCF Lab Deployment Complete!\u0026#34; New-LogEvent \u0026#34;StartTime: $StartTime\u0026#34; New-LogEvent \u0026#34;EndTime: $EndTime\u0026#34; New-LogEvent \u0026#34;Duration: $duration minutes to Deploy CloudBuilder\u0026#34; Screen Shots: Screen Shot of the Physical Host (MS-01), Capacity and Usage, before any installs:\nThe server is equipped with 96 GB of physical memory. Using ESXi Tiered Memory, the total available memory is approximately 478 GB. Screen Shot of the Nested ESXi install PowerShell Script output:\nTotal Script Run Time is less than one minute Screen Shot of the Physical Host (MS-01), Capacity and Usage, after the Nested ESXi install:\nVery little CPU/Memory Usage Screen Shot of the VCF Cloud Builder VM install PowerShell Script output:\nTotal Script Run Time is ~6.5 minutes Screen Shot of the Physical Host (MS-01), Capacity and Usage, after the Nested ESXi and VCF Cloud Builder install:\nStill very little CPU/Memory Usage Both VMs moved to a vAPP by the Script Screen Shot of VCF Cloud Builder Deploy wizard, step 1:\nScreen Shot of VCF Cloud Builder Deploy wizard, step 2:\nScreen Shot of VCF Cloud Builder Deploy wizard, step 3:\nScreen Shot of VCF Cloud Builder Deploy wizard, step 4:\nScreen Shot of VCF Cloud Builder Deploy wizard, step 5:\nScreen Shot of the VCF Cloud Builder - All validation is successful:\nScreen Shot of VCF Cloud Builder Deploy wizard, step 6, start the VCF SDDC Deploy:\nScreen Shot of the VCF Cloud Builder - A successful VCF deployment!\nScreen Shot of the VCF Cloud Builder - Press button to launch SDDC Manager.\nScreen Shot of the VCF SDDC Manager.\nScreen Shot of the VCF SDDC Manager - By installing version 5.2.1, I also have the opportunity to upgrade to 5.2.1.1 and learn the upgrade process:\nScreen Shot of the VCF SDDC Manager - You can see that the performance is good for a Home Lab environment:\nScreen Shot of the Physical Host (MS-01), Capacity and Usage, after the installs are complete:\nCPU/Memory/Storage all look OK Screen Shot of the Physical ESXi Host vSwitch Security settings that is running the nested ESXi Host:\nLessons Learned: Update the security settings on the vSwitch of the physical ESXi hosts running the nested ESXi hosts to ensure proper configuration (Refer to the screenshot above.) MAKE SURE DNS IS SETUP WITH THE NAMES AND IPs YOU SPECIFY IN THE SCRIPT! If the install fails, it is probably a DNS issue! This script takes approximately 1.25 to 1.5 hours to run and create a VCF SDDC Manager environment. If monitoring the logs, expect periods with no new log entries. Be patient—the process will complete. Example commands to monitor the install logs of Cloud Builder: tail -f -n 45 /var/log/vmware/vcf/bringup/vcf-bringup.log less /var/log/vmware/vcf/bringup/vcf-bringup.log I have run these scripts multiple times, and they have completed successfully. Command to make sure the changes to allow a single ESXi can be used for VCF SDDC Manager on the Cloud Builder VM: The script will complete this step. This is the command to run if you want to verify. cat /etc/vmware/vcf/bringup/application.properties Command to restart the vcf-bringup.service on the Cloud Builder VM: The script will complete this step. This is the command to run if you want to run manually. systemctl restart vcf-bringup.service Check out Brock Peterson blogs for example VCF Operations Dashboards to monitor your VCF environments. Best VCF Operations Blog site available! I also have the example code saved in my GitHub Repository In this blog, I used a single Nested ESXi host to keep things simple, and the performance has been fine for a home lab setup. If you want to expand your environment, you can add additional Nested ESXi Hosts. You can either modify the deployment script or manually add more ESXi hosts to the SDDC Manager after the installation to better understand the process. After the VCF SDDC Manager is installed and running, you can safely delete the Cloud Builder from vCenter to free up space and resources. Downloading the Nested ESXi Virtual Appliances from VMware Fling Site For those looking to deploy a Nested ESXi Virtual Appliance, VMware provides pre-configured templates available on their Fling site.\n➡️ Click here to access the downloads\nImportant Note for macOS Users The Nested ESXi Virtual Appliance downloads are packaged as ZIP files. However, do not double-click to unpack them on macOS, as it may lead to issues with the extracted contents.\nInstead, use the command line to properly extract the ZIP file:\n1 unzip Nested_ESXi8_0u3c_Appliance_Template_v1_ova-dl.zip Links to Help with Nested ESXi and VCF on NUC:\nRefresher on Nested ESXi Networking Requirements VMware Cloud Foundation 5.0 running on Intel NUC VMware Cloud Foundation on Intel NUC? In my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2024-12-26T00:00:00Z","image":"https://vcrocs.info/vcf-deploy-scripted-install-home-lab/featured-image_hu_1950e316c1d309ea.png","permalink":"https://vcrocs.info/vcf-deploy-scripted-install-home-lab/","title":"VCF Deploy | Scripted Install | Home Lab"},{"content":"Most-Read Blog Posts of 2024\nI’m astonished by how many people have read my blogs—especially since I was certain only my dog cared. – Unknown\n2024 Stats Recap 📊 Blog Site: ✨ 69,000+ Views\nLinkedIn: 🔥 89,000+ Impressions\nX (Twitter): ⚡ 33,000+ Impressions\nThank you all for the incredible support this year!\nStay tuned for more insights, tips, and content in 2025!\nSurprising Insights from Blogging I\u0026rsquo;m always surprised by which blog posts resonate the most with readers. Some of my top-performing posts started as simple notes to myself—a personal Wiki to document processes I didn’t want to forget.\nIronically, those \u0026ldquo;just-for-me\u0026rdquo; posts often end up being the most popular. It turns out that if something was challenging enough for me to document, others are probably facing the same challenge and searching for answers too.\nSo, if you\u0026rsquo;re ever wondering what to write about, start with what you need to remember. Chances are, someone else will find it just as helpful!\n2024 | Top 20 Blog Posts: VMware Aria Automation and Ansible Integration\nRead More\nVCF Operations | Ideas for Practical and Effective Dashboards\nRead More\nAutomation Code Creation with ollama\nRead More\nVMware Aria Operations | Use vCenter TAGS/Custom Groups/Super Metrics to get VM Details\nRead More\nVMware Aria Operations | Servicenow | Management Pack\nRead More\nVMware Aria Automation | How to send messages and updates\nRead More\nSchedule RVTools Data Export\nRead More\nVCF Automation Deployments | Overview Tab\nRead More\nVMware Aria Operations | RVTools Dashboard\nRead More\nVMware Explore 2024\nRead More\nAria Operations | vCenter Observability\nRead More\nVMware Aria Automation | Working with Windows Server Drives\nRead More\nRest API calls in VMware Aria Automation with PowerShell\nRead More\nVCF Operations Dashboard | ESXi Tiered Memory\nRead More\nVMware Aria Automation | Custom Form with ChatGPT\nRead More\nVMware Aria Automation and SaltStack Config Resource\nRead More\nVMware Explore 2024 | My Insights, Session Recording Links and PICs\nRead More\nVMware Aria Automation Orchestrator | Active Directory OUs\nRead More\nVCF Operations for Logs | How to use with Automation Scripts\nRead More\nVMware Aria Automation | Options for CPU|Memory values\nRead More\n2025 Tech Goals and Recommendations!\nExpand Your Automation Skills Step outside your comfort zone—explore new areas of automation. Challenge yourself to learn something different and level up your expertise! Explore the VCF Management Pack Builder Take your VMware Cloud Foundation (VCF) Operations to the next level by leveraging Management Packs. They can significantly enhance monitoring and automation capabilities. Get Hands-On with VCF Don\u0026rsquo;t have VCF in production? No problem! Set up a lab environment and start exploring the product to gain practical experience. Engage with the vCommunity Share what you’ve learned with others! Your insights could help someone facing similar challenges. Present Your Work Never presented before? Make 2025 the year you showcase your automation and monitoring achievements. Start small—join a local VMUG or submit for a VMware Explore session and share your knowledge! If you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2024-12-22T00:00:00Z","image":"https://vcrocs.info/top-blog-highlights-of-2024/featured-image_hu_7459ee00e6d69684.png","permalink":"https://vcrocs.info/top-blog-highlights-of-2024/","title":"Top Blog Highlights of 2024"},{"content":"The 12 Days of Tech: Gadgets, Gizmos, and Geeky Gifts You Didn’t Know You Needed!\nTechnology is the gift that keeps on giving—right up until the Wi-Fi goes out. – Unknown\nI thought it’d be fun to kick off the holidays with a tech twist—so here’s my take on “The 12 Days of Tech”!\nOn the first day of Christmas, my true love gave to me:\n🎄 A ChatGPT subscription! 🤖\nBecause even Santa needs AI to debug his code and write better emails to the elves! 🎅💻 Perfect for fixing my writing skils (see what I did there?) and generating awesome code faster than Rudolph on a caffeine rush. 🚀 On the second day of Christmas, my true love gave to me:\n🎄 An Elgato Stream Deck! 🚀\nBecause pressing buttons is way more fun when it feels like you’re launching a rocket, not just opening Zoom! 🚀 Automation – Turn tedious tasks into one-tap magic. ✨ Demos – Nail presentations like a pro. 🎤 Launch apps – Open anything faster than Santa sliding down a chimney. 🎅💻 Commands – Control everything with a single push—because who needs extra clicks? 🔘 On the third day of Christmas, my true love gave to me:\n🎄 An epic Home Lab setup! 💻 ✨\nBecause who doesn’t dream of turning their spare room into a mini data center? 🏢 Several MS-01 servers – Because one is never enough. 🖥️ A cool small rack – Because racks deserve compliments too. 😎 Thin network cables – So I can finally stop wrestling with spaghetti wiring. 🍝 🔌 Fusion/Workstation – For when I need to virtualize my virtualizations! 🧊 💻 It’s basically Santa’s workshop\u0026hellip; but with more blinking LEDs and fewer elves. 🎄 💡 🎅\nOn the fourth day of Christmas, my true love gave to me:\n🎄 A box full of fancy input devices! 🎁 ⌨️ 🖱️\nBecause typing, clicking, and Zooming deserve premium gear! 💻 🎤 📸 Keychron K10 Pro Wireless Mechanical Keyboard – For that clickety-clack sound that makes you feel 10x more productive. ⌨️ ✨ Keychron M3 Wireless Mouse – Fits my hand so perfectly, it’s basically ergonomic destiny. 🖱️ 👌 Logitech MX Brio 4K Webcam – Because if I’m going to freeze on Zoom, I’ll do it in ultra-HD. 📸 💎 Shure MV51 Microphone – For sounding like a podcast host, even when I’m just yelling at my computer. 🎤 🎙️ Now I’m ready to code, stream, and crush meetings—all while looking and sounding like a tech rockstar. 🤘 🎤 🖱️\nOn the fifth day of Christmas, my true love gave to me:\n🎄 An X Premium Subscription! 📱 ✨\nCurated lists so I only see the stuff that actually matters—no more doomscrolling rabbit holes. 🐇 📜 Premium perks, like no ads—finally, peace and quiet on my feed. 😎 🔇 It’s like social media, but with fewer distractions and more time to pretend I’m productive. 🎄 📱 💼\n\u0026ndash;\nOn the sixth day of Christmas, my true love gave to me:\n🎄 A stocking full of cool apps for my Apple MacBook—because productivity is just an app download away! 🎁 🍎\nCleanshotX – For screenshots so clean, they make my desktop look organized (even if it’s not). 📸 GitHub, Desktop, and Pages – Because version control is my love language. 💻❤️ Bitly – Short links for long-winded tech posts. 🔗 VSCode – Coding like a pro, one extension at a time. 👨‍💻 PowerShell – Cross-platform scripts that feel like Christmas magic. 🎅 Hugo – Static sites so fast, they practically build themselves. 🚀 Python – For when I need to automate all the things. 🐍 Notion – Organizing my chaos\u0026hellip; or at least trying to. 📚 Obsidian – Notes so connected, they’re practically a mind map. 🧠 Affinity Photo \u0026amp; Publisher – Designs sharp enough to impress Santa’s elves. 🎨 Termius – SSH access smoother than eggnog. 🖥️ Audio Hijack – Recording audio like I’m hosting a holiday podcast. 🎤 Ollama – AI experiments that make me feel like Tony Stark. 🤖 Twingate – Secure access for when I’m working remotely from anywhere. 🌍 Keyboard Maestro – Automating shortcuts faster than Santa’s sleigh. ⌨️✨ Backblaze – Backups so reliable, even the Grinch couldn’t steal my data. 🔒 Who needs partridges and pear trees when you’ve got apps like these? 🎄 💻\nOn the seventh day of Christmas, my true love gave to me:\n🎄 Some super cool Apple devices! 🍎 ✨\niPad Pro – For when I need a tablet that’s basically a laptop in disguise. 📱 💼 MacBook Pro – Because real work deserves real power. 💻 ⚡ AirPods Pro 2 – Noise-canceling magic for tuning out everything\u0026hellip; except Siri. 🎧 🔇 HomePod – My home’s personal DJ and know-it-all assistant. 🎶 🏠 Apple TV – Streaming so smooth, even my couch potato mode feels high-tech. 📺 🍿 Apple Watch – Tracks my steps, heart rate, and occasional impulse buys. ⌚ 🛍️ Let’s be honest—I bleed Apple. 🍎 ❤️\nOn the eighth day of Christmas, my true love gave to me:\n🎄 A Technology Blog site! 🌐💻\nFocused on Automation and Monitoring—because scripts and dashboards make the world go \u0026lsquo;round. 🔄 📊 A place to share ideas with the vCommunity—because knowledge grows when it’s shared. 🌍 ✨ Giving back to help others solve problems faster than Santa delivers presents. 🎁 💡 Making friends worldwide—because tech brings us all together, one blog post at a time. 🤝 🌎 Now I can share knowledge, inspire creativity, and maybe—just maybe—help someone automate their way out of a boring task. 🤖🎄\nOn the ninth day of Christmas, my true love gave to me:\n🎄 Ollama generative AI! 🤖 ✨\nNo internet? No problem! It’s my offline AI sidekick that never leaves me hanging. 🌐 ❌ Pairs perfectly with my Elgato Stream Deck—because AI deserves a button press for instant genius. 🚀 🔘 Choose any LLM—I’m basically speed-dating AI models and loving it. 💡 💬 Works seamlessly with VSCode—coding smarter, not harder. 👨‍💻 💥 So much data in such a little file—it’s like fitting a supercomputer in my stocking. 🎁 🗂️ Now I’m ready to tinker, test, and train AI models—whether I’m online, offline, or somewhere in between. 🎄 🤓\nOn the tenth day of Christmas, my true love gave to me:\n🎄 A Fuji X-S20 camera! 📸 ✨\nI used to think iPhone pics were good\u0026hellip; until I picked up this beauty. 😍 📱 ➡️ 📷 Capturing family memories to last a lifetime—because blurry photos just won’t cut it anymore. 👨‍👩‍👧‍👦 ❤️ Now I need a second job just to buy all the Fuji lenses I want. 💸 📦 Lenses to a photographer are like clamps to a woodworker—you can never have enough! 🔍 📷 🪚 Guess I’ll be taking photos of everything this holiday season—including my empty wallet. 🎄 😂 💳\nOn the eleventh day of Christmas, my true love gave to me:\n🎄 10GbE equipment for my Home Lab! 🌐 ⚡\nBecause in a lab environment, vMotions should finish faster than making coffee—30 seconds or less! ☕ 💨 ISO uploads? Ain’t nobody got time for that. 🚀 📂 Template clones dragging their feet? Automation deserves speed, not spinning wheels. 🔄 ⚡ Now my home lab runs so fast, it’s practically bending time—and I’ll never have to watch a progress bar again. 🎄 💻 💥\nOn the twelfth day of Christmas, my true love gave to me:\n🎄 More opportunities to do presentations! 🎤 💻\nThe 4 presentations I gave at VMware Explore this year were incredibly rewarding—like hitting “Apply” on the perfect config. ✅ 🎯 Hoping to spark more interest in the local VMUG—because sharing knowledge is better than hoarding it. 🤝 📚 It’s a great way to give back to the vCommunity and keep the tech spirit alive. 🌍 💡 Here’s to more presentations and more knowledge sharing! 👏 🎄 ✨\nWishing You a Tech-Tastic Holiday Season! 🎄 💻 ✨\nI hope everyone who reads my blogs has an amazing 2024 Holiday Season filled with joy, laughter, and maybe a few new gadgets under the tree! 🎁 🎅\nThank you for being part of this journey—here’s to more tech adventures, learning, and sharing in the year ahead. 🚀 🌟\nHappy Holidays and a Fantastic New Year! 🎉 🥳\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2024-12-21T00:00:00Z","image":"https://vcrocs.info/the-12-days-of-tech/featured-image_hu_1413b0cd4ac05840.png","permalink":"https://vcrocs.info/the-12-days-of-tech/","title":"The 12 Days of Tech"},{"content":"Example PowerShell Script to Extract Diagnostics Events from VCF Operations\nAlone we can do so little; together we can do so much. – Helen Keller\nProduct Versions used for this Blog:\nVCF Operations: 8.18.2 PowerCLI: 13.3 PowerShell: 7.4.6 importExcel PS Module: 7.8.10 Brock Peterson released a blog titled \u0026ldquo;Extracting Diagnostics Events from Aria Operations\u0026rdquo; on December 16, 2024. Prior to reading this blog, I was unaware that the diagnostic data added to VCF Operations could be extracted using the VCF Operations API. This is an excellent read that you should check out before working with the example PowerShell script shared within this blog post.\nI\u0026rsquo;ve received several inquiries from people asking how to extract diagnostic data from VCF Operations since the VMware Skyline service was officially retired (EOL). In the past, VMware Technical Adoption Managers (TAMs) relied on VMware Skyline data to help customers ensure their environments remained up to date with the latest patches. This script could potentially serve as an alternative for extracting diagnostic data from VCF Operations and sharing it with a TAM.\nIf you don\u0026rsquo;t have a VMware TAM but still want to share this data with your internal VMware team, this script will work perfectly for that use case as well. The Excel file generated by this script can also be used to provide your security team with insights into the diagnostic data available within VCF Operations.\nFor automating this script to run on a weekly or daily basis, I recommend using VCF Orchestrator, which is part of VCF Automation.\nI also have the example code saved in my GitHub Repository\nCode Details: Demonstrates how to connect to the VCF Operations API Generates a token for making API requests Creates an Excel spreadsheet to save the events using the importExcel PowerShell module Includes optional code to send the newly created Excel file as an email attachment 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 # Import the ImportExcel module (requires prior installation) Import-Module ImportExcel # ----- Configuration and Credentials (Replace with secure methods in production) ----- $opsURL = \u0026#34;https://vao.vcrocs.local\u0026#34; # Your VCF Operations URL $opsUsername = \u0026#34;admin\u0026#34; $opsPassword = \u0026#34;VMware1!\u0026#34; # Use a secure vault or secret manager in production $authSource = \u0026#34;local\u0026#34; # ----- Acquire Aria Operations Token ----- $uri = \u0026#34;$opsURL/suite-api/api/auth/token/acquire?_no_links=true\u0026#34; # Create authentication body $bodyHashtable = @{ username = $opsUsername authSource = $authSource password = $opsPassword } # Convert body to JSON $body = $bodyHashtable | ConvertTo-Json # Request token $token = Invoke-RestMethod -Uri $uri -Method Post -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;Content-Type\u0026#34; = \u0026#34;application/json\u0026#34; } -Body $body -SkipCertificateCheck $authorization = \u0026#34;OpsToken \u0026#34; + $token.token # ----- Retrieve Diagnostic Events ----- $uri = \u0026#34;$opsURL/suite-api/internal/events?active=true\u0026amp;diagnosticSubType=HEALTH\u0026amp;page=0\u0026amp;pageSize=1000\u0026amp;type=DIAGNOSTIC\u0026amp;_no_links=true\u0026#34; $results = Invoke-RestMethod -Uri $uri -Method Get -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;X-Ops-API-use-unsupported\u0026#34; = \u0026#34;true\u0026#34; \u0026#34;Authorization\u0026#34; = $authorization } -SkipCertificateCheck $OPSDiagData = $results.events # ----- Prepare Excel Output ----- $excelFilePath = \u0026#34;/Users/hdale/github/PS-TAM-Lab/aria-operations-diag-data.xlsx\u0026#34; $sheetName = \u0026#34;Diagnostic-Data\u0026#34; # Clear existing data in the worksheet Export-Excel -Path $excelFilePath -WorksheetName $sheetName -ClearSheet # ----- Process Events and Export Data ----- Try { foreach($OPSDiagEvent in $OPSDiagData){ # Extract resource ID and clean up message content $resourceId = $OPSDiagEvent.resourceId $messageContent = $OPSDiagEvent.message -replace \u0026#34;[:_]\u0026#34;, \u0026#34; \u0026#34; # Remove GUID patterns from messages $regex = \u0026#34;[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\u0026#34; $messageContent = $messageContent -replace $regex, \u0026#34;\u0026#34; | ForEach-Object { $_.TrimStart() } # Process Rule ID and generate Event Link $ruleID = $OPSDiagEvent.details | Where-Object { $_.key -eq \u0026#34;ruleId\u0026#34; } | Select-Object -ExpandProperty value $eventLink = \u0026#34;\u0026#34; if ($ruleID -match \u0026#34;KB_(\\d{5,7})$\u0026#34;) { $KBNumber = $matches[1] $eventLink = \u0026#34;https://knowledge.broadcom.com/external/article?legacyId=$KBNumber\u0026#34; } elseif ($ruleID -match \u0026#34;CVE_\\d{4}_\\d{5}\u0026#34;) { $CVENumber = $matches[0] -replace \u0026#34;_\u0026#34;, \u0026#34;-\u0026#34; $eventLink = \u0026#34;https://support.broadcom.com/web/ecx/search?searchString=$CVENumber\u0026#34; } elseif ($ruleID -match \u0026#34;VMSA_(\\d{4})(\\d{2})\u0026#34;) { $CVENumber = \u0026#34;VMSA-$($matches[1])-00$($matches[2])\u0026#34; $eventLink = \u0026#34;https://www.vmware.com/security/advisories/$CVENumber.html\u0026#34; } else { $eventLink = \u0026#34;NA\u0026#34; } # Fetch Resource Details $uri = $opsURL + \u0026#39;/suite-api/api/resources/\u0026#39; + $resourceId + \u0026#39;?_no_links=true\u0026#39; $IDresults = Invoke-RestMethod -Uri $uri -Method Get -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;Authorization\u0026#34; = $authorization } -SkipCertificateCheck # Prepare data for export $newData = @( [PSCustomObject]@{ EventID=$OPSDiagEvent.eventId; EventType=$OPSDiagEvent.eventType; EventSubType=$OPSDiagEvent.diagnosticSubType; Severity=$OPSDiagEvent.severity; ResourceName=$IDresults.resourceKey.name; AdapterKind=$IDresults.resourceKey.adapterKindKey; ResourceKind=$IDresults.resourceKey.resourceKindKey; Message=$messageContent; Event_Link=$eventLink } ) # Append data to Excel sheet $newData | Export-Excel -Path $excelFilePath -WorksheetName $sheetName -Append } } Catch { Write-Error \u0026#34;An error occurred: $_\u0026#34; } # ----- Email Report with Excel Attachment ----- $fromEmail = \u0026#34;dale.hassinger@gmail.com\u0026#34; $toEmail = \u0026#34;dale.hassinger@vcrocs.info\u0026#34; $subject = \u0026#34;VCF Operations Diagnostic Data\u0026#34; # Build email body $body = \u0026#39;\u0026lt;!DOCTYPE html\u0026gt;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\u0026lt;title\u0026gt;vCROCS Automation\u0026lt;/title\u0026gt;\u0026lt;style\u0026gt;body {font-family: Arial;}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;p\u0026gt;Diagnostic Data attached.\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;Created By: vCROCS Automation\u0026lt;/p\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39; $smtpServer = \u0026#34;smtp.gmail.com\u0026#34; $smtpPort = 587 $appPassword = \u0026#34;kl-HackMe-tl\u0026#34; $emailMessage = New-Object system.net.mail.mailmessage $emailMessage.From = $fromEmail $emailMessage.To.Add($toEmail) $emailMessage.Subject = $subject $emailMessage.Body = $body $emailMessage.IsBodyHtml = $true if (Test-Path $excelFilePath) { $attachment = New-Object System.Net.Mail.Attachment($excelFilePath) $emailMessage.Attachments.Add($attachment) } else { Write-Host \u0026#34;Attachment not found: $excelFilePath\u0026#34; exit 1 } $smtpClient = New-Object system.net.mail.smtpclient($smtpServer, $smtpPort) $smtpClient.EnableSsl = $true $smtpClient.Credentials = New-Object System.Net.NetworkCredential($fromEmail, $appPassword) try { $smtpClient.Send($emailMessage) Write-Host \u0026#34;Email sent successfully.\u0026#34; } catch { Write-Host \u0026#34;Failed to send email: $_\u0026#34; } $smtpClient.Dispose() $attachment.Dispose() Screen Shots: Screen Shot of the VCF Operations - Diagnostics:\nScreen Shot of the VCF Operations Diagnostics Events Excel Spreadsheet:\nScreen Shot of the VCF Operations Diagnostics Events Email:\nLessons Learned: The importExcel PowerShell module is excellent for saving VCF Operations events. Thanks to Doug Finke for creating and sharing the importExcel PS module with the community The VCF Operations API offers a method to extract diagnostic events. Special thanks to Brock Peterson for creating the blog that demonstrates how to use the VCF Operations Diagnostics API to extract diagnostic events. Link to Brock\u0026rsquo;s blog titled: \u0026ldquo;Extracting Diagnostics Events from Aria Operations\u0026rdquo; I\u0026rsquo;ve always enjoyed working with Brock. You won\u0026rsquo;t find anyone who shares more insights into how VCF Operations works. Brock\u0026rsquo;s \u0026ldquo;How To\u0026rdquo; guides on VCF Operations are some of the best available. Be sure to bookmark Brock\u0026rsquo;s blog to enhance your VCF Operations knowledge! Brock has been a role model to me for many years. You won\u0026rsquo;t find a better team player out there. I created a Google NotebookLM Podcast based on the content of this blog. While it may not be entirely accurate, is any podcast ever 100% perfect, even when real people are speaking? Take a moment to listen and share your thoughts with me!\nvCROCS Deep Dive Podcast | VCF Operations | Extract Diagnostics Events Script\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2024-12-21T00:00:00Z","image":"https://vcrocs.info/vcf-operations-extract-diagnostics-events-script/featured-image_hu_ec369d535e13992f.png","permalink":"https://vcrocs.info/vcf-operations-extract-diagnostics-events-script/","title":"VCF Operations | Extract Diagnostics Events Script"},{"content":"Sample Dashboard Designs to review first thing in the morning while drinking your Coffee or Energy Drink.\nIf you have an apple and I have an apple and we exchange these apples, then you and I will still each have one apple. But if you have an idea and I have an idea and we exchange these ideas, then each of us will have two ideas. — George Bernard Shaw\nOut of the box (OOTB), VCF Operations provides many great dashboards. Some questions I frequently get from customers are:\n\u0026ldquo;What else can we monitor with VCF Operations?\u0026rdquo; \u0026ldquo;How do I show settings that are most important to my environment?\u0026rdquo; \u0026ldquo;How do other customers use VCF Operations?\u0026rdquo; I always recommend that customers create a list of their (5) favorite dashboards and pin them to the VCF Operations homepage. That way, each morning, as you enjoy your coffee or energy drink, you can get an at-a-glance view of your infrastructure environment.\nWhen designing dashboards, always consider using colors to enhance their functionality—green indicates all is well, while red signals issues that may need attention.\nIn this blog post, I’ll share some screenshots of dashboards that my team or myself have created and used or helped customers implement in their environments. As you review these examples, think about combining sections from different dashboards to create one that covers everything important to you. This way, you’ll have a go-to dashboard you’ll want to check every morning with your favorite wake me up drink in hand.\nThe main goal of this blog post is to provide visual inspiration for what\u0026rsquo;s achievable with Operations Dashboards.\nDashboard Ideas: Environment Configuration Status Counts Mobile Friendly Dashboard Screen Shots: Dashboard: VM Rightsizing\nAlways one of my favorite use cases Shows recommended size for CPU and Memory Include the metrics to show why CPU Count should be increased or decreased Include the metrics to show why Memory Amount should be increased or decreased Dashboard: Environment Overview\nShow Total Inventory Counts Include Alerts that should be reviewed VMware Tools Versions VM OS Hosts Health, Connection State, Power State, Version, Maintenance Mode Status, etc\u0026hellip; Show Host Health in descending order to get you attention Dashboard: Environment Overview\nShow Weather at your data center physical locations Include Health, Maintenance Mode, Workload, Snaps, Etc\u0026hellip; Object Relationship shows what other objects could be affect VM performance\nDashboard: Environment Overview\nDesigned to work on a mobile phone Use Color to get your attention Green is Good Red is Bad Dashboard: Environment Overview\nSame Dashboard as above but on a mobile device. Dashboard: Security Advisories\nThis Dashboard was created in conjunction with a custom Management Pack Builder MP Dashboard: CPU Core Counts\nThis Dashboard makes it easy to show current CPU Core counts to help with licensing Dashboard: vCenters\nThis Dashboard was designed to monitor vCenter appliance VMs only. VMs that are running vCenter. Shows vCenter VM Volumes and Performance Includes vCenter Host details at bottom of Dashboard Dashboard: Virtual Machines\nSimilar to some of the other Dashboards but this one includes some network metrics Example of what I said at beginning of this Blog, add or remove metrics to make the Dashboard work for you Dashboard: Edge Sites\nShow only items that are located in an edge site Use vCenter Tags to specify site location. vCenter Tags make it easy to group together objects. Look at the bottom widget in this Dashboard. In recent versions of Operations, they allow Ancestor/Descendants in views. You can show VM and Host metrics on a single line. That can be very powerful in troubleshooting. Dashboard: vCenter Clusters\nUse TOP-n widgets to show high cpu and memory usage first Set the metrics in the views to use colors to represent high or low values I like how new versions of Operations have the colored squares next to metric values\nDashboard: SaaS Status\nA lot of SaaS products offer a status web site. Use the text display widget to show web site information Lessons Learned: Always think about using colors in your Dashboard Designs I love to use donut charts. You can show a lot of data in a small area of the Dashboard. The text display widget can be used to show data like Weather, Zoom Status, etc\u0026hellip; Links to resources that also show useful Dashboard examples: Brock Peterson Blog Site - Shout out to Brock for some of these examples and ideas. Shout out to Christopher Kusek for some of these examples and ideas. I created a Google NotebookLM Podcast based on the content of this blog. While it may not be entirely accurate, is any podcast ever 100% perfect, even when real people are speaking? Take a moment to listen and share your thoughts with me!\nvCROCS Deep Dive Podcast | VCF Operations | Ideas for Practical and Effective Dashboards\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2024-10-29T00:00:00Z","image":"https://vcrocs.info/vcf-operations-ideas-for-practical-and-effective-dashboards/featured-image_hu_5641d48907c2e6a.png","permalink":"https://vcrocs.info/vcf-operations-ideas-for-practical-and-effective-dashboards/","title":"VCF Operations | Ideas for Practical and Effective Dashboards"},{"content":"How to Create a URL for Filtering Log Results and Share It with Others.\nI have not failed. I’ve just found 10,000 ways that won’t work. – Thomas Edison\nNote: VCF Operations for Logs 8.18.0 was used to create this Blog\nIn my previous blog, I focused on how to send log events to the VCF Operations for Logs API. Click here to read\u0026hellip; In this blog, I’ll demonstrate how to generate a URL that connects to VCF Operations for Logs and automatically applies a filter based on the log events you’ve just sent.\nWhen running an automation script, as shown in the example below, I want the results to be saved in VCF Operations for Logs. To make it easier for the person running the script to view the logged events, I’ve incorporated the generation of the VCF Operations for Logs URL directly into the automation script. When reviewing the VCF Operations for Logs URL format, I found that it wasn’t very human-readable.\nExample URL to filter events for VCF Operations for Logs:\nClick arrow to expand the code:\n1 2 3 https://vaol.vcrocs.local/explorer/?existingChartQuery=%7B%22query%22%3A%22%22%2C%22startTimeMillis%22%3A1729528045745%2C%22endTimeMillis%22%3A1729614745743%2C%22piqlFunctionGroups%22%3A%5B%7B%22functions%22%3A%5B%7B%22label%22%3A%22Count%22%2C%22value%22%3A%22COUNT%22%2C%22requiresField%22%3Afalse%2C%22numericOnly%22%3Afalse%7D%5D%2C%22field%22%3Anull%7D%5D%2C%22dateFilterPreset%22%3A%22CUSTOM%22%2C%22shouldGroupByTime%22%3Atrue%2C%22includeAllContentPackFields%22%3Atrue%2C%22eventSortOrder%22%3A%22DESC%22%2C%22summarySortOrder%22%3A%22DESC%22%2C%22compareQueryOrderBy%22%3A%22TREND%22%2C%22compareQuerySortOrder%22%3A%22DESC%22%2C%22compareQueryOptions%22%3Anull%2C%22messageViewType%22%3A%22EVENTS%22%2C%22constraintToggle%22%3A%22ALL%22%2C%22piqlFunction%22%3A%7B%22label%22%3A%22Count%22%2C%22value%22%3A%22COUNT%22%2C%22requiresField%22%3Afalse%2C%22numericOnly%22%3Afalse%7D%2C%22piqlFunctionField%22%3Anull%2C%22fieldConstraints%22%3A%5B%7B%22internalName%22%3A%22appname%22%2C%22operator%22%3A%22STARTS_WITH%22%2C%22value%22%3A%22vcf_automation%22%7D%2C%7B%22internalName%22%3A%22text%22%2C%22operator%22%3A%22CONTAINS%22%2C%22value%22%3A%22VM%20Build%3A%22%7D%2C%7B%22internalName%22%3A%22vmw_esxi_vm_name%22%2C%22operator%22%3A%22CONTAINS%22%2C%22value%22%3A%22vCROCS-W2K22-06%22%7D%5D%2C%22supplementalConstraints%22%3A%5B%5D%2C%22groupByFields%22%3A%5B%5D%2C%22contentPacksToIncludeFields%22%3A%5B%5D%2C%22extractedFields%22%3A%5B%5D%7D\u0026amp;chartOptions=%7B%22logaxis%22%3Afalse%2C%22trendline%22%3Afalse%2C%22spline%22%3Afalse%7D To simplify the generation of the VCF Operations for Logs URL that includes a filter, I created a function that accepts parameters for the required filter items. In my example, I’m embedding the generated URL in an email, making it easy to click and have VCF Operations for Logs open directly to your filtered data. I love Automation!\nExample Code: (3) Functions:\nFunction to Send event logs to VCF Operations for Logs API Function to generate the VCF Operations for Logs URL Function to send the email with the link in the email body Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 # Function to send event data to Aria Operations for Logs function Send-ApiEvent { Param ( # Parameters with default values, can be overridden as needed. [string]$Uri = \u0026#39;https://vaol-vip.vcrocs.local:9543/api/v2/events\u0026#39;, # API Endpoint to send the event data [string]$priority = \u0026#39;info\u0026#39;, # Event priority (info, warning, error, etc.) [string]$facility = \u0026#39;user\u0026#39;, # Source generating the event (user, system, etc.) [string]$appname = \u0026#39;VCF_Automation\u0026#39;, # Application name logging the event [string]$hostname = \u0026#39;NA\u0026#39;, # Hostname of the system (optional) [string]$vmw_esxi_vm_name = \u0026#39;NA\u0026#39;, # Name of the VM or ESXi host (optional) [string]$vmw_vcenter = \u0026#39;NA\u0026#39;, # Name of the vCenter (optional) [string]$vmw_cluster = \u0026#39;NA\u0026#39;, # Name of the vCenter cluster (optional) [string]$vmw_host = \u0026#39;NA\u0026#39;, # Name of the vCenter Host (optional) [string]$Text = \u0026#34;Custom Script execution\u0026#34; # Custom text describing the event ) # End Param # Define headers for the REST API call, using JSON for content type and response format. $headers = @{ \u0026#39;accept\u0026#39; = \u0026#39;application/json\u0026#39; \u0026#39;Content-Type\u0026#39; = \u0026#39;application/json\u0026#39; } # End headers # Construct the JSON body for the API request using a here-string. $body = @\u0026#34; [ { \u0026#34;priority\u0026#34;: \u0026#34;$priority\u0026#34;, \u0026#34;facility\u0026#34;: \u0026#34;$facility\u0026#34;, \u0026#34;appname\u0026#34;: \u0026#34;$appname\u0026#34;, \u0026#34;hostname\u0026#34;: \u0026#34;$hostname\u0026#34;, \u0026#34;vmw_esxi_vm_name\u0026#34;: \u0026#34;$vmw_esxi_vm_name\u0026#34;, \u0026#34;vmw_vcenter\u0026#34;: \u0026#34;$vmw_vcenter\u0026#34;, \u0026#34;vmw_cluster\u0026#34;: \u0026#34;$vmw_cluster\u0026#34;, \u0026#34;vmw_host\u0026#34;: \u0026#34;$vmw_host\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;$Text\u0026#34; } ] \u0026#34;@ # End Body # Send the POST request to the API endpoint within a try-catch block for error handling. try { # Invoke-RestMethod is used to send the API request and return the response. $response = Invoke-RestMethod -Uri $Uri -Method Post -Headers $headers -Body $body -SkipCertificateCheck # Output the API response if successful. Write-Host \u0026#34;API response: \u0026#34; -ForegroundColor Green $response } catch { # Handle any errors that occur during the request and output the error message. Write-Host \u0026#34;Error occurred: $($_.Exception.Message)\u0026#34; -ForegroundColor Red } # End try/catch } # Function End # Example usage of the Send-ApiEvent function. # Customize the message text, add relevant data to $text, and invoke the function. #$text = \u0026#34;VM Build: \u0026#34; + \u0026#34;A new process has been created with ID 9876\u0026#34; #Send-ApiEvent -Text $text -vmw_esxi_vm_name \u0026#39;vCROCS-W2K22-02\u0026#39; # Email Function using Gmail function Send-ServerBuildEmail { param ( [string]$fromEmail = \u0026#34;dale.hassinger@gmail.com\u0026#34;, [string]$toEmail = \u0026#34;dale.hassinger@vcrocs.info\u0026#34;, [string]$vmName, [string]$finalUrl ) # Gmail email settings $appPassword = \u0026#34;klj-Hack-Me-ytl\u0026#34; $smtpServer = \u0026#34;smtp.gmail.com\u0026#34; $smtpPort = 587 # Email subject $subject = \u0026#34;New Server Build: $vmName\u0026#34; # Build the Email body $body = \u0026#39;\u0026lt;!DOCTYPE html\u0026gt;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\u0026lt;title\u0026gt;vCROCS Automation\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { background-color: #ffffff; color: #000000; font-family: Arial, sans-serif; font-size: 14px; margin: 0; padding: 20px; } \u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39; $body += \u0026#39;\u0026lt;body\u0026gt;\u0026lt;p\u0026gt;New Server Build: \u0026#39; + $vmName + \u0026#39; is Complete.\u0026lt;/p\u0026gt;\u0026#39; $body += \u0026#39;\u0026lt;p\u0026gt;Link to View Server Build Logs within VCF Operations for Logs: \u0026lt;a href=\u0026#34;\u0026#39; + $finalUrl + \u0026#39;\u0026#34;\u0026gt;Click Here\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026#39; $body += \u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39; # Create the email message $emailMessage = New-Object system.net.mail.mailmessage $emailMessage.From = $fromEmail $emailMessage.To.Add($toEmail) $emailMessage.Subject = $subject $emailMessage.Body = $body $emailMessage.IsBodyHtml = $true # Set to true to send HTML emails # Configure the SMTP client $smtpClient = New-Object system.net.mail.smtpclient($smtpServer, $smtpPort) $smtpClient.EnableSsl = $true # Gmail requires SSL $smtpClient.Credentials = New-Object System.Net.NetworkCredential($fromEmail, $appPassword) # Send the email try { $smtpClient.Send($emailMessage) Write-Host \u0026#34;Email sent successfully.\u0026#34; } catch { Write-Host \u0026#34;Failed to send email: $_\u0026#34; } # Clean up $smtpClient.Dispose() } # Example usage of the email function #Send-ServerBuildEmail -toEmail \u0026#34;dale.hassinger@vcrocs.info\u0026#34; -vmName \u0026#34;vcrocs-w2k22-02\u0026#34; -finalUrl $Global:finalUrl # Function to build URL for VCF Operations for Logs that will auto filter logs based on date|time, VM Name and text function set-filterURL { param ( [string]$appname = \u0026#34;vcf_automation\u0026#34;, [string]$text = \u0026#34;VM Build:\u0026#34;, [string]$vmwEsxiVmName = \u0026#34;vcrocs-w2k22-01\u0026#34; ) # End Param # ----- [ Get current time and 24 hours ago ] ----- # Get the current date and time, add 5 minutes $currentDate = (Get-Date).AddMinutes(5) # Calculate the date and time 24 hours ago $pastDate = (Get-Date).AddHours(-24) # Convert both dates to Unix timestamps in milliseconds $epoch = [datetime]\u0026#34;1970-01-01 00:00:00\u0026#34; # Convert the current date to a Unix timestamp in milliseconds $currentTimestampMillis = [int64](($currentDate.ToUniversalTime() - $epoch).TotalMilliseconds) # Convert the past date (24 hours ago) to a Unix timestamp in milliseconds $pastTimestampMillis = [int64](($pastDate.ToUniversalTime() - $epoch).TotalMilliseconds) # Output the results #\u0026#34;Current time in milliseconds: $currentTimestampMillis\u0026#34; #\u0026#34;24 hours ago in milliseconds: $pastTimestampMillis\u0026#34; # Define the base URL $baseUrl = \u0026#34;https://192.168.6.97/explorer/?existingChartQuery=\u0026#34; # Define the JSON object with placeholders for the parameters $jsonObject = @{ query = \u0026#34;\u0026#34; startTimeMillis = $pastTimestampMillis endTimeMillis = $currentTimestampMillis piqlFunctionGroups = @( @{ functions = @( @{ label = \u0026#34;Count\u0026#34; value = \u0026#34;COUNT\u0026#34; requiresField = $false numericOnly = $false } ) field = $null } ) dateFilterPreset = \u0026#34;LAST_24_HOURS\u0026#34; shouldGroupByTime = $true includeAllContentPackFields = $true eventSortOrder = \u0026#34;DESC\u0026#34; summarySortOrder = \u0026#34;DESC\u0026#34; compareQueryOrderBy = \u0026#34;TREND\u0026#34; compareQuerySortOrder = \u0026#34;DESC\u0026#34; compareQueryOptions = $null messageViewType = \u0026#34;EVENTS\u0026#34; constraintToggle = \u0026#34;ALL\u0026#34; piqlFunction = @{ label = \u0026#34;Count\u0026#34; value = \u0026#34;COUNT\u0026#34; requiresField = $false numericOnly = $false } piqlFunctionField = $null fieldConstraints = @( @{ internalName = \u0026#34;appname\u0026#34; operator = \u0026#34;STARTS_WITH\u0026#34; value = $appname }, @{ internalName = \u0026#34;text\u0026#34; operator = \u0026#34;CONTAINS\u0026#34; value = $text }, @{ internalName = \u0026#34;vmw_esxi_vm_name\u0026#34; operator = \u0026#34;CONTAINS\u0026#34; value = $vmwEsxiVmName } ) supplementalConstraints = @() groupByFields = @() contentPacksToIncludeFields = @() extractedFields = @() } # Convert the object to JSON $jsonString = $jsonObject | ConvertTo-Json -Compress -Depth 10 # URL encode the JSON string $encodedJson = [System.Web.HttpUtility]::UrlEncode($jsonString) # Chart options (URL encoded) $chartOptions = \u0026#34;%7B%22logaxis%22%3Afalse%2C%22trendline%22%3Afalse%2C%22spline%22%3Afalse%7D\u0026#34; # Construct the final URL $global:finalUrl = $baseUrl + $encodedJson + \u0026#34;\u0026amp;chartOptions=\u0026#34; + $chartOptions # Output the final URL #$global:finalUrl Set-Clipboard $global:finalUrl } # End Function # Call Function to build Filter URL Example #$vmName = \u0026#34;vcrocs-w2k22-02\u0026#34; #set-filterURL -vmwEsxiVmName $vmName # Open URL in default browser #Start-Process $global:finalUrl Automation Script Example:\nShows how to use the (3) Functions in the example code above Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 # Load the Create Events, Create URL and Send Email functions script, which will be used for logging events via Aria Operations for Logs API. . /Path-to-Script/aria-operations-for-logs-syslog-api.ps1 # Define the VM name and the script process description $vmName = \u0026#34;vCROCS-W2K22-06\u0026#34; $scriptProcess = \u0026#34;VM Build: \u0026#34; + $vmName # --- Connect to vCenter --- # Define the parameters for connecting to the vCenter Server $ConnectVIServerParams = @{ Server = \u0026#39;192.168.6.100\u0026#39; # vCenter Server IP or FQDN User = \u0026#39;administrator@vcrocs.local\u0026#39; # vCenter Admin Username Password = \u0026#39;VMware1!\u0026#39; # vCenter Admin Password Protocol = \u0026#39;https\u0026#39; # Secure Protocol Force = $true # Force connection even if already connected } # Log the connection attempt to Aria Operations for Logs $text = $scriptProcess + \u0026#34; - Connecting to vCenter Server: \u0026#34; + $ConnectVIServerParams.Server Send-ApiEvent -text $text -vmw_vcenter $ConnectVIServerParams.Server -vmw_esxi_vm_name $vmName # Establish the connection to vCenter $vCenterConnect = Connect-VIServer @ConnectVIServerParams # Log successful connection status to Aria Operations for Logs $text = $scriptProcess + \u0026#34; - Connection to vCenter Server: \u0026#34; + $ConnectVIServerParams.Server + \u0026#34; Successful: \u0026#34; + $vCenterConnect.IsConnected Send-ApiEvent -text $text -vmw_vcenter $ConnectVIServerParams.Server -vmw_esxi_vm_name $vmName # --- Add Your VM Build Steps Here --- # Insert your VM build process code below. This section is a placeholder for any actions you will take on the VM during the build. # Example Log Event - Add specific operations during VM build (e.g., software installation, configuration, etc.) $text = $scriptProcess + \u0026#34; - Installing VCF Operations for Logs Agent\u0026#34; Send-ApiEvent -text $text -vmw_vcenter $ConnectVIServerParams.Server -vmw_esxi_vm_name $vmName # --- Disconnect from vCenter --- # Log the disconnection attempt from vCenter $text = $scriptProcess + \u0026#34; - Disconnecting from vCenter Server\u0026#34; Send-ApiEvent -text $text -vmw_vcenter $ConnectVIServerParams.Server -vmw_esxi_vm_name $vmName # Disconnect from the vCenter Server without confirmation prompts Disconnect-VIServer -Server $ConnectVIServerParams.Server -Confirm:$false # Call Function to build Filter URL set-filterURL -vmwEsxiVmName $vmName # Example usage of the email function Send-ServerBuildEmail -toEmail \u0026#34;dale.hassinger@vcrocs.info\u0026#34; -vmName $vmName -finalUrl $Global:finalUrl Screen Shots: Screen Shot of the VCF Operations for Logs - Filter query and results:\nScreen Shot of the Email with a VCF Operations Log link included:\nScreen Shot of the Email on a mobile device with a VCF Operations Log link included:\nLessons Learned: VCF Operations for Logs is an excellent syslog solution, offering intuitive and user-friendly filtering tools. Always format events in a way that simplifies the creation of filters. Generating the VCF Operations Log URL link makes filtering and viewing events very easy. Links to resources discussed is this Blog Post: VCF Operations for Logs - Official Documentation I created a Google NotebookLM Podcast based on the content of this blog. While it may not be entirely accurate, is any podcast ever 100% perfect, even when real people are speaking? Take a moment to listen and share your thoughts with me!\nvCROCS Deep Dive Podcast | VCF Operations for Logs | How to create URL for Filtering Results\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2024-10-21T00:00:00Z","image":"https://vcrocs.info/vcf-operations-for-logs-how-to-automate-url-generation-for-filtering-results/featured-image_hu_7878a101760145c7.png","permalink":"https://vcrocs.info/vcf-operations-for-logs-how-to-automate-url-generation-for-filtering-results/","title":"VCF Operations for Logs | How to Automate URL Generation for Filtering Results"},{"content":"How to send Automation Script Execution Log Events to VCF Operations for Logs.\nSurround yourself with people that push you to do better. No drama or negativity. Just higher goals and higher motivation. Good times and positive energy. No jealousy or hate. Simply bring out the absolute best in each other. – Warren Buffett\nNote: VCF Operations and Operations for Logs 8.18.0 was used to create this Blog\nI’ve always felt that VCF Operations for Logs deserves more attention, it is a great product. With the Diagnostics Feature (Skyline Replacement) now included in VCF Operations, having VCF Operations for Logs installed (Requirement for Operations Diagnostics Feature) and configured for integration is a game changer. It excites me because now, many of the customers I work with will have access to VCF Operations for Logs in their environment, going beyond just collecting vCenter and ESXi Host logs.\nWhen developing Automation Scripts and processes, I always prioritize execution logging. In the past, I relied on generating text-based log files. However, my latest approach is to route all script logging data directly to VCF Operations for Logs. Once you learn to format the log data in a way that makes it easily searchable, you’ll find yourself wanting to use VCF Operations for Logs for all your logging needs. It transforms log management into an efficient and streamlined process that enhances script visibility and performance monitoring.\nIn this blog, I’ll share some sample script files demonstrating how to send logging information to Log Insight. Sending log data to VCF Operations for Logs via the API is straightforward and requires minimal code. One of the key advantages is that no authentication is needed to send log data, which not only simplifies the scripts but also improves execution speed.\nI’ve also included some sample filter queries that can be used within VCF Operations for Logs. If you’ve read my other blog posts, you’ll know I’m a big fan of creating custom VCF Operations Dashboards to present data in a user-friendly format. My goal is to ensure the data is formatted for quick visibility, allowing you to immediately spot issues that require attention. In this post, I’ll demonstrate how to use the Logs Widget within custom VCF Operations Dashboards to enhance your monitoring and troubleshooting experience.\nExample Code: Code details to make filter queries easier and exact:\nThe parameters in the code are the fields used in VCF Operations for Logs event You will use these fields to filter events Fields in my example code Uri = # API Endpoint to send the event data priority = # Event priority (info, warning, error, etc.) facility = # Source generating the event (user, system, etc.) appname = # Application name logging the event hostname = # Hostname of the system (optional) vmw_esxi_vm_name = # Name of the VM or ESXi host (optional) vmw_vcenter = # Name of the vCenter (optional) vmw_cluster = # Name of the vCenter cluster (optional) vmw_host = # Name of the vCenter Host (optional) Text = # Custom text describing the event Think about how to filter when creating the log events. Don\u0026rsquo;t just add events without making sure a filter can find the precise results. Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # This is a Fuction to send log events to VCF Operations for Logs function Send-ApiEvent { Param ( # Parameters with default values, can be overridden as needed. [string]$Uri = \u0026#39;https://vaol-vip.vcrocs.local:9543/api/v2/events\u0026#39;, # API Endpoint to send the event data. url and port listed. [string]$priority = \u0026#39;info\u0026#39;, # Event priority (info, warning, error, etc.) [string]$facility = \u0026#39;user\u0026#39;, # Source generating the event (user, system, etc.) [string]$appname = \u0026#39;VCF_Automation\u0026#39;, # Application name logging the event [string]$hostname = \u0026#39;NA\u0026#39;, # Hostname of the system (optional) [string]$vmw_esxi_vm_name = \u0026#39;NA\u0026#39;, # Name of the VM or ESXi host (optional) [string]$vmw_vcenter = \u0026#39;NA\u0026#39;, # Name of the vCenter (optional) [string]$vmw_cluster = \u0026#39;NA\u0026#39;, # Name of the vCenter cluster (optional) [string]$vmw_host = \u0026#39;NA\u0026#39;, # Name of the vCenter Host (optional) [string]$Text = \u0026#34;Custom Script execution\u0026#34; # Custom text describing the event ) # End Param # Define headers for the REST API call, using JSON for content type and response format. $headers = @{ \u0026#39;accept\u0026#39; = \u0026#39;application/json\u0026#39; \u0026#39;Content-Type\u0026#39; = \u0026#39;application/json\u0026#39; } # End headers # Construct the JSON body for the API request using a here-string. $body = @\u0026#34; [ { \u0026#34;priority\u0026#34;: \u0026#34;$priority\u0026#34;, \u0026#34;facility\u0026#34;: \u0026#34;$facility\u0026#34;, \u0026#34;appname\u0026#34;: \u0026#34;$appname\u0026#34;, \u0026#34;hostname\u0026#34;: \u0026#34;$hostname\u0026#34;, \u0026#34;vmw_esxi_vm_name\u0026#34;: \u0026#34;$vmw_esxi_vm_name\u0026#34;, \u0026#34;vmw_vcenter\u0026#34;: \u0026#34;$vmw_vcenter\u0026#34;, \u0026#34;vmw_cluster\u0026#34;: \u0026#34;$vmw_cluster\u0026#34;, \u0026#34;vmw_host\u0026#34;: \u0026#34;$vmw_host\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;$Text\u0026#34; } ] \u0026#34;@ # End Body # Send the POST request to the API endpoint within a try-catch block for error handling. try { # Invoke-RestMethod is used to send the API request and return the response. $response = Invoke-RestMethod -Uri $Uri -Method Post -Headers $headers -Body $body -SkipCertificateCheck # Output the API response if successful. Write-Host \u0026#34;API response: \u0026#34; -ForegroundColor Green $response } catch { # Handle any errors that occur during the request and output the error message. Write-Host \u0026#34;Error occurred: $($_.Exception.Message)\u0026#34; -ForegroundColor Red } # End try/catch } # Function End # Example usage of the Send-ApiEvent function. # Customize the message text, add relevant data to $text, and invoke the function. $text = \u0026#34;PowerShell: \u0026#34; + \u0026#34;A new process has been created with ID 9876\u0026#34; Send-ApiEvent -Text $text Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # This is a example script to give you ideas on how to use the function listed above. # Load the Syslog function script, which will be used for logging events via Aria Operations for Logs API. . /Path-To-Script/aria-operations-for-logs-syslog-api.ps1 # Define the VM name and the script process description $vmName = \u0026#34;vCROCS-W2K22-02\u0026#34; $scriptProcess = \u0026#34;VM Build: \u0026#34; + $vmName # --- Connect to vCenter --- # Define the parameters for connecting to the vCenter Server $ConnectVIServerParams = @{ Server = \u0026#39;192.168.6.100\u0026#39; # vCenter Server IP or FQDN User = \u0026#39;administrator@vcrocs.local\u0026#39; # vCenter Admin Username Password = \u0026#39;VMware1!\u0026#39; # vCenter Admin Password Protocol = \u0026#39;https\u0026#39; # Secure Protocol Force = $true # Force connection even if already connected } # Log the connection attempt to Aria Operations for Logs $text = $scriptProcess + \u0026#34; - Connecting to vCenter Server: \u0026#34; + $ConnectVIServerParams.Server Send-ApiEvent -text $text -vmw_vcenter $ConnectVIServerParams.Server -vmw_esxi_vm_name $vmName # Establish the connection to vCenter $vCenterConnect = Connect-VIServer @ConnectVIServerParams # Log successful connection status to vCenter $text = $scriptProcess + \u0026#34; - Connection to vCenter Server: \u0026#34; + $ConnectVIServerParams.Server + \u0026#34; Successful: \u0026#34; + $vCenterConnect.IsConnected Send-ApiEvent -text $text -vmw_vcenter $ConnectVIServerParams.Server -vmw_esxi_vm_name $vmName # --- Add Your VM Build Steps Here --- # Insert your VM build process code below. This section is a placeholder for any actions you will take on the VM during the build. # Example Log Event - Add specific operations during VM build (e.g., software installation, configuration, etc.) $text = $scriptProcess + \u0026#34; - Installing VCF Operations for Logs Agent\u0026#34; Send-ApiEvent -text $text -vmw_vcenter $ConnectVIServerParams.Server -vmw_esxi_vm_name $vmName # --- Disconnect from vCenter --- # Log the disconnection attempt from vCenter $text = $scriptProcess + \u0026#34; - Disconnecting from vCenter Server\u0026#34; Send-ApiEvent -text $text -vmw_vcenter $ConnectVIServerParams.Server -vmw_esxi_vm_name $vmName # Disconnect from the vCenter Server without confirmation prompts Disconnect-VIServer -Server $ConnectVIServerParams.Server -Confirm:$false Filter Examples: See first screen shot for a visual example appname contains vcf_automation text contains VM Build: vmw_esxi_vm_name contains vcrocs-w2k22-02 Screen Shots: Screen Shot of the VCF Operations for Logs - Filter query and results:\nScreen Shot of the VCF Operations Log Analysis - Filter query and results:\nScreen Shot of the VCF Operations custom Dashboard using the Log Widget:\nScreen Shot of a custom VCF Operations for Logs Dashboard:\nDefine the filter to show the information you need. RFC 3164 Code Example: I often say there are many ways to achieve the same outcome. While researching for this blog, I came across examples of sending syslog data to VCF Operations for Logs using the RFC 3164 standard. I created a script, tested it in my lab, and it works well. Personally, I prefer using the VCF Operations for Logs API, but I recognize that others may have a use case for this approach. I’m sharing it here in hopes that it might be helpful to someone.\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 function Send-SyslogMessage { Param ( [string]$IP = \u0026#34;192.168.6.94\u0026#34;, # Default Syslog server IP [int]$Port = 514, # Default Syslog server UDP port [string]$Facility = \u0026#34;syslog\u0026#34;, # Default Syslog facility [string]$Severity = \u0026#34;info\u0026#34;, # Default Syslog severity [string]$Content = \u0026#34;No Content provided\u0026#34;, # Default Message content [string]$SourceHostname = \u0026#34;VCF-Automation\u0026#34;, # Default Hostname [string]$Tag = \u0026#34;PS-Script\u0026#34; # Default Tag for the message ) # Map RFC 3164 facilities to numeric values $facilityMap = @{ kern = 0; user = 1; mail = 2; daemon = 3; auth = 4; syslog = 5; lpr = 6; news = 7; uucp = 8; cron = 9; authpriv = 10; ftp = 11; ntp = 12; audit = 13; alert = 14; clock = 15; local0 = 16; local1 = 17; local2 = 18; local3 = 19; local4 = 20; local5 = 21; local6 = 22; local7 = 23; } # Map RFC 3164 severities to numeric values $severityMap = @{ emerg = 0; alert = 1; crit = 2; err = 3; warn = 4; notice = 5; info = 6; debug = 7; } # Resolve facility and severity values $facilityValue = $facilityMap[$Facility.ToLower()] $severityValue = $severityMap[$Severity.ToLower()] if (-not $facilityValue) { $facilityValue = $facilityMap[\u0026#34;syslog\u0026#34;] } # Default to syslog if (-not $severityValue) { $severityValue = $severityMap[\u0026#34;info\u0026#34;] } # Default to informational # Calculate the syslog priority value $pri = \u0026#34;\u0026lt;\u0026#34; + (($facilityValue * 8) + $severityValue) + \u0026#34;\u0026gt;\u0026#34; # Timestamp in RFC 3164 format $timestamp = (Get-Date).ToString(\u0026#34;MMM dd HH:mm:ss\u0026#34;) # Create the syslog message $header = \u0026#34;$timestamp $SourceHostname \u0026#34; $msg = $pri + $header + $Tag + \u0026#34;: \u0026#34; + $Content # Display the message to be sent # Write-Host \u0026#34;Sending syslog message: $msg\u0026#34; # Convert message to ASCII bytes $byteArray = [System.Text.Encoding]::ASCII.GetBytes($msg) # Send the message via UDP $udpClient = New-Object System.Net.Sockets.UdpClient $udpClient.Connect($IP, $Port) $udpClient.Send($byteArray, $byteArray.Length) | Out-Null $udpClient.Close() $output = \u0026#34;Syslog message sent to \u0026#34; + $IP + \u0026#34;:\u0026#34; + $Port Write-Host $output } # Example usage of the function Send-SyslogMessage -Content \u0026#34;Creating PS Script for Syslog\u0026#34; Lessons Learned: VCF Operations for Logs is an excellent syslog solution, offering intuitive and user-friendly filtering tools. Always format events in a way that simplifies the creation of filters. Explore other products in your environment that can send log events to a syslog server. Make VCF Operations for Logs your company standard for syslog events and so much more\u0026hellip; Leveraging VCF Operations for Logs can be a cost-effective solution if you have VMware Cloud Foundation licenses, as it comes included without any additional cost. A special thanks to Brock Peterson for providing valuable tips and tricks that contributed to the content of this blog. It’s a privilege to work alongside someone who consistently helps the team understand and master the full range of features in the VCF Automation and Operations products. Links to resources discussed is this Blog Post: VCF Operations for Logs - Official Documentation I created a Google NotebookLM Podcast based on the content of this blog. While it may not be entirely accurate, is any podcast ever 100% perfect, even when real people are speaking? Take a moment to listen and share your thoughts with me!\nvCROCS Deep Dive Podcast | VCF Operations for Logs | How to use with Automation Scripts\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2024-10-19T00:00:00Z","image":"https://vcrocs.info/vcf-operations-for-logs-how-to-use-with-automation-scripts/featured-image_hu_d461ab1cacb2d40a.png","permalink":"https://vcrocs.info/vcf-operations-for-logs-how-to-use-with-automation-scripts/","title":"VCF Operations for Logs | How to use with Automation Scripts"},{"content":"How to display important and useful information in the VCF Automation Overview Tab.\nIncluding information in the VCF Automation Deployments Overview Tab creates a user-friendly experience for application owners.\nNote: VCF Automation 8.18.0 was used to create this Blog\nWhen VCF Automation introduced the Overview Tab in Deployments, I quickly began using it in my lab to streamline communication. Previously, I sent emails with crucial details about new server VM builds to the user initiating the deployment. Now, I’ve shifted to adding this information directly into the Deployment Overview Tab.\nHere are some use cases where adding information to the Deployments Overview Tab is beneficial for new Server VMs:\nLinux VMs: For Linux VMs in my lab, I use Cockpit for a web-based interface to monitor server stats, logs, and more. I include the Cockpit URL in the Overview Tab for easy access. VM Specifications: I often include the CPU, memory, and IP details of the VM as it was initially created. This helps answer common questions about how the VM has changed since it was first provisioned. We’ve all experienced situations where a VM was requested with fewer resources than needed, only for resource adjustments to be requested soon after. Monitoring Links: You can also add links to monitoring tools like VCF Operations. This will not show monitoring data but give you quick access to the application GUI. Additional URLs: Any helpful URLs, like management or configuration portals, can be added to enhance accessibility. Links to the applications only. Note: Keep in mind that the information added to the Deployment Tab cannot be edited later, so avoid including details that may change frequently.\nScreen Shots Screen Shot of the VCF Automation Deployment Overview Tab:\nScreen Shot of the Assembler Template:\nVCF Automation Design Template Example Template Yaml Code:\nTo utilize the Overview Tab, you MUST include \u0026ldquo;formatVersion: 2\u0026rdquo;. Refer to the example code below. The “outputs:” section in the YAML defines the data displayed in the Overview Tab. You can incorporate “${input.xxx}” values to display specific data in the Overview Tab. Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 formatVersion: 2 name: Rocky-Basic outputs: __deploymentOverview: value: | **The following vSphere Virtual Machine has been provisioned with VMware VCF Automation.** **Original Build Specs Used:** IP: ${input.IP} Memory(MB): ${input.totalMemoryMB} CPU (Count): ${input.cpuCount} Core (Count): ${input.coreCount} **Connect to Server using Cockpit:** http://${input.IP}:9090 **Check out these Blogs for Updates/Tips/Tricks on the VMware VCF Operations/Automation Products:** **Brock Peterson:** https://www.BrockPeterson.com **Dale Hassinger:** https://www.vCROCS.info **Cosmin Trif:** https://www.cosmin.gq **Link to vCROCS VCF Operations:** https://vao.vcrocs.local **Link to vCROCS VCF Operations for Logs:** https://vaol.vcrocs.local #cloud-config inputs: CustomizationSpec: type: string description: Customization Specification default: LINUX title: CustomizationSpec VMName: type: string title: VM Name minLength: 1 maxLength: 15 default: DB-ROCKY-203 IP: type: string default: 192.168.5.203 totalMemoryMB: type: integer title: Memory(MB) default: 1024 cpuCount: type: integer title: CPU (count) default: 1 coreCount: type: integer title: Core (count) default: 1 folderName: type: string title: vCenter Folder default: Rocky-Linux enum: - Rocky-Linux - ESXi-01-VMs - ESXi-02-VMs resources: Network_VMs: type: Cloud.vSphere.Network properties: name: PG-VMs networkType: existing constraints: - tag: Network:VM vCenter_Rocky: type: Cloud.vSphere.Machine properties: image: ROCKY9 #flavor: SM totalMemoryMB: ${input.totalMemoryMB} cpuCount: ${input.cpuCount} coreCount: ${input.coreCount} name: ${input.VMName} fqdn: ${input.VMName}.vcrocs.local folderName: Rocky-Linux remoteAccess: authentication: usernamePassword username: root password: ${secret.administrator} customizationSpec: ${input.CustomizationSpec} constraints: - tag: VPZ:VM networks: - network: ${resource.Network_VMs.id} assignment: static address: ${input.IP} Lessons learned: The Deployment Overview Tab is an excellent tool for displaying static key information about VM server builds. Adding URLs to the deployment Overview Tab provides a convenient way to connect directly to the VM for management. Links to resources discussed is this Blog Post: Specifying formatVersion in your Automation Assembler cloud template I created a Google NotebookLM Podcast based on the content of this blog. While it may not be entirely accurate, is any podcast ever 100% perfect, even when real people are speaking? Take a moment to listen and share your thoughts with me!\nvCROCS Deep Dive Podcast | VCF Automation Overview Tab\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2024-10-12T00:00:00Z","image":"https://vcrocs.info/vcf-automation-deployments-overview-tab/featured-image_hu_62b10ee0c1b9263e.png","permalink":"https://vcrocs.info/vcf-automation-deployments-overview-tab/","title":"VCF Automation Deployments | Overview Tab"},{"content":"How to show ESXi Tiered Memory Metrics in VCF Operations.\nUsing VCF Operations Management Pack Builder alongside a product like FastAPI will elevate your observability to a whole new level\u0026hellip;\nHere’s a use case that demonstrates the powerful capabilities of the VCF Operations Manager Pack Builder in your environment. With the introduction of Tiered Memory in ESXi 8.0.3, VMware hasn’t yet integrated tiered memory metrics visibility for VMs using tiered memory into VCF Operations. However, William Lam has provided a Blog outlining the necessary commands to retrieve the tiered memory metrics. Click here to see Blog\nTo build an Operations Management Pack (MP) that captures this data, you need to utilize APIs. In my approach, I used FastAPI to execute a PowerShell Script that connects to vCenter to gather a list of ESXi hosts. The script then establishes an SSH connection to each host, retrieves the VM tiered memory metrics, and sends the results back to FastAPI. These metrics are then made available for Management Pack Builder, allowing you to incorporate the new metrics into the existing VM object within Operations.\nOnce the VM tiered memory metrics are available in Operations, you can create some impressive dashboards to display this information. These dashboards provide a clear, visual representation of how tiered memory is being utilized across your environment, giving you deeper insights and making it easier to monitor and optimize performance.\nUsing a tool like FastAPI to provide additional metrics to Operations opens up a world of possibilities. Once you understand the steps involved, your thought process becomes your most powerful observability tool. This approach empowers you to extend the capabilities of Operations, allowing you to gather and visualize critical metrics that might not be available out of the box.\nTo get started, you’ll need to set up a server with FastAPI installed. In my lab, I created a Rocky Linux 9.4 VM and installed the latest version of FastAPI. Additionally, I installed the latest version of PowerShell along with the VMware PowerCLI and Posh-SSH modules, enabling the necessary functionality for this setup.\nTo create and edit code on my Rocky Linux server, I prefer using the Remote SSH add-in for VSCode, which I have installed on my Apple MacBook. This approach allows me to avoid using the graphical version of Rocky Linux Server, keeping the setup lean and mean. I use PowerShell on Linux servers all the time—I’ve loved it ever since PowerShell became cross-platform.\nWhile working on this blog and sharing links to the discussed resources, I came across another post by William Lam that also explains how to retrieve Host Tiered Memory settings. I adapted William\u0026rsquo;s script to work with MPB and added the new properties to my FastAPI Management Pack. Click here to see Blog\nI encourage you to install the VCF Operations Management Pack Builder appliance and download the MP export file linked at the end of this blog. My goal is for you to understand how Management Packs (MPs) work. While simply using a pre-built MP is easy, taking the time to learn how this MP works will inspire you with new ideas for integrating properties and metrics from other products into your enterprise environment.\nFastAPI The steps I used to install FastAPI on Rocky Linux Server 9.4:\nA very simple process to install FastAPI and get started. Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # Update the System: sudo dnf update -y # Install Python: sudo dnf install python3 -y # Install Pip (Python Package Manager): sudo dnf install python3-pip -y # Install FastAPI and Uvicorn: pip3 install fastapi uvicorn # Create a Sample FastAPI Application: nano app.py # Add the following content to app.py: from fastapi import FastAPI app = FastAPI() @app.get(\u0026#34;/\u0026#34;) def read_root(): return {\u0026#34;Hello\u0026#34;: \u0026#34;World\u0026#34;} # You can run your app using uvicorn: uvicorn app:app --host 0.0.0.0 --port 8000 # Your FastAPI app should now be accessible at: http://\u0026lt;your_server_ip\u0026gt;:8000 FastAPI application python code: URLs used in my Lab:\nFor VM Tiered Memory you would use http://192.168.6.83:8000/tieredVM You can have many urls. See the sample FastAPI Python code. To return simple json information use http://192.168.6.83:8000/ To run a PowerShell script to get Host Tiered Memory settings http://192.168.6.83:8000/tieredHost I converted the data to json in the PowerShell Script. I wanted FastAPI to just return plaintext. See the Python code on how to do this. Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import subprocess from fastapi import FastAPI from fastapi.responses import PlainTextResponse app = FastAPI() @app.get(\u0026#34;/\u0026#34;) def read_root(): return {\u0026#34;Hello\u0026#34;: \u0026#34;Welcome to the FastAPI Server by vCROCS!\u0026#34;} @app.get(\u0026#34;/tieredVM\u0026#34;) async def run_powershell_script(): try: # Run the PowerShell script and capture the output result = subprocess.run([\u0026#34;pwsh\u0026#34;, \u0026#34;-File\u0026#34;, \u0026#34;/root/tieredVM.ps1\u0026#34;], capture_output=True, text=True) # Check if there\u0026#39;s an error in the execution if result.returncode != 0: return PlainTextResponse(content=result.stderr, status_code=500) # Return the raw output from the PowerShell script without modification return PlainTextResponse(content=result.stdout.strip()) except Exception as e: return PlainTextResponse(content=str(e), status_code=500) @app.get(\u0026#34;/tieredHost\u0026#34;) async def run_powershell_script(): try: # Run the PowerShell script and capture the output result = subprocess.run([\u0026#34;pwsh\u0026#34;, \u0026#34;-File\u0026#34;, \u0026#34;/root/tieredHost.ps1\u0026#34;], capture_output=True, text=True) # Check if there\u0026#39;s an error in the execution if result.returncode != 0: return PlainTextResponse(content=result.stderr, status_code=500) # Return the raw output from the PowerShell script without modification return PlainTextResponse(content=result.stdout.strip()) except Exception as e: return PlainTextResponse(content=str(e), status_code=500) PowerShell Script PowerShell script to collect the VM Tiered Memory metrics from the ESXi Hosts:\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 # The Posh-SSH and VMware PowerCLI modules are required to run this script # Import the Posh-SSH and VMware PowerCLI modules #Import-Module Posh-SSH #Import-Module VMware.PowerCLI # Define parameters for the Connect-VIServer cmdlet using splatting. Use a more secure method for passwords. $ConnectionParams = @{ Server = \u0026#34;192.168.6.100\u0026#34; User = \u0026#34;administrator@vcrocs.local\u0026#34; Password = \u0026#34;VMware1!\u0026#34; Force = $true } # Connect to the vCenter Server $vCenter = Connect-VIServer @ConnectionParams # Get all ESXi hosts in the vCenter $esxiHosts = Get-VMHost # Create an empty array to store combined results $combinedResults = @() # Loop through each host foreach ($esxiHost in $esxiHosts) { # Define ESXi SSH connection details $server = $esxiHost.Name $username = \u0026#34;root\u0026#34; $password = \u0026#34;VMware1!\u0026#34; # Use a more secure method for passwords # Convert the password to a SecureString and create a PSCredential object $securePassword = ConvertTo-SecureString -String $password -AsPlainText -Force $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword) # Try to establish an SSH session, skip host if connection fails Try { #Write-Host \u0026#34;Attempting to connect to $server...\u0026#34; $sshSession = New-SSHSession -ComputerName $server -Credential $credential -AcceptKey -ErrorAction Stop #Write-Host \u0026#34;Connected to $server.\u0026#34; } Catch { #Write-Host \u0026#34;Failed to connect to $server. Skipping host...\u0026#34; -ForegroundColor Yellow Continue } # If SSH session is successful, execute the commands if ($sshSession) { # Define and execute the first SSH command to get the VMX Cartel IDs and Display Names $vmCommand = \u0026#34;esxcli --formatter csv vm process list | cut -d \u0026#39;,\u0026#39; -f 2,5\u0026#34; $vmResult = Invoke-SSHCommand -SessionId $sshSession.SessionId -Command $vmCommand $VMXCartelID = $vmResult.Output | ConvertFrom-Csv # Define and execute the second SSH command to get memory statistics $memCommand = \u0026#39;memstats -r vmtier-stats -u mb -s name:memSize:active:tier0Consumed:tier1Consumed\u0026#39; $memResult = Invoke-SSHCommand -SessionId $sshSession.SessionId -Command $memCommand # Process the memory statistics output $lines = $memResult.Output -split \u0026#34;`n\u0026#34; | ForEach-Object { $_.Trim() } | Where-Object { $_ -notmatch \u0026#39;^-{2,}|Total|Start|No.|VIRTUAL|Unit|Selected\u0026#39; } # Regex pattern for memory statistics $pattern = \u0026#39;^(?\u0026lt;name\u0026gt;\\S+)\\s+(?\u0026lt;memSize\u0026gt;\\d+)\\s+(?\u0026lt;active\u0026gt;\\d+)\\s+(?\u0026lt;tier0Consumed\u0026gt;\\d+)\\s+(?\u0026lt;tier1Consumed\u0026gt;\\d+)$\u0026#39; # Array to store parsed memory stats $tieredMEM = @() # Parse the memory stats foreach ($line in $lines) { if ($line -match $pattern) { $tieredMEM += [pscustomobject]@{ Name = $matches[\u0026#39;name\u0026#39;] vm_MemSize_MB = [int]$matches[\u0026#39;memSize\u0026#39;] vm_Active_Mem_MB = [int]$matches[\u0026#39;active\u0026#39;] \u0026#34;vm_Tier0_RAM_MB\u0026#34; = [int]$matches[\u0026#39;tier0Consumed\u0026#39;] \u0026#34;vm_Tier1_NVMe_MB\u0026#34; = [int]$matches[\u0026#39;tier1Consumed\u0026#39;] } } } # Remove \u0026#39;vm.\u0026#39; prefix from each VM Name $tieredMEM | ForEach-Object { $_.Name = $_.Name -replace \u0026#39;^vm\\.\u0026#39;, \u0026#39;\u0026#39; } # Create a hashtable for easy mapping of VMX Cartel IDs to Display Names $vmNameMap = @{} foreach ($entry in $VMXCartelID) { $vmNameMap[$entry.VMXCartelID] = $entry.DisplayName } # Replace the Name field in $tieredMEM with the corresponding DisplayName foreach ($vm in $tieredMEM) { if ($vmNameMap.ContainsKey($vm.Name)) { $vm.Name = $vmNameMap[$vm.Name] } } # Filter out rows where the Name starts with \u0026#34;vCLS-\u0026#34; $tieredMEM = $tieredMEM | Where-Object { $_.Name -notlike \u0026#34;vCLS-*\u0026#34; } # Append the results from this host to the combined results array $combinedResults += $tieredMEM # Close the SSH session for this host $removeSession = Remove-SSHSession -SessionId $sshSession.SessionId } } # Convert the combined result to json $returnData = $combinedResults | ConvertTo-Json -Compress return $returnData # Disconnect from vCenter Disconnect-VIServer -Confirm:$false PowerShell script to collect the Host Tiered Memory Properties:\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Most of this Code from William Lam Blog Post # https://williamlam.com/2024/10/useful-nvme-tiering-reporting-using-vsphere-8-0-update-3-apis.html # I changed the code to test in my Lab. Select all hosts 8.0.3 or greater. Convert results to json to work with MPB. # Define parameters for the Connect-VIServer cmdlet using splatting $ConnectionParams = @{ Server = \u0026#34;192.168.6.100\u0026#34; User = \u0026#34;administrator@vcrocs.local\u0026#34; Password = \u0026#34;VMware1!\u0026#34; Force = $true } # Connect to the vCenter Server $vCenter = Connect-VIServer @ConnectionParams $vmHosts = Get-VMhost | Where-Object {$_.Version -ge \u0026#34;8.0.3\u0026#34;} | Sort-Object Name $results = @() foreach ($vmhost in $vmHosts) { $hostID = $vmhost.Id $hostID = $hostID.Replace(\u0026#34;HostSystem-\u0026#34;, \u0026#34;\u0026#34;) $tieringType = $vmhost.ExtensionData.Hardware.memoryTieringType $totalMemory = [math]::round($vmhost.ExtensionData.Hardware.MemorySize /1GB,2).ToString() + \u0026#34; GB\u0026#34; $tieringRatio = ($vmhost | Get-AdvancedSetting Mem.TierNvmePct).Value.toString() + \u0026#34;%\u0026#34; $tieringEnabled = $false if($tieringType -eq \u0026#34;softwareTiering\u0026#34;) { $tieringEnabled = $true $dramTotal = [math]::round(($vmhost.ExtensionData.Hardware.MemoryTierInfo | Where-Object {$_.Name -eq \u0026#34;DRAM\u0026#34;}).Size /1GB,2).ToString() + \u0026#34; GB\u0026#34; $nvmeTotal = [math]::round(($vmhost.ExtensionData.Hardware.MemoryTierInfo | Where-Object {$_.Name -eq \u0026#34;NVMe\u0026#34;}).Size /1GB,2).ToString() + \u0026#34; GB\u0026#34; $storageSystem = Get-View $vmhost.ExtensionData.ConfigManager.StorageSystem $nvmeDevice = ($storageSystem.StorageDeviceInfo.ScsiLun | where {$_.UsedByMemoryTiering -eq $true}).CanonicalName } else { $dramTotal = $totalMemory $nvmeTotal = 0 $nvmeDevice = \u0026#34;N/A\u0026#34; } $tmp = [pscustomobject] @{ Id = $hostID VMHost = $vmhost.Name TieringEnabled = $tieringEnabled TieringRatio = $tieringRatio DRAMMemory = $dramTotal NVMeMemory = $nvmeTotal TotalSystemMemory = $totalMemory NVMeDevice = $nvmeDevice } $results+=$tmp } $results | ConvertTo-Json -Compress # Disconnect from vCenter Disconnect-VIServer -Confirm:$false VCF Operations: These metrics will allow you to create some great operational insights, including cool dashboards. MP Builder Details: The following screen shots are all the details I used to create the MP I presented at VMware Explore 2024, and one of the sessions includes a video on MP Builder. I recommend checking it out to get more familiar with MPB. Link to session | CODE1161LV Brock Peterson has a great Blog on building a MP. Link to Blog After building and saving the MP, you need to import into VCF Operations Repository and add account. I show those details in my VMware Explore session video. Lessons learned: Incorporating a FastAPI server adds an additional layer to your observability environment, but the capabilities it unlocks are remarkable. It enables you to gather and serve custom metrics, offering greater flexibility and control over your monitoring and performance analysis. This approach not only enhances visibility but also provides powerful tools to extend the insights available in your environment. Just because products don’t offer APIs out of the box for the metrics you need doesn’t mean you’re limited. You can always leverage custom scripts to gather the data you want. By combining tools like PowerShell, SSH, and FastAPI, you can extract and integrate those custom metrics into your observability platform, giving you the flexibility to get exactly the insights you need. Links to resources discussed is this Blog Post: Download Link for the MP Export File, Dashboard and Views FastAPI Rocky Linux | Downloads VCF Operations | Management Pack Builder | Download Brock Peterson Blogs | Great place to get Dashboard Ideas and see MPB examples In my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nAlways test new setups and processes, like those discussed in this blog, in a lab environment before implementing them in a production environment.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day.\n","date":"2024-10-05T00:00:00Z","image":"https://vcrocs.info/vcf-operations-dashboard-esxi-tiered-memory/featured-image_hu_24f7a5dc034a534.png","permalink":"https://vcrocs.info/vcf-operations-dashboard-esxi-tiered-memory/","title":"VCF Operations Dashboard | ESXi Tiered Memory"},{"content":"VMware Explore 2024 was the best conference that I\u0026rsquo;ve ever attended.\nHock Tan\u0026rsquo;s message to VMware customers was clear: \u0026ldquo;Your Success represents Our Success!\u0026rdquo;\nVMware Explore 2024 As a customer attending VMware Explore, I always thought about presenting and sharing the knowledge I\u0026rsquo;ve gained from working with VMware products with the vCommunity. This year, that thought became a reality. I presented one general session, three {code} theater sessions, and presented or co-presented seven {code} lab sessions. Presenting all day at a technology conference leaves you exhausted by the end of the day!\nOne of my sessions, \u0026lsquo;Maximizing VMware Workstation/Fusion for Business, Education, and Home Labs\u0026rsquo; (CODE1162LV), was highlighted in an article by Virtualization and Cloud Review, and it received positive feedback.\u0026quot;\n\u0026ldquo;One session that I got a lot out of was a VMware Code session entitled \u0026ldquo;Maximizing VMware Workstation/Fusion for Business, Education, and Home Labs\u0026rdquo; [CODE1162LV]. The presenter, Dale Hassinger, VCF Specialist Architect, Broadcom, showed how to work with VMware Workstation using APIs, something that I have never done before but plan on doing so after attending his session.\u0026rdquo; - Virtualization and Cloud Review\nBeing the only session mentioned by name in the Virtualization and Cloud Review article was a proud moment for me as a presenter. We put a lot of time and effort into our presentations, so receiving recognition from a writer for Virtualization and Cloud Review feels really good.\nI enjoy presenting in the {code} Theatre because those sessions were where I learned a lot as a customer, and I want to give back to the {code} community. I also enjoy working with Franky Barragan, the VMware {code} Community Manager. When you talk with Franky, you can hear the passion he has for the {code} community in every conversation. Franky also did an awesome job organizing the Hackathon!\nThis year, I had the opportunity to co-present with a customer, Don Horrox. Don is a systems engineer, and the team he works with has implemented some impressive use cases with the VCF Automation and Operations products. Our session received excellent survey reviews. Don and his teammate, Amos Clerizier, were also part of my Hackathon team. They had a great time and contributed a lot of fantastic ideas. Amos wrote a powerful script that takes RVTools data, de-identifies it, sends it to ChatGPT for prompts, and then re-identifies the data to display the results. One of the judges even referred to this process as HybridAI.\nHackathon The Hackathon was another highlight of the event for me. I served as a team captain, and we finished in 2nd place with our team, \u0026lsquo;RVTools and Ollama\u0026rsquo;. This marks the second year in a row that I\u0026rsquo;ve secured 2nd place as a team captain. Our Hackathon team used a GitHub repository to share ideas, discussions, and code. Click here to see what we were able to \u0026lsquo;hack\u0026rsquo;.\nEvery time I\u0026rsquo;ve been involved in the Hackathon, I\u0026rsquo;ve met people with amazing ideas. After the Hackathon, we usually stay in touch through social media or direct communication. These friendships are ones that will last a lifetime.\nI had the opportunity to meet several of my colleagues in person, which is always a great experience. It was nice to shake hands and personally thank them for all the help they\u0026rsquo;ve provided over the past year. One evening, I had a nice dinner with Cosmin Trif, one of the best co-workers I\u0026rsquo;ve had in my career. He has been helping me since my days as a VMware customer. My whole VCF Specialists Team is an awesome group!\n1:1 meetings with PMs VMware Explore provides VMware customers with the opportunity to talk directly with product managers, and these face-to-face meetings, whether as a customer or an employee, have always been valuable. This year, I attended one of these meetings to discuss VCF operations. During the discussion, the customer got a sneak peek at the VCF 9 UI. They were impressed and had nothing but positive comments about the product\u0026rsquo;s direction.\nVenetian Conference Center The Venetian Conference Center is great because it offers the convenience of having everything under one roof. The rooms are comfortable, and the conference food for breakfast and lunch was particularly good this year. There are also plenty of options for a nice dinner. I had dinner at Delmonico one evening, and as always, the food was excellent.\nMy VMware Explore 2024 Sessions When and Where:\nWebsite: VMware Explore 2024.\nLas Vegas Date: August 26 – 29, 2024\nThe Venetian Convention and Expo Center\nIf you attended my VMware Explore Sessions and want to watch the recordings again, here are the links. If you were unable to attend VMware Explore, feel free to click these links to see what you missed. The Session IDs are links to the recordings.\nSession Recordings: Streamlining Healthcare with Automation: How VMware Can Help | INDB1917LV\nIn this session, learn to elevate your automation game. Join us to discover practical strategies for boosting your team\u0026rsquo;s efficiency. 1) Automate Windows and Linux VM builds 2) Streamline Day 2 tasks like snapshots and reboots 3) Enhance security incident management by configuring Aria Operations for Logs to alert on log analysis, and 4) Automate snapshot deletion and power operations using Aria Operations Automation Central. Session Survey Feedback - What would you improve about the session? \u0026ldquo;Very informative and got my creative juices going.\u0026rdquo; \u0026ldquo;Positives with showing real world experience\u0026rdquo; \u0026ldquo;Nothing, Dale and Don gave great real world examples and I walked away with actionable knowledge I can use to improve my own VMware environment.\u0026rdquo; \u0026ldquo;I am a little more open to the snapshot cleanup feature and server decommissioning.\u0026rdquo; \u0026ldquo;Had a great time!\u0026rdquo; \u0026ldquo;Great presentation\u0026rdquo; Transform VCF Automation Inputs to ABX and Orchestrator Workflow Variables | CODE1164LV\nMaster the art of converting any VCF Aria Automation template input into a dynamic variable for ABX or Orchestrator Workflows. This session will guide you through the process of turning inputs into versatile properties, ready to be integrated as parameters for any script. Unlock the potential to automate virtually any task within your infrastructure. By the end of this session, you\u0026rsquo;ll realize that your creativity in variable use is the most powerful automation tool at your disposal. Session Survey Feedback - What would you improve about the session? \u0026ldquo;Nothing this is one of the best sessions and speakers available\u0026rdquo; Maximizing VMware Workstation/Fusion for Business, Education, and Home Labs | CODE1162LV\nExplore the versatility of VMware Workstation and Fusion for diverse applications within your setup. Discover my personal methodology for leveraging Workstation/Fusion to evaluate software on virtual machines, conduct nested ESXi for educational purposes, or operate Linux VMs on Windows or Mac laptops. Delve into the included Workstation/Fusion APIs as a resource for automation education. I\u0026rsquo;ll demo PowerShell Functions I developed, using the APIs, for efficient VM management on Workstation/Fusion. Session Survey Feedback - What would you improve about the session? \u0026ldquo;Great information. Should keep on presenting this information.\u0026rdquo; Integrate status.broadcom.com Alerts into VCF via Tailored Management Pack | CODE1161LV\nDiscover the process of building a custom VCF Aria Operations Management Pack for displaying and alerting on VMware and Broadcom components. Utilize data from status.broadcom.com to transform Aria Operations into your central management hub. Plus, gain insights into both upcoming and past Notices for the tracked services. The session will feature demonstrations of customized Dashboards, Views, and Alert configurations. Session Survey Feedback - What would you improve about the session? \u0026ldquo;None - instructor did a great job with the time allowed.\u0026rdquo; \u0026ldquo;Great presentation. Wished the session was longer to get more details.\u0026rdquo; {code} Lab: Advanced Lab Using ChatGPT To Write Powershell Automation | CODE2554LV (No Recordings of these Sessions)\nI also co-presented and presented several sessions in the {code} Labs with Eric Nielsen, where we demonstrated advanced ChatGPT prompting and how to use the OpenAI API. These sessions were fully booked every day. Links to resources discussed is this Blog Post: VMware Explore 2024. All VMware Explore 2024 Recorded General Sessions All VMware Explore 2024 Recorded {code} Sessions VMware Explore 2024 Video | See a brief shot of me doing one of my presentations in the {code} Theatre VMware Community space in The Hub\nVMware Explore 2024 Pics | Sessions, Hackathon, Swag, Prizes, More\u0026hellip; Sessions: Hackathon: Colleagues/Friends: Swag/Prizes: Final Thoughts: I hope I get the opportunity to do it all again next year. VMware Explore is always one of my favorite weeks of the year. I appreciate the chance to give back to the vCommunity, which I believe is incredibly strong. I\u0026rsquo;ve never encountered another user group where the members are as passionate about a product as the VMware community is.\nI created a Google NotebookLM Podcast based on the content of this blog. While it may not be entirely accurate, is any podcast ever 100% perfect, even when real people are speaking? Take a moment to listen and share your thoughts with me!\nVMware Explore 2024 - AI Podcast of my Blog\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day. ","date":"2024-08-30T00:00:00Z","image":"https://vcrocs.info/vmware-explore-2024-my-insights-session-recording-links-and-pics/featured-image_hu_9bae6ee07e74f048.png","permalink":"https://vcrocs.info/vmware-explore-2024-my-insights-session-recording-links-and-pics/","title":"VMware Explore 2024 | My Insights, Session Recording Links and PICs"},{"content":"Highly Successful Event and a very positive customer discussion about VMware Cloud Foundation\nOn July 12, 2024, the Healthcare Virtualization Community (HVC) hosted an in-person event for Healthcare Organizations in and around the Philadelphia Area. Some attendees traveled 2+ hours to attend. The event brought together professionals from various hospitals and medical institutions.\nThe HVC events have been running since 2011, providing a platform for healthcare IT professionals to connect, learn, and share knowledge. I personally started attending in 2013. An easy way to describe the HVC events for people within the VMware vCommunity, it’s like a VMUG for Healthcare without any sales pitches and the content is driven by the people attending. Healthcare organizations all have similar rules and requirements with their IT infrastructure, so attending the HVC events have been a great way to learn what other people do, share what you do and build vCommunity relationships.\nThis event was particularly significant as it marked the first in-person gathering after a hiatus caused by COVID-19 restrictions and the acquisition of VMware by Broadcom. With these changes behind us, the VMware Healthcare Teams in the area thought it would be a good time to start up the HVC events again. VMware customers ask for these events to be scheduled. They enjoy attending the events to learn from each other.\nWhat I personally witnessed yesterday at the VMware HVC event, was that the culture that surrounds the VMware Products is alive and well.\nHere are my Key Takeaways: A VMware Healthcare Customer took the time out of their busy schedule to tell their story and journey with VCF, that started in 2021. The good and the bad were discussed. I can honestly say that the customers pointed out that there was more positive than negative. One example was upgrades and patching. Far less time spent doing these activities. Engineers spend more time doing Engineering work. Upgrades and patching become more of a monitoring activity. Everyone was shaking hands, hugs, laughing, and just catching up. Attendees engaged in lively discussions, networking, and sharing project updates. The food and drink provided was awesome. The event had zero negativity, reflecting a strong sense of community among the attendees. Personal Highlights: I was able to meet a co-worker that I have known for almost 5 years, in person. Brock Peterson and I are both VCF Aria Specialists. We help VMware Healthcare and Life Sciences customers with Automation, Monitoring and Logging. Brock has been a Role Model/Mentor of mine and it was nice to personally say thanks for all the help he has provided these past couple of years and being a valuable resource for me. If you use the VMware product Aria Operations (vROPS), I can guarantee you have read at least one of the awesome blogs that he has written about the product. The event\u0026rsquo;s organizers, Marcus Roberts and Dan Thomas, deserve special recognition for their hard work in making the event a success. Marcus provided a good conversation at the beginning of the event to give everyone updates and Dan had great fireside chat with the customer discussing their VCF journey, see pic below. Customer Review of the HVC Event: LinkedIn Post\nHere are some pics from the event to enjoy.: Brock Peterson and Dale Hassinger: Dan Thomas having a Fireside Chat: HVC Community: HVC Community: VMware by Broadcom Team: If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2024-07-13T00:00:00Z","image":"https://vcrocs.info/vmware-the-hvc-community-remains-strong-and-active/featured-image_hu_a32af80e7a5225d2.png","permalink":"https://vcrocs.info/vmware-the-hvc-community-remains-strong-and-active/","title":"VMware | The HVC Community remains strong and active"},{"content":"I am presenting (4) sessions at VMware Explore 2024.\n\u0026ldquo;Technology can amplify your message, but the real power of a presentation lies in the connection you make with your audience. Remember, it\u0026rsquo;s not the slides or the software that will leave a lasting impact—it\u0026rsquo;s your passion and the story you tell.\u0026rdquo; - ChatGPT\nMy VMware Explore 2024 Sessions When and Where:\nWebsite: VMware Explore 2024.\nLas Vegas Date: August 26 – 29, 2024\nThe Venetian Convention and Expo Center\nUpdated: 07/22/2024\nI\u0026rsquo;m thrilled to announce that I will be presenting four sessions at VMware Explore 2024! Note that two of the VMware {code} sessions have been combined into consecutive presentations, ensuring that all material is covered in these updated sessions. My journey to this moment began at the Mid-Atlantic HVC (Healthcare Virtualization Community) events. I initially attended these events as a VMware customer eager to learn. Eventually, I was invited to present on the automation work I was doing with VMware Products. Though nerve-wracking, my first presentation was a success, and the positive feedback encouraged me to start my blog, sharing knowledge with the vCommunity.\nAfter countless blog posts and community events, I\u0026rsquo;m now honored to present a General Session at VMware Explore 2024. For those in the VMware community, this is the pinnacle of recognition and opportunity. I\u0026rsquo;m excited to bring my passion for VMware products to these sessions, and I invite you to sign up and join me. I\u0026rsquo;ll do my best to share valuable insights and help you enhance your environments. Check out the links to my sessions below and in the VMware Explore 2024 Content Catalog. Hope to see you in Vegas!\nSessions: Streamlining Healthcare with Automation: How VMware Can Help | INDB1917LV In this session, learn to elevate your automation game. Join us to discover practical strategies for boosting your team\u0026rsquo;s efficiency. 1) Automate Windows and Linux VM builds 2) Streamline Day 2 tasks like snapshots and reboots 3) Enhance security incident management by configuring Aria Operations for Logs to alert on log analysis, and 4) Automate snapshot deletion and power operations using Aria Operations Automation Central. I\u0026rsquo;m excited to announce that Don Horrox, Systems Engineer, will be co-presenting with me in this session. I met Don when he was a VMware customer that I worked with and was immediately impressed by his passion for VMware products. Together, we have prepared some great content to share with everyone on their automation journey. Check out Don\u0026rsquo;s blog, vChamp, to see what he has been sharing with the vCommunity. Transform VCF Automation Inputs to ABX and Orchestrator Workflow Variables | CODE1164LV Master the art of converting any VCF Aria Automation template input into a dynamic variable for ABX or Orchestrator Workflows. This session will guide you through the process of turning inputs into versatile properties, ready to be integrated as parameters for any script. Unlock the potential to automate virtually any task within your infrastructure. By the end of this session, you\u0026rsquo;ll realize that your creativity in variable use is the most powerful automation tool at your disposal. After attending this session, you\u0026rsquo;ll be inspired to automate everything in your environment. Discover how easy it is to automate any task. Your thought process will become the most powerful automation tool you\u0026rsquo;ll have after this session. Maximizing VMware Workstation/Fusion for Business, Education, and Home Labs | CODE1162LV Explore the versatility of VMware Workstation and Fusion for diverse applications within your setup. Discover my personal methodology for leveraging Workstation/Fusion to evaluate software on virtual machines, conduct nested ESXi for educational purposes, or operate Linux VMs on Windows or Mac laptops. Delve into the included Workstation/Fusion APIs as a resource for automation education. I\u0026rsquo;ll demo PowerShell Functions I developed, using the APIs, for efficient VM management on Workstation/Fusion. My goal with this session is to assist everyone from beginners in virtualization to those looking to enhance their daily automation tasks. You\u0026rsquo;ll learn how to set up a powerful home lab and leverage APIs to advance your coding skills. Integrate status.broadcom.com Alerts into VCF via Tailored Management Pack CODE1161LV Discover the process of building a custom VCF Aria Operations Management Pack for displaying and alerting on VMware and Broadcom components. Utilize data from status.broadcom.com to transform Aria Operations into your central management hub. Plus, gain insights into both upcoming and past Notices for the tracked services. The session will feature demonstrations of customized Dashboards, Views, and Alert configurations. I\u0026rsquo;ll walk you through creating a VMware Aria Management Pack using the MP Builder tool. By following along with the example, you\u0026rsquo;ll be able to recreate the same Management Pack and use it in your own environment. Link to all my sessions in the VMware Explore 2024 Content Catalog\nSession Details: Links to resources discussed is this Blog Post: VMware Explore 2024. VMware Explore 2024 | Registration Link. If you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day. ","date":"2024-06-20T00:00:00Z","image":"https://vcrocs.info/vmware-explore-2024-my-sessions/featured-image_hu_5fdfc6fddfcf77fa.png","permalink":"https://vcrocs.info/vmware-explore-2024-my-sessions/","title":"VMware Explore 2024 | My Sessions"},{"content":"How to Allocate CPU and Memory for VMs Using T-Shirt Sizes or Custom Values\n\u0026ldquo;Always deliver more than expected.” - Larry Page (Co-founder of Google)\nVMware Aria Automation | VM | CPU and Memory Recently, I was asked how to create new VMs using T-Shirt sizes and also have the flexibility to specify custom CPU and Memory values. Typically, in the YAML code of a Aria Automation Design Template, you use either the properties cpuCount and totalMemoryMB or the flavor property. You cannot use both within the same template for the same VM.\nAfter considering the options, I decided to use the cpuCount and totalMemoryMB properties to specify VM CPU and memory, adding logic to the YAML code to determine values based on an input named Flavor.\nFlavor Options:\nSmall: 1 CPU, 2 GB memory Medium: 2 CPUs, 4 GB memory Large: 4 CPUs, 8 GB memory Other: Use CPU and Memory values specified in custom inputs CPU and Memory. See the Full Design Template YAML code below. These two lines of YAML code demonstrate how to specify the cpuCount and totalMemoryMB properties. This is the key to enabling both T-Shirt sizes and custom values:\nClick arrow to expand the code:\n1 2 cpuCount: \u0026#34;${(input.Flavor == \u0026#39;small\u0026#39;) ? 1 : (input.Flavor == \u0026#39;medium\u0026#39;) ? 2 : (input.Flavor == \u0026#39;large\u0026#39;) ? 4 : (input.Flavor == \u0026#39;other\u0026#39;) ? input.CPU : 1}\u0026#34; totalMemoryMB: \u0026#34;${(input.Flavor == \u0026#39;small\u0026#39;) ? 2048 : (input.Flavor == \u0026#39;medium\u0026#39;) ? 4096 : (input.Flavor == \u0026#39;large\u0026#39;) ? 8192 : (input.Flavor == \u0026#39;other\u0026#39;) ? input.Memory * 1024 : 1024}\u0026#34; Design Templates within Aria Automation:\nDesign Template and YAML Code:\nSmall Flavor Selected:\nOther Flavor Selected:\nDesign Template Example YAML Code:\nThis full Design Template YAML code shows the inputs and how to specify the cpuCount and totalMemoryMB properties.\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 formatVersion: 1 inputs: CustomizationSpec: type: string description: Customization Specification default: Customization-Ubuntu-22 title: CustomizationSpec VMName: type: string title: VM Name minLength: 1 maxLength: 15 default: RCKY-9-000 IP: type: string default: 192.168.69.17 Flavor: type: string title: Standard Size default: medium enum: - small - medium - large - other Memory: type: number title: Memory(GB) default: 1 minimum: 1 maximum: 512 CPU: type: number title: CPU Count default: 1 minimum: 1 maximum: 32 resources: Cloud_vSphere_Network_1: type: Cloud.vSphere.Network properties: networkType: existing constraints: - tag: Network:vCenter-VMs Cloud_vSphere_Machine_1: type: Cloud.vSphere.Machine properties: name: ${input.VMName} image: vCenter-Rocky-9 cpuCount: \u0026#34;${(input.Flavor == \u0026#39;small\u0026#39;) ? 1 : (input.Flavor == \u0026#39;medium\u0026#39;) ? 2 : (input.Flavor == \u0026#39;large\u0026#39;) ? 4 : (input.Flavor == \u0026#39;other\u0026#39;) ? input.CPU : 1}\u0026#34; totalMemoryMB: \u0026#34;${(input.Flavor == \u0026#39;small\u0026#39;) ? 2048 : (input.Flavor == \u0026#39;medium\u0026#39;) ? 4096 : (input.Flavor == \u0026#39;large\u0026#39;) ? 8192 : (input.Flavor == \u0026#39;other\u0026#39;) ? input.Memory * 1024 : 1024}\u0026#34; networks: - network: ${resource.Cloud_vSphere_Network_1.id} assignment: static address: ${input.IP} Flavors:\nIn my lab, I already had some Flavor Mappings defined. To allow for larger sizes, I had to create a new Flavor Mapping for the maximum sizes I wanted to support. I couldn\u0026rsquo;t specify CPU or memory sizes higher than the largest existing Flavor Mapping.\nWarning I received while testing:\nFlavor Mappings within Aria Automation:\nFlavor Mapping to allow large VM Builds:\nSummary:\nI hope this helps anyone looking to standardize new VM builds using T-Shirt sizes while also providing the flexibility to specify custom CPU and Memory values.\nAria Automation Version used for Blog Post: VMware Aria Automation 8.17.0 was used for this Blog Post. When new versions of VMware Aria Automation are released, the code or process may need to be changed.\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day. ","date":"2024-06-19T00:00:00Z","image":"https://vcrocs.info/vmware-aria-automation-options-for-cpumemory-values/featured-image_hu_5d5ccbd072b94c64.png","permalink":"https://vcrocs.info/vmware-aria-automation-options-for-cpumemory-values/","title":"VMware Aria Automation | Options for CPU|Memory values"},{"content":"How to monitor VMware Aria Appliances within your environment\n\u0026ldquo;I believe that if you show people the problems and you show them the solutions, they will be moved to act.” - Bill Gates\nAria Appliance Observability In my previous blog, I discussed VMware vCenter appliance observability. Click here to read the blog. Building on those ideas, I now want to demonstrate how to monitor VMware Aria Appliances. Monitoring and observing VMware Aria Appliance VMs is crucial in a VMware environment where many such appliances are present.\nFor VMware Aria Appliances, I created a Custom Group within VMware Aria Operations. These appliances have a property named \u0026ldquo;Summary|Configuration|Product Name\u0026rdquo;. By using a filter that checks if the Product Name contains \u0026ldquo;Aria\u0026rdquo;, \u0026ldquo;vRealize\u0026rdquo;, or \u0026ldquo;Log Insight\u0026rdquo;, I was able to group all VMware Aria Appliance VMs together. See Screen Shot below.\nThis filter is applicable to the following Aria Appliances:\nAria Operations Aria Operations for Logs Aria Automation Aria Suite LifeCycle Aria Cloud Proxies Aria Operations for Networks Aria Management Pack Builder vCenter Orchestrator After creating the Custom Group to select only VMware Aria Appliance VMs, I proceeded to build a comprehensive VMware Aria Appliance Monitoring Dashboard. At the top, I included some donut charts (my favorite) to display key metrics such as VMware Aria Appliances Health, Workload, Snapshots, and Uptime in days.\nI have a strong preference against VMs running on snapshots for extended periods, which is why I included a chart for Snapshots. Uptime is also a crucial metric, as it provides insight into a VMs maintenance status. When I see a VM running for hundreds of days, my first thought is that it hasn\u0026rsquo;t been patched or upgraded in a while. To ensure the best reliability and access to the latest features, it\u0026rsquo;s important to keep Aria Appliances patched and upgraded regularly.\nSteps to Create the Dashboard Create the (5) Views Show all Aria Appliance VMs with details Show VM Health Show VM Workload Show Snapshot Status Show Uptime (Days) Create the Dashboard To simplify getting started, all the Views and the Dashboard are available in my GitHub repository for download. Click Here to Download the files.\nCustom Group Filter to Select Aria Appliance VMs Filter Definition:\nDashboard Screen Shot:\nDashboard Usage:\nLinks to resources discussed is this Blog Post: Dale\u0026rsquo;s Github Repository Product Version used for Blog Post: Aria Operations: 8.17.1 Lessons Learned: I can use the Virtual Machine property named \u0026ldquo;Summary|Configuration|Product Name\u0026rdquo; to group all VMware Aria Appliances together. The filter within the Custom Group is what enables this Dashboard to work. In my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day. ","date":"2024-06-04T00:00:00Z","image":"https://vcrocs.info/aria-operations-aria-appliances-observability/featured-image_hu_64024c33d3d82131.png","permalink":"https://vcrocs.info/aria-operations-aria-appliances-observability/","title":"Aria Operations | Aria Appliances Observability"},{"content":"How to monitor vCenter VM(s) within your environment\n\u0026ldquo;It\u0026rsquo;s really hard to design products by focus groups. A lot of times, people don\u0026rsquo;t know what they want until you show it to them.” - Steve Jobs\nvCenter Observability I was recently asked how to monitor the VM that VMware vCenter runs on using VMware Aria Operations. The main request was to show the disk space used on the volumes to prevent them from filling up. In an environment with over 100 vCenters, I decided to create a view to show all the VMs running vCenter. While Aria Operations allows selecting all vCenters in a view, it does not natively show the VM name that vCenter runs on.\nCreating a Custom Group in Aria Operations to specify the vCenter VMs manually seemed impractical. Initially, I considered using tags in vCenter and creating a Custom Group based on these tags. However, tagging over 100 vCenter VMs and ensuring they are properly tagged would be labor-intensive.\nAfter some thought, I realized that the volume names for vCenter VMs were unique. I created an Aria Operations View to select VMs based on the existence of vCenter volumes. This approach allowed me to add the view to any environment, displaying only the vCenter VMs.\nAfter creating the view to select only vCenter VMs, I aimed to build a comprehensive vCenter Monitoring Dashboard. At the top, I included counts of vCenters, clusters, hosts, and VMs, etc… as these metrics are frequently requested by management. The dashboard features widgets to display all VM volumes (the primary reason for creating the dashboard), vCenter VM performance, CPU/memory history, and a list of vCenters.\nIt\u0026rsquo;s important to note that in VMware Aria Operations, showing VMware vCenter VMs is different from showing VMware vCenters. When a vCenter is selected in the vCenter Details widget, the dashboard displays host CPU/memory information.\nTo prevent ESXi hosts from being left in maintenance mode accidentally, I added a donut widget to show their status. Additionally, since cluster DRS can sometimes be disabled for changes and forgotten to be re-enabled, another donut widget shows the DRS status.\nSteps to Create the Dashboard Create the (4) Views Select all vCenter VMs Show vCenter Details Show Hosts Maintenance Mode Status Show Clusters DRS Status Create the Dashboard To simplify getting started, all the Views and the Dashboard are available in my GitHub repository for download. Click Here to Download the files.\nView to Select vCenter VMs View Data:\nView Filter:\nIn the view filter, I specified two metrics: “guestfilesystem:/storage/imagebuilder|capacity” and “guestfilesystem:/storage/autodeploy|capacity”. If a VM contains these metrics, it will be selected. These volume names are unique to vCenter VMs, making this approach effective.\nDashboard Screen Shot:\nDashboard Usage:\nStay tuned for future blog posts. I plan to create dashboards for monitoring Aria appliances, similar to what I did for VMware vCenter. It\u0026rsquo;s crucial to ensure these appliances are well monitored and maintained, like a Swiss watch.\nUpdate: Link to Aria Appliances Observability Blog\nLinks to resources discussed is this Blog Post: Dale\u0026rsquo;s Github Repository Product Version used for Blog Post: Aria Operations: 8.17.1 Lessons Learned: The relationship between VMware vCenter and the VM it runs on is not available out of the box in VMware Aria Operations. However, by identifying VMs through their unique volume names, I created a view that can be added to any environment to filter out the VMs running vCenter. The filter within that View is what enables this Dashboard to work. In my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day. ","date":"2024-05-31T00:00:00Z","image":"https://vcrocs.info/aria-operations-vcenter-observability/featured-image_hu_cfca23a006013a9a.png","permalink":"https://vcrocs.info/aria-operations-vcenter-observability/","title":"Aria Operations | vCenter Observability"},{"content":"Why I enjoy going to VMware Explore. First as a Customer. Now as a Employee.\n\u0026ldquo;Innovate like a startup, deliver like an enterprise” - Pat Gelsinger\nVMware Explore 2024 Website: VMware Explore 2024.\nLas Vegas Date: August 26 – 29, 2024\nThe Venetian Convention and Expo Center\nRegistration is open!\nWhy Attend When I was a VMware Customer, I tried to go to VMware Explore every year. Here is a list of reasons why I enjoyed the conference:\nTo meet other people in the same field as myself. Exchange stories, ideas, contact information, etc.. The Community side of the event alone, is worth the cost to go. To attend sessions that are done by people that you follow their blogs or socials, is an exciting experience. The Key Note Sessions get you excited to see what is coming with the next releases of the VMware Products. Vendor Parties are a great way to meet people and have good food and drink. Other Highlights for evening Parties for me: vExpert Party VMUG Party Event Concert on the last night (Black Keys Concert was my favorite) As a Employee my reasons are different to attend. Here is a list:\nTo meet people in person that I work with everyday. We are located across the country and don\u0026rsquo;t get to meet in person. Even if we went into a office everyday, we would never get to meet. Get Sessions accepted and share the knowledge with the products I work with every day. I like doing presentations on the Automation, Monitoring and Logging Products. I like to participate in the Hackathon that is part of the conference. In 2023 my Team received 2nd place. Sessions I submitted a couple sessions that hope get accepted in 2024, Fingers Crossed. One session I will be presenting with a customer, and 2 sessions I included TAMs to present with me. I am excited about the topics. When the sessions get announced, check back on this blog. I will update what was accepted.\nSessions Update! I am very excited to announce that I will be doing (3) presentations at VMware Explore 2024.\nStreamlining Healthcare with Automation: How VMware Can Help | INDB1917LV Transform VCF Automation Inputs to ABX and Orchestrator Workflow Variables | CODE1164LV Maximizing VMware Workstation/Fusion for Business, Education, and Home Labs | CODE1162LV Link to all my sessions in the VMware Explore 2024 Content Catalog\nSession Details:\nMy favorite places to eat or things to do while at VMware Explore: Eating - Places that I have gone and enjoyed:\nJoes\u0026rsquo;s Prime Steak and Stone Crab - I have always had a great experience here Delmonico Steakhouse - You can\u0026rsquo;t leave without having EMERIL’S BANANA CREAM PIE! Grand Lux Café at The Palazzo is great for Breakfast! Yardbird is close to conference entrance and food to very good IN-N-Out BURGER | If you live in the US East and have never gone to an IN-N-Out BURGER, you need to go at least one time. Things to do that I have done and enjoyed:\nHoover Damn was nice to go see. Pictures can\u0026rsquo;t replace a visit in person. Sporting Clays at Clark County Shooting Complex - World-Class Shotgun Center Red Rock Canyon National Conservation Area Links to resources discussed is this Blog Post: VMware Explore 2024. VMware Explore 2024 | Registration Link. If you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day. ","date":"2024-05-01T00:00:00Z","image":"https://vcrocs.info/vmware-explore-2024/featured-image_hu_4cea53d08ed3ebad.png","permalink":"https://vcrocs.info/vmware-explore-2024/","title":"VMware Explore 2024"},{"content":"My review on using ollama to help create code for Automation\n\u0026ldquo;By harnessing the power of AI, I simplify my coding workflow, freeing up time to focus on creating blog posts that resonate with the vCommunity. With the help of AI, my writing becomes more precise, more creative, and more impactful.” - Dale Hassinger\nollama ollama Web Site Link: Link to ollama web site.\nBuilding on my experience with ChatGPT, I decided to explore Ollama Local on my trusty Apple MacBook Pro M1. As a user-friendly AI enthusiast, I was eager to see how seamless the installation process would be. To my delight, setting up Ollama Local on Mac is incredibly straightforward.\nTo get started, simply head to the Ollama website and download the application as a zip file. Expand the contents of the archive and copy the Ollama Application file into your Applications folder. Double-clicking the icon will launch the app in no time – it\u0026rsquo;s that easy!\nFor this review, I\u0026rsquo;ll be using the Llama3 Large Language Model (LLM) to demonstrate Ollama Local\u0026rsquo;s capabilities. The first time you run the application, it will automatically download the necessary LLM files for you. Like I said, very easy to use.\nWith Ollama Local up and running, let\u0026rsquo;s dive into its features and see what kind of AI-powered magic it can create.\nGo to a terminal and type \u0026ldquo;ollama run llama3\u0026rdquo; to get started.\nClick arrow to expand the code:\n1 ollama run llama3 ollama Models: There are many models to pick from to use with ollama\u0026hellip;\nOnce you\u0026rsquo;ve chosen the desired model, the web site will provide you with the necessary command prompts to get started. No need to dig through complex documentation or struggle with unfamiliar code - just follow the straightforward instructions and you\u0026rsquo;re good to go!\nHow to run ollama from cli: Here is a quick video to show how to get started from the CLI\nRun command to start ollama Ask a question and see the results type /bye to exit ollama Hands-on experience with this tool? A breeze! Not only is it incredibly user-friendly, but the performance on my laptop has been impressive too. And what really stands out is the speed at which responses are delivered - no waiting around here! The unedited video itself is a testament to its fast processing capabilities.\nClick arrow to expand the code:\n1 2 3 ollama run llama3 \u0026gt;\u0026gt;\u0026gt; Who Created PowerShell \u0026gt;\u0026gt;\u0026gt; /bye ollama \u0026ldquo;Real World\u0026rdquo; Examples: Now I will show some examples of how I use ollama everyday for coding and writing. They are my main uses cases for AI.\nollama PowerShell Function In my previous blogs, I\u0026rsquo;ve highlighted the versatility of PowerShell in automating various tasks. In this blog, I\u0026rsquo;ll show how to harness the power of PowerShell to interact with AI assistants like Ollama. To start, I created a custom function that enables you to ask Ollama questions directly from the PowerShell command line. Here\u0026rsquo;s the sample code to get you started:\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # Function to ask Ollama function ask-ollama { # Code to run when the function is called param ( [Parameter(Mandatory=$true)] $question ) # Set request body $requestBody = @{ model = \u0026#34;llama3\u0026#34;; prompt = \u0026#34;$question\u0026#34;; stream = $false; } # Set headers $headers = @{\u0026#39;Content-Type\u0026#39;=\u0026#39;application/json\u0026#39;} $Body = ($requestBody | ConvertTo-Json) # Send the request $request =Invoke-WebRequest -Uri \u0026#39;http://localhost:11434/api/generate\u0026#39; -Method Post -Headers $headers -Body $Body $response =$request.Content | ConvertFrom-Json # Print response to console Write-Host $response.response # Copy response to clipboard Set-Clipboard -Value $response.response } # End Function # ----- Example Questions ----- ask-ollama -question \u0026#34;What is PowerCLI\u0026#34; ask-ollama -question \u0026#34;Create a PowerShell script to connect to a vCenter, Get a list of all VMs with a Snap\u0026#34; ask-ollama -question \u0026#34;Create a Salt State file to stop and disable a service with a name of Spooler\u0026#34; ask-ollama -question \u0026#34;Show me how to copy a powershell variable value to the clipboard\u0026#34; If you are a PowerShell enthusiast, you\u0026rsquo;re probably accustomed to the flexibility of functions within your scripts. Feel free to adapt this example to your own workflow and coding style, regardless of whether you prefer to use it as is or modify it to fit your needs.\nollama Prompt Engineering Examples: Set the \u0026lsquo;Role\u0026rsquo; to start: One of my habits when working with ollama, or ChatGPT, is setting a specific \u0026lsquo;role\u0026rsquo; for our conversations. By defining a clear context or persona, I\u0026rsquo;ve found that I\u0026rsquo;m able to receive more effective and insightful responses from the AI. This approach has been refined over time through experimentation and exploration of the product\u0026rsquo;s capabilities, yielding better results and a more productive dialogue.\nAct as a PowerShell SME Act as a PowerCLI SME Act as a VMware SME Act as a vRealize SME Act as a Javascript SME to work with VMware Orchestrator Act as a Technology Blogger Questions to generate code: PowerCLI: Act as a PowerCLI SME Create a script to connect to a VMware vCenter. username is administrator@vsphere.local. password is Password123. vCenter name is vcenter8x.corp.local. List all VMs that have a snap. Export the list of VMs with a snap to c:\\reports\\vms-with-snaps.csv. Unedited Code Returned:\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 # Set the connection settings $vcenter = \u0026#34;vcenter8x.corp.local\u0026#34; $username = \u0026#34;administrator@vsphere.local\u0026#34; $password = \u0026#34;Password123\u0026#34; # Connect to the vCenter using PowerCLI Connect-VIServer -Server $vcenter -User $username -Password $password -ErrorAction Stop # Get a list of all VMs that have a snapshot $vmsWithSnaps = @() Get-VM | Where-Object {$_.HasSnapshot} | ForEach-Object { $vm = $_.Name Write-Host \u0026#34;Found snapshot for VM: $vm\u0026#34; $vmsWithSnaps += $vm } # Export the list of VMs with a snap to a CSV file $vmsWithSnaps | Export-Csv -Path \u0026#34;C:\\reports\\vms-with-snaps.csv\u0026#34; -NoTypeInformation # Disconnect from the vCenter Disconnect-VIServer -Confirm:$false ``` Let me explain what each part of the script does: 1. The first section sets the connection settings: `vcenter`, `username`, and `password`. 2. The `Connect-VIServer` cmdlet connects to your VMware vCenter using the specified credentials. 3. The `Get-VM` cmdlet retrieves a list of all virtual machines in the vCenter. We then use the `Where-Object` cmdlet to filter this list and only include VMs that have at least one snapshot (`$_.HasSnapshot`). 4. We loop through each VM that has a snapshot using a `ForEach-Object` cmdlet, and add its name to an array `$vmsWithSnaps`. 5. The final section exports the array of VM names to a CSV file named `vms-with-snaps.csv` in the `C:\\reports` directory. 6. Finally, we disconnect from the vCenter using the `Disconnect-VIServer` cmdlet. Save this script as a PowerShell file (e.g., `vms_with_snaps.ps1`) and run it to get the list of VMs with snapshots exported to the specified CSV file! Code questions that I have used:\nConvert this curl command to PowerShell Create a html file that does\u0026hellip; Amazing how advanced the code will be for a complete web page. Include a table that I can sort the columns, select the number of rows and have a search within the table. Awesome! Convert this Python to PowerShell or convert this PowerShell to Python Javascript that can be used with VMware Orchestrator Actions and Workflows SQL commands Linux commands vi and nano help salt state files Questions to help with writing: My writing process in commands: Act as a Technology Blogger Reword \u0026ldquo;Paste what I wrote within double quotes\u0026rdquo; See what the results look like. If I want a second example I will type: \u0026ldquo;again\u0026rdquo; or \u0026ldquo;another example\u0026rdquo; For my writing style I will use this command a lot: use less adjectives Data for LLama3 is up to the year 2022. When asking VMware Aria questions I will still use vRealize a lot because of the name change.\nOther writing example questions: I want to create a Technology presentation description \u0026ldquo;Topic VMware vRealize Operations with a focus on Dashboards\u0026rdquo; ollama commands: Two commands I use the most:\n\u0026ldquo;ollama run llama3\u0026rdquo; to start ollama \u0026ldquo;/bye\u0026rdquo; to exit ollama Commonsense Rules: Rules I use when working with AI/LLMs:\nNever use any code generated in a production environment without testing in a lab first Always understand the code that is generated before even using in a lab Read the text that is generated before using Understand that AI/LLMs are to help you, not do the work for you. You are responsible for anything generated that you use. Lessons Learned: ollama and llama3 are both available at no cost today (04/2024). I pay $20 per month for ChatGPT. You get more with ChatGPT but ollama does a good job for a way to have a local LLM option. Use Cases to use ollama local:\nTraveling and no internet access for AI like ChatGPT. Use ollama while flying. Nice way to get some help at 35,000 ft. Go to your family cabin off the grid and still use ollama on the MacBook. Off the grid camping. Basically, if the laptop has power, you have access to ollama AI, which is very cool in my mind. It is awesome to have the power of AI at your fingertips and not require the power of the internet to use it. Stream Deck and ollama commands together is a great time saver.\nI assign commands I use the most with ollama to buttons. When I have a prompt that works well, assigning the prompt to a stream deck button makes it easy to always run the command the same way. I should call them Prompt Engineering Buttons. In this video, the ollama commands were run using a Stream Deck Button. Realtime speed, no video edits:\nLinks to resources discussed is this Blog Post: ollama web site. Product Versions used for Blog Post: ollama: 0.1.32 | Use this command at cli to show ollama version \u0026ldquo;ollama -v\u0026rdquo; LLM: llama3 DO NOT EVER USE ANY CODE FROM A BLOG IN A PRODUCTION ENVIRONMENT! PLEASE TEST ANY CODE IN THIS BLOG IN A LAB!\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day. ","date":"2024-04-27T00:00:00Z","image":"https://vcrocs.info/automation-code-creation-with-ollama/featured-image_hu_7bd06f95bf9f27cd.png","permalink":"https://vcrocs.info/automation-code-creation-with-ollama/","title":"Automation Code Creation with ollama"},{"content":"VMware vExpert 2024\nVMware vExpert 2020 - Present I have been included in (2) vExpert Subprograms in 2024.\nvExpert Subprograms: vExpert Cloud Management vExpert vSphere 2024 is the 4th year that I was accepted into the VMware vExpert Cloud Management subprogram and the 1st year for vExpert vSphere.\nI\u0026rsquo;m immensely honored to be included in the VMware vExpert program once again, marking my fifth year of participation. The aspect of the vExpert program I find particularly commendable is its focus on acknowledging individuals for their contributions and dedication to \u0026ldquo;Giving Back\u0026rdquo;. Being chosen for the vExpert program signifies a commitment to sharing knowledge and a desire to elevate not just oneself but also those within the vCommunity.\nAs an employee of Broadcom By VMware, one of my primary ambitions is to contribute more significantly to the vCommunity than I could as a user of VMware products.\nI did more for the vCommunity in 2023 than any previous years.\nVMware Explore 2023 Presentation | Use VMware Aria to Create/Manage/Monitor Windows Servers (on-prem/cloud) [CODE2501LV]\nHackathon Team Captain (Finished in 2nd Place) | VMware Explore 2023\nPhilly VMUG - 2023 | VMware Aria Automation and Operations\nThe PowerShell Podcast | “Using PowerCLI with Dale Hassinger”\nVMware Community Podcast #659\nBlogs: | More Blogs than any previous year\nWhat is the VMware vExpert Program? Program Overview The VMware vExpert program is VMware\u0026rsquo;s global evangelism and advocacy program. The program is designed to put VMware\u0026rsquo;s marketing resources towards your advocacy efforts. Promotion of your articles, exposure at our global events, co-op advertising, traffic analysis, and early access to beta programs and VMware\u0026rsquo;s roadmap. The awards are for individuals, not companies, and last for one year. Employees of both customers and partners can receive the awards. In the application, we consider various community activities from the previous year as well as the current year\u0026rsquo;s (only for 2nd half applications) activities in determining who gets awards. We look to see that not only were you active but are still active in the path you chose to apply for.\nCriteria If you are interested in becoming a vExpert the criteria is simple. We are looking for IT Professionals who are sharing their VMware knowledge and contributing that back to the community. The term \u0026ldquo;giving back\u0026rdquo; is defined as going above and beyond your day job. There are several ways to share your knowledge and engage with the community. Some of those activities are blogging, book authoring, magazine articles, CloudCred task writing, active in Facebook groups, forum (VMTN as well as other non VMware) platforms, public speaking, VMUG leadership, videos and so on.\nThanks: I have worked with a great group of people at VMware, past and present. I would like to thank everyone that has helped me on my journey called a career.\nEmail: Dale.Hassinger@vCrocs.info\nLocation: Dillsburg, PA\n\u0026ldquo;9 - 5 pays the bills, 5 - 10 advances your career\u0026rdquo;\n","date":"2024-04-27T00:00:00Z","image":"https://vcrocs.info/vmware-vexpert-2024-fifth-year/featured-image_hu_e669d4578cb902d3.png","permalink":"https://vcrocs.info/vmware-vexpert-2024-fifth-year/","title":"VMware vExpert 2024 | Fifth Year"},{"content":"How to send messages/updates to a Microsoft Teams Channel or Google Spaces.\n\u0026ldquo;If everyone is moving forward together, then success takes care of itself.” - Henry Ford\nVMware Aria Automation Whenever new VMs are deployed or Day 2 operations are executed via the VMware Aria Automation Catalog, I find it crucial to update our team through a common messaging platform about the ongoing creations or modifications. In this blog, I\u0026rsquo;ll demonstrate how to dispatch notifications to both Microsoft Teams and Google Spaces via a Webhook. This technique can be adapted for any messaging service such as Slack, Zoom, Discord, etc., by simply altering the JSON body formatting code and creating a Webhook for message delivery.\nI will guide you through the process of sending alerts from VMware Aria Automation utilizing ABX Actions and Orchestrator Workflows. Though the procedure remains largely the same, there are minor variations in acquiring Property Values. Presenting both methods offers you, the Automation Specialists, the freedom to choose the approach that seamlessly integrates into your workflows. My philosophy in automation is that there are countless ways to achieve the same outcome.\nIn this blog, I\u0026rsquo;ll walk you through the creation of a new virtual machine (VM). At the onset of the build process, I have configured an Extensibility Subscription that triggers the sending of notifications to both Microsoft Teams and Google Spaces. This is accomplished through the use of an ABX Action and an Orchestrator Workflow.\nBesides notifying your team when a new VM is created, I\u0026rsquo;ll demonstrate how to dispatch a message through an Orchestrator Workflow for a Day 2 Automation process.\nCreate a New VM and Send Message Steps:\nWithin the Design section of Aria Automation, create a template. For the purpose of this tutorial, we will construct a straightforward Rocky Linux VM. | Refer to Screen Shot 1. Ensure that all properties you wish to include in your notification are incorporated into the template\u0026rsquo;s YAML code. These property values will be transmitted to both ABX Actions and Orchestrator Workflows. | Refer to Screen Shot 2. You have the flexibility to include any property in your messages, provided it is specified in the template\u0026rsquo;s YAML code. Proceed to set up an Extensibility Action. | See Screen Shot 3 and Screen Shot 4. Establish an Extensibility Subscription that will initiate the ABX Action or Orchestrator Workflow as required. | Refer to Screen Shot 5. Here\u0026rsquo;s an example of how to define a subscription. | See Screen Shot 6. Initiate the creation of an Orchestrator Workflow. | Refer to Screen Shot 7. Incorporate an input property into the Orchestrator Workflow. | See Screen Shot 8. Outline the schema within the Orchestrator Workflow. | Refer to Screen Shot 9. Inject the necessary code into the Orchestrator Workflow. | See Screen Shot 10 and Screen Shot 11. Deploy a new VM and confirm that the Extensibility Subscription successfully triggered the ABX Action you defined. Check your preferred messaging system to ensure the notification was received. Example of a Google Spaces Message | Refer to Screen Shot 12. Example of a Microsoft Teams Message | See Screen Shot 13. If all steps were executed successfully, it\u0026rsquo;s time for a celebration! Screen Shot 14 illustrates the process of creating a Google Spaces Webhook. Orchestrator Workflow Day 2 Automation and Send Message Steps:\nInitiate the creation of an Orchestrator Workflow. Creating a new Workflow is the same for Day 2 Automation Processes as when a Workflow was created for building a New VM. | Refer to Screen Shot 7. Incorporate an input property into the Orchestrator Workflow for every question needed to complete the Day 2 Automation. | See Screen Shot 15. Inject the necessary code into the Orchestrator Workflow. | See Screen Shot 16. Run the Workflow and confirm that the code successfully ran and created the message . Check your preferred messaging system to ensure the notification was received. The Messages with look the same as when you created a New VM. YOU define what information is shown. Example of a Google Spaces Message | Refer to Screen Shot 12. Example of a Microsoft Teams Message | See Screen Shot 13. If all steps were executed successfully, it\u0026rsquo;s time for a high five! Example of a Day 2 Automation Microsoft Teams Message | See Screen Shot 17. Screen Shots of the Steps: Screen Shot 01: Design Template with YAML Code that has all the required Properties.\nDesign Template Example YAML Code:\nThis YAML code shows all the Properties that I want to send to a ABX Action or Orchestrator Workflow.\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 formatVersion: 1 name: Ubuntu-20-with-minion version: 9 inputs: CustomizationSpec: type: string description: Customization Specification default: Customization-Ubuntu-22 title: \u0026#39;Customization Spec:\u0026#39; VMName: type: string title: \u0026#39;VM Name:\u0026#39; minLength: 1 maxLength: 15 default: LINUX-U-16 IP: type: string default: 192.168.69.16 BuildTime: type: string title: \u0026#39;Build Time:\u0026#39; format: date-time vCenterFolders: type: string title: \u0026#39;vCenter Folder:\u0026#39; default: Blogs $dynamicEnum: /data/vro-actions/TAM/DBH_vCenter_Folders resources: Cloud_vSphere_Machine_1: type: Cloud.vSphere.Machine properties: image: vCenter-ubuntu-20 flavor: vCenter-1CPU-2GB name: ${input.VMName} BuildTime: ${input.BuildTime} folderName: ${input.vCenterFolders} customizationSpec: ${input.CustomizationSpec} vmIP: ${input.IP} remoteAccess: authentication: usernamePassword username: administrator password: VMware1! constraints: - tag: Cluster:PROD networks: - network: ${resource.Cloud_vSphere_Network_1.id} assignment: static address: ${input.IP} Cloud_vSphere_Network_1: type: Cloud.vSphere.Network properties: networkType: existing constraints: - tag: Network:vCenter-VMs Screen Shot 02: Highlight of YAML Code showing Properties.\nScreen Shot 03: Where to create Extensibility ABX Actions.\nScreen Shot 04: Example Extensibility ABX Action.\nExtensibility ABX Action Code:\nCode Snippets.\nEach ABX Action starts with identical code to retrieve Property Values. The variation arises in the methodology of dispatching this information to the respective messaging systems. Here\u0026rsquo;s an example script for sending notifications to Microsoft Teams.\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 function handler($context, $inputs) { # Build PowerShell variables if(!$inputs.resourceNames){ $vmName = \u0026#34;NA\u0026#34; }else{ $vmName = $inputs.resourceNames } if(!$inputs.customProperties.image){ $image = \u0026#34;NA\u0026#34; }else{ $image = $inputs.customProperties.image } if(!$inputs.customProperties.flavor){ $flavor = \u0026#34;NA\u0026#34; }else{ $flavor = $inputs.customProperties.flavor } if(!$inputs.customProperties.folderName){ $folder = \u0026#34;NA\u0026#34; }else{ $folder = $inputs.customProperties.folderName } if(!$inputs.customProperties.vmIP){ $vmIP = \u0026#34;NA\u0026#34; }else{ $vmIP = $inputs.customProperties.vmIP } if(!$inputs.__metadata.userName){ $userName = \u0026#34;NA\u0026#34; }else{ $userName = $inputs.__metadata.userName } Write-Host \u0026#34;--vmName:\u0026#34;$vmName Write-Host \u0026#34;---image:\u0026#34;$image Write-Host \u0026#34;--flavor:\u0026#34;$flavor Write-Host \u0026#34;--folder:\u0026#34;$folder Write-Host \u0026#34;userName:\u0026#34;$userName Write-Host \u0026#34;----vmIP:\u0026#34;$vmIP # --- [ Start Add Alert to Teams Channel ] --- # Define the webhook URL $webhookUrl = \u0026#39;https://vcrocs.webhook.office.com/webhookb2/ac73a8c3-bd4572@015568c1-bbe7-hack-me-4050-add6-6f36b7b44adb/IncomingWebhook/b41cd4d2f-hack-you-12/925b-9960-4590-9251-65db25f05419\u0026#39; # --- Create the message card $messageCard = @{ \u0026#34;@type\u0026#34; = \u0026#34;MessageCard\u0026#34; \u0026#34;@context\u0026#34; = \u0026#34;http://schema.org/extensions\u0026#34; \u0026#34;summary\u0026#34; = \u0026#34;Issue 176715375\u0026#34; \u0026#34;sections\u0026#34; = @( @{ \u0026#34;activityTitle\u0026#34; = \u0026#34;vRA Automated VM Build:\u0026#34; \u0026#34;facts\u0026#34; = @( @{ \u0026#34;name\u0026#34; = \u0026#34;VM Name:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$vmName\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;VM IP:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$vmIP\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;Created By:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$userName\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;VM Image:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$image\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;vCenter Folder:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$folder\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;VM Flavor:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$flavor\u0026#34; } ) \u0026#34;markdown\u0026#34; = $true } ) } | ConvertTo-Json -Depth 10 # Send the message card Invoke-RestMethod -Uri $webhookUrl -Method Post -ContentType \u0026#39;application/json\u0026#39; -Body $messageCard $outPut = \u0026#34;Done\u0026#34; return $outPut } This code is to send a message to Google Spaces.\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 function handler($context, $inputs) { # Build PowerShell variables if(!$inputs.resourceNames){ $vmName = \u0026#34;NA\u0026#34; }else{ $vmName = $inputs.resourceNames } if(!$inputs.customProperties.image){ $image = \u0026#34;NA\u0026#34; }else{ $image = $inputs.customProperties.image } if(!$inputs.customProperties.flavor){ $flavor = \u0026#34;NA\u0026#34; }else{ $flavor = $inputs.customProperties.flavor } if(!$inputs.customProperties.folderName){ $folder = \u0026#34;NA\u0026#34; }else{ $folder = $inputs.customProperties.folderName } if(!$inputs.customProperties.vmIP){ $vmIP = \u0026#34;NA\u0026#34; }else{ $vmIP = $inputs.customProperties.vmIP } if(!$inputs.__metadata.userName){ $userName = \u0026#34;NA\u0026#34; }else{ $userName = $inputs.__metadata.userName } Write-Host \u0026#34;--vmName:\u0026#34;$vmName Write-Host \u0026#34;---image:\u0026#34;$image Write-Host \u0026#34;--flavor:\u0026#34;$flavor Write-Host \u0026#34;--folder:\u0026#34;$folder Write-Host \u0026#34;userName:\u0026#34;$userName Write-Host \u0026#34;----vmIP:\u0026#34;$vmIP # --- [ Start Add Alert to Google Chat ] --- # --- Create json body for Google Alert $messageBody = @{ cards = @( @{ header = @{ title = \u0026#34;New VM Build\u0026#34; } sections = @( @{ widgets = @( @{ keyValue = @{ topLabel = \u0026#34;VM Name:\u0026#34; content = \u0026#34;$vmname\u0026#34; contentMultiline = $true } }, @{ keyValue = @{ topLabel = \u0026#34;VM IP:\u0026#34; content = \u0026#34;$vmIP\u0026#34; contentMultiline = $true } }, @{ keyValue = @{ topLabel = \u0026#34;Created By:\u0026#34; content = \u0026#34;$username\u0026#34; contentMultiline = $true } }, @{ keyValue = @{ topLabel = \u0026#34;VM Image:\u0026#34; content = \u0026#34;$image\u0026#34; contentMultiline = $true } }, @{ keyValue = @{ topLabel = \u0026#34;vCenter Folder:\u0026#34; content = \u0026#34;$folder\u0026#34; contentMultiline = $true } }, @{ keyValue = @{ topLabel = \u0026#34;VM Flavor:\u0026#34; content = \u0026#34;$flavor\u0026#34; contentMultiline = $true } } ) } ) } ) } $jsonMessage = $messageBody | ConvertTo-Json -Depth 10 # Output the JSON to verify #$jsonMessage # Define the webhook URL (replace it with your actual webhook URL) $webhookUrl = \u0026#39;https://chat.googleapis.com/v1/spaces/AAAAvSYSmfg/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI\u0026amp;token=Vj-NoThfrmjLnkIW_iQRQw71qcE2CGxG1tkjs2ArM7o\u0026#39; # Send the message $results = Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $jsonMessage -ContentType \u0026#34;application/json\u0026#34; #$outPut = \u0026#34;WebHook Date/Time: \u0026#34; + $results.createTime #Write-Host $outPut $outPut = \u0026#34;Done\u0026#34; return $outPut } Screen Shot 05: Subscriptions used to start ABX Actions or Orchestrator Workflows.\nScreen Shot 06: Subscription definition example.\nScreen Shot 07: Create a new Orchestrator Workflow.\nScreen Shot 08: Add Input named \u0026ldquo;inputProperties\u0026rdquo; to the Orchestrator Workflow.\nScreen Shot 09: Create the Orchestrator Workflow Schema.\nScreen Shot 10: Add the code to the Orchestrator Workflow.\nOrchestrator Workflow Code:\nCode Examples. At the start of each Orchestrator Workflow, the code for retrieving Property Values is consistent. The variation comes in how the information is sent to each messaging system.\nFor sending messages to Microsoft Teams, use the following code. To send a message to Google Spaces in a Workflow, apply the same Google Spaces code used in ABX Actions. The Google Spaces code does not change between ABX Actions and Workflows. The difference in ABX Actions and Workflows is in the method of obtaining Property Values. Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 function Handler($context, $inputs) { # Build PowerShell variables if(!$inputs.inputProperties.resourceNames){ $vmName = \u0026#34;NA\u0026#34; }else{ $vmName = $inputs.inputProperties.resourceNames } if(!$inputs.inputProperties.customProperties.image){ $image = \u0026#34;NA\u0026#34; }else{ $image = $inputs.inputProperties.customProperties.image } if(!$inputs.inputProperties.customProperties.flavor){ $flavor = \u0026#34;NA\u0026#34; }else{ $flavor = $inputs.inputProperties.customProperties.flavor } if(!$inputs.inputProperties.customProperties.folderName){ $folder = \u0026#34;NA\u0026#34; }else{ $folder = $inputs.inputProperties.customProperties.folderName } if(!$inputs.inputProperties.customProperties.vmIP){ $vmIP = \u0026#34;NA\u0026#34; }else{ $vmIP = $inputs.inputProperties.customProperties.vmIP } if(!$inputs.__metadata_userName){ $userName = \u0026#34;NA\u0026#34; }else{ $userName = $inputs.__metadata_userName } Write-Host \u0026#34;--vmName:\u0026#34;$vmName Write-Host \u0026#34;---image:\u0026#34;$image Write-Host \u0026#34;--flavor:\u0026#34;$flavor Write-Host \u0026#34;--folder:\u0026#34;$folder Write-Host \u0026#34;userName:\u0026#34;$userName Write-Host \u0026#34;----vmIP:\u0026#34;$vmIP # Define the webhook URL $webhookUrl = \u0026#39;https://vcrocs.webhook.office.com/webhookb2/ac73a8c3-59a2-hack-me-bd4572@015568c1-bbe7-4050-add6-6f36b7b44adb/IncomingWebhook/b41cd4d2fcbd-hack-you-0212/925be554-9960-4590-9251-65db25f05419\u0026#39; # Create the message card $messageCard = @{ \u0026#34;@type\u0026#34; = \u0026#34;MessageCard\u0026#34; \u0026#34;@context\u0026#34; = \u0026#34;http://schema.org/extensions\u0026#34; \u0026#34;summary\u0026#34; = \u0026#34;Issue 176715375\u0026#34; \u0026#34;sections\u0026#34; = @( @{ \u0026#34;activityTitle\u0026#34; = \u0026#34;vRA Automated VM Build:\u0026#34; \u0026#34;facts\u0026#34; = @( @{ \u0026#34;name\u0026#34; = \u0026#34;VM Name:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$vmName\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;VM IP:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$vmIP\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;Created By:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$userName\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;VM Image:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$image\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;vCenter Folder:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$folder\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;VM Flavor:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$flavor\u0026#34; } ) \u0026#34;markdown\u0026#34; = $true } ) } | ConvertTo-Json -Depth 10 # Send the message card Invoke-RestMethod -Uri $webhookUrl -Method Post -ContentType \u0026#39;application/json\u0026#39; -Body $messageCard $output=@{status = \u0026#39;done\u0026#39;} return $output } Screen Shot 11: Code difference between a Orchestrator Workflow and a ABX Action.\nMessage Examples: Screen Shot 12: When all is configured and functioning properly, the Google Space message containing the New VM Build Details will appear as follows. Quite impressive!\nScreen Shot 13: Microsoft Teams Message with New VM Build Details. Very Cool!\nScreen Shot 14: How to create a Google Spaces Webhook. Link included below on how to create a Microsoft Teams Webhook.\nStart of Day 2 Automation Screen Shots: Screen Shot 15: Add all the required inputs to the Workflow for the Day 2 Automation process.\nScreen Shot 16: Add the code to the Orchestrator Workflow.\nOrchestrator Workflow Code for Day 2 Automation:\nCode Example.\nThe difference between this Workflow for day 2 Automation Code and when I used a Workflow to create a new VM is how you get the input values. For sending messages to Microsoft Teams, use the following code. To send a message to Google Spaces in a Workflow, apply the same Google Spaces code used in ABX Actions. The Google Spaces code does not change between ABX Actions and Workflows. The difference in ABX Actions and Workflows is in the method of obtaining Property Values. Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 function Handler($context, $inputs) { # Build PowerShell variables if(!$inputs.vmName){ $vmName = \u0026#34;NA\u0026#34; }else{ $vmName = $inputs.vmName } if(!$inputs.snapName){ $snapName = \u0026#34;NA\u0026#34; }else{ $snapName = $inputs.snapName } if(!$inputs.snapDescription){ $snapDescription = \u0026#34;NA\u0026#34; }else{ $snapDescription = $inputs.snapDescription } Write-Host \u0026#34;---------vmName:\u0026#34;$vmName Write-Host \u0026#34;-------snapName:\u0026#34;$snapName Write-Host \u0026#34;snapDescription:\u0026#34;$snapDescription # Define the webhook URL $webhookUrl = \u0026#39;https://vcrocs.webhook.office.com/webhookb2/ac73a8c3-hack-me-e2fbd4572@015568c1-bbe7-4050-add6-6f36b7b44adb/IncomingWebhook/b41cd4d2fcb-hack-you-2/925be554-9960-4590-9251-65db25f05419\u0026#39; # Create the message card $messageCard = @{ \u0026#34;@type\u0026#34; = \u0026#34;MessageCard\u0026#34; \u0026#34;@context\u0026#34; = \u0026#34;http://schema.org/extensions\u0026#34; \u0026#34;summary\u0026#34; = \u0026#34;Issue 176715375\u0026#34; \u0026#34;sections\u0026#34; = @( @{ \u0026#34;activityTitle\u0026#34; = \u0026#34;VM SNAP Shot:\u0026#34; \u0026#34;facts\u0026#34; = @( @{ \u0026#34;name\u0026#34; = \u0026#34;VM Name:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$vmName\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;Snap Name:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$snapName\u0026#34; }, @{ \u0026#34;name\u0026#34; = \u0026#34;Snap Description:\u0026#34; \u0026#34;value\u0026#34; = \u0026#34;$snapDescription\u0026#34; } ) \u0026#34;markdown\u0026#34; = $true } ) } | ConvertTo-Json -Depth 10 # Send the message card Invoke-RestMethod -Uri $webhookUrl -Method Post -ContentType \u0026#39;application/json\u0026#39; -Body $messageCard # Use this section to add the code to do whatever day 2 process you want to run # --- Start the Code # --- end the Code $output=@{status = \u0026#39;done\u0026#39;} return $output } Screen Shot 17: Microsoft Teams Message with Day 2 Automation Details. Awesome!\nLinks to resources discussed is this Blog Post: Link to learn how to create a Microsoft Teams Webhook. Link to my GitHub Repository for sample code like what is included in this Blog Post. Aria Automation Version used for Blog Post: VMware Aria Automation 8.16.0 was used for this Blog Post. When new versions of VMware Aria Automation are released, the code or process may need to be changed.\nIn my blogs, I often emphasize that there are multiple methods to achieve the same objective. This article presents just one of the many ways you can tackle this task. I\u0026rsquo;ve shared what I believe to be an effective approach for this particular use case, but keep in mind that every organization and environment varies. There\u0026rsquo;s no definitive right or wrong way to accomplish the tasks discussed in this article.\nIf you found this blog article helpful and it assisted you, consider buying me a coffee to kickstart my day. ","date":"2024-03-17T00:00:00Z","image":"https://vcrocs.info/vmware-aria-automation-how-to-send-messages-and-updates/featured-image_hu_b5acce3f88bb30eb.png","permalink":"https://vcrocs.info/vmware-aria-automation-how-to-send-messages-and-updates/","title":"VMware Aria Automation | How to send messages and updates"},{"content":"How to learn about and use VMware Products in a Home Lab\nI was inspired to create this Blog after VMware EOA (End of Availability) the free ESXi product. There were some articles saying that people just getting into IT Technology roles will now not be able to learn about VMware Products. This is NOT True and I wanted to share some examples of how people can still learn about Virtualization with VMware Products in a Home Lab environment.\nI have been in the IT Industry for many years and there is a quote that I use all the time for people that want to advance their IT skills. \u0026ldquo;9 - 5 pay the bills but 5 - 10 advances your career\u0026rdquo;.\nThere are still many options to learn about VMware Products. Here are some items that can be used to advance your knowledge:\nVMware Workstation | Link to Workstation Download site VMware Fusion | Link to Fusion Download site VMware ESXi Link to vSphere Download site Vmware ESXi ARM Edition | Link to Documentation You also don\u0026rsquo;t need to have the newest, fastest, most advanced hardware if you just want to learn about the VMware Products. The hardware I have to create this Blog Post is an older Apple MacBook Pro that is no longer supported and will not run the latest versions of MAC OS. I installed Ubuntu Desktop on this Apple Laptop and then installed VMware Workstation. This setup is OK for learning and testing. I have a Raspberry PI 4 with 8 GB memory to install ESXi ARM Edition.\nItems to know when setting up a Home Lab environment:\nVMware ESXi | Default Evaluation period is 60 days. This will enable you to have a full featured host to test anything you want to learn for 60 days. VMware Workstation | Non-Commercial use is free to use VMware Fusion | Non-Commercial use is free to use Vmware ESXi ARM Edition | Default Evaluation period is 180 days To get access to additional VMware Software, Take a look at VMUG Advantage:\nLink to VMUG Advantage You do have to purchase VMUG Advantage. If you attend a local VMUG event, you will often get coupons for a discount to purchase VMUG Advantage. This is one of the best vCommunity Programs you can join and it will include licenses for many of the VMware solutions which are valid for a year. VMware Workstation Screen Shot of my MacBook Pro Resources. Doesn\u0026rsquo;t need to be latest and greatest to learn.\nScreen Shot of VMware Workstation running a Ubuntu Server. Great way to learn. When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2024-03-09T00:00:00Z","image":"https://vcrocs.info/how-to-learn-about-vmware-products/featured-image_hu_e146e999c0f642e0.png","permalink":"https://vcrocs.info/how-to-learn-about-vmware-products/","title":"How to learn about VMware Products"},{"content":"How to use the VMware Aria Operations and a Text Display Widget to launch VMRC\nVMware Aria Operations I recently had the opportunity to work together on a Blog Post, Launch VMRC from Aria Operations, with Brock Peterson.\nLink to Blog Post During my time as a VMware customer, I had the opportunity to connect with Brock through my account executive, Steve Lieberson. Whenever I sought an in-depth understanding of Aria Operations, Steve would arrange a session with Brock. These interactions left me aspiring for a similar position at VMware. My contributions to VMware included participating in customer reference calls, where I eagerly shared my expertise in the Aria Suite with Healthcare Organizations, aiding them in embarking on their journey in Automation, Monitoring, or Logging. Eventually, I secured a role at VMware, allowing me to collaborate daily with Brock and the incredible VMware Cloud Foundation Specialists team, focusing on Automation, Monitoring, and Logging. The camaraderie and collective expertise of this team is truly remarkable. Working within a team that boasts a variety of role models is an great experience.\nThe blog post begins with an intriguing scenario where Brock, responding to a customer\u0026rsquo;s query about launching the VMRC client to display a VM\u0026rsquo;s console within Aria Operations (a functionality not native to the product), highlighted the collaborative spirit of the team. Having previously created a similar dashboard as a customer, I offered to replicate it in my lab area for Brock, emphasizing the team\u0026rsquo;s culture of sharing existing solutions and code. Brock liked what I created in my lab and suggested that we share this knowledge with the vCommunity by creating a Blog, recognizing the potential interest from other customers in implementing such a solution. This shows the team\u0026rsquo;s commitment to collaboration and knowledge sharing.\nPlease explore the blog post to witness the exceptional outcomes a great team can achieve. Enjoy!\nAll the source code for this Blog is saved in my GitHub Repository. Click on the links below.\nLinks to resources for this Blog Post: Brock Peterson Blog Post | Launch VMRC from Aria Operations. Source code used for this Blog Post. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2024-02-18T00:00:00Z","image":"https://vcrocs.info/vmware-aria-operations-vm-console-access-with-vmrc/featured-image_hu_ab50017a4277988e.png","permalink":"https://vcrocs.info/vmware-aria-operations-vm-console-access-with-vmrc/","title":"VMware Aria Operations | VM console access with VMRC"},{"content":"Export RVTools xlsx Files Everyday\nPowerShell Code I like to create a Scheduled Task in vRealize Orchestrator to create RVTools files everyday. Here is a sample PowerShell script that could be used. The script is also on a 7 day rotation of files and automatically deletes old files. On the 1st of every month a file will also be created for history that is not deleted.\nClick arrow to expand the PowerShell Code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 # Script to create RVTools files and delete files older than 7 Days. # Also creates an Archive RVTools file on the first of every Month. # ----- [ Set parameters for RVTools export ] ----- $vCenter = \u0026#34;vcsa8x.corp.local\u0026#34; $User = \u0026#34;administrator@corp.local\u0026#34; $Password = \u0026#34;_RVToolsV2PWDe9yqxNV-HACKME-w5gkyxsCh5R1Kbg+hVYiKo=\u0026#34; $fileLocation = \u0026#34;C:\\RVTools\u0026#34; $fileArchive = \u0026#34;C:\\RVTools\\Archive\u0026#34; $fileName = (Get-Date -Format \u0026#34;MM-dd-yyyy-hh-mm\u0026#34;) + \u0026#39;-\u0026#39; + $vCenter + \u0026#39;.xlsx\u0026#39; $filePath = \u0026#34;C:\\Program Files (x86)\\Robware\\RVTools\\RVtools.exe\u0026#34; $outPut = \u0026#39;Starting Process to create an RVTools xlsx file...\u0026#39; Write-Output $outPut $outPut = \u0026#39;Creating xlsx file for vCenter \u0026#39; + $vCenter + \u0026#39;...\u0026#39; Write-Output $outPut $Arguments = \u0026#34;-u $User -p $Password -s $vCenter -c ExportAll2xlsx -d $fileLocation -f $fileName\u0026#34; $Process = Start-Process -FilePath $filePath -ArgumentList $Arguments -Wait if($Process.ExitCode -eq -1){ Write-Host \u0026#34;Error: Export failed! RVTools returned exitcode -1, probably a connection error! Script is stopped\u0026#34; -ForegroundColor Red exit 1 } # End If # ----- [Create a RVTools file that will not be deleted for history on the 1st of every month ] ----- $DayofMonth = Get-Date -Format \u0026#34;dd\u0026#34; if($DayofMonth -eq \u0026#39;01\u0026#39;){ $outPut = \u0026#34;Day of the Month: \u0026#34; + $DayofMonth Write-Output $outPut $outPut = \u0026#39;Starting Process to create an RVTools xlsx file for Archive that will not be deleted...\u0026#39; Write-Output $outPut $Arguments = \u0026#34;-u $User -p $Password -s $vCenter -c ExportAll2xlsx -d $fileArchive -f $fileName\u0026#34; $Process = Start-Process -FilePath $filePath -ArgumentList $Arguments -Wait } # End If # ----- [ Clean up old RVTools Files ] ----- $outPut = \u0026#39;Removing all XLSX files older than 7 days...\u0026#39; Write-Output $outPut # ----- [ Delete all RVTools Files in older than 7 day(s) ] ----- $Daysback = \u0026#34;-7\u0026#34; $CurrentDate = Get-Date $DatetoDelete = $CurrentDate.AddDays($Daysback) Get-ChildItem $fileLocation | Where-Object { $_.LastWriteTime -lt $DatetoDelete } | Remove-Item -Confirm:$false -Force \u0026lt;# # ----- [ Sample code to change a file last write date/time to test code for deleting files older than 7 days ] ----- $fileToChange = $fileLocation + \u0026#39;\\\u0026#39; + $fileName $fileToChange (Get-Item $fileToChange).LastWriteTime = Get-Date \u0026#34;02/01/2024 01:00\u0026#34; #\u0026gt; Blog Updated: 02/08/2024\nChanges: Updated script to work with newest version of RVTools\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2024-02-08T00:00:00Z","image":"https://vcrocs.info/schedule-rvtools-data-export/featured-image_hu_3e96ca1cde44058.png","permalink":"https://vcrocs.info/schedule-rvtools-data-export/","title":"Schedule RVTools Data Export"},{"content":"How to group VMs together in VMware Aria Operations using vCenter TAGs and show resource usage totals across all VMs within the custom group\nVMware Aria Operations VMware Aria Operations 8.14.1 was used for this Blog Post. When new versions of VMware Aria Operations are released, the code or process may need to be changed.\nI was recently asked how to create a VMware Aria Operations Dashboard that groups VMs together by vCenter TAGs. IE: If there is 100 VMs in vCenter that have a TAG Named \u0026ldquo;Servers-DB\u0026rdquo;, they wanted to see the CPU, Memory, Disk Space, and Critical Alerts Totals for all VMs with that vCenter TAG. They have many vCenter TAGs and each TAG would be on a single line with only Total Values shown.\nSee the screenshot that shows the final Dashboard Design.\nDashboard Design The left side of the Dashboard shows all the Custom Groups that were created based on vCenter TAGs. The values shown on each row are the Metric Totals for all VMs that have the same vCenter TAG. The left side is a View so that all the data can be exported as a CSV file. The right side of the Dashboard is a view that shows the VM details. The right side is optional. I added the right side to show that the Super Metrics were calculating the metric totals correct. Each metric shown requires a Super Metric to Sum the values within the Custom Group. Each row shown requires a Custom Group to define which vCenter TAG to use. Watch the videos below to see the details on how to create this Dashboard. Screen Shot of Dashboard To group VMs together in VMware Aria Operations based on vCenter TAGs, you use Custom Groups. Custom Groups have a group type. I created (2) new Group Types for this Dashboard. I named one Group Type \u0026ldquo;Applications\u0026rdquo; and one Group Type \u0026ldquo;All-APPs\u0026rdquo;. \u0026ldquo;All-APPs\u0026rdquo; is the Parent Group and \u0026ldquo;Applications\u0026rdquo; is the child group.\nWatch video to see how to define VMware Aria Operations Custom Group membership based on a vCenter TAG Name:\nTo show the Metric Totals of each Custom Group, we created Super Metrics to sum the value of all the VMs within the Custom Group. If you were only using one vCenter TAG and one Custom Group, you would not need to do this. We wanted to show the Metric Values of a 100+ vCenter TAGs and each vCenter TAG would be on a separate line. That is why we created the Super Metrics.\nWatch video to see how to create VMware Aria Operations Super Metrics to total Virtual Machine Metrics:\nTo show all the Custom Groups names and Super Metric values we created a View. Main reason to create the View was to be able to export the data as a CSV file.\nWatch video to see how to create VMware Aria Operations View that shows the Custom Groups with VM metric totals:\nLessons Learned and acknowledgements: Thank You to Brock Peterson on providing input on how to get metric value totals by using Super Metrics. Thank You to my customer for the challenging question. I did not create a Dashboard like this before. I am glad we were able to create a Dashboard that answered your request and I am able to share the technique with the vCommunity. You CAN group VMs in VMware Aria Operations together by using vCenter TAGs and total the Metric Values on a single line within a List View. When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2024-01-26T00:00:00Z","image":"https://vcrocs.info/vmware-aria-operations-use-vcenter-tags/custom-groups/super-metrics-to-get-vm-details/featured-image_hu_ab50017a4277988e.png","permalink":"https://vcrocs.info/vmware-aria-operations-use-vcenter-tags/custom-groups/super-metrics-to-get-vm-details/","title":"VMware Aria Operations | Use vCenter TAGS/Custom Groups/Super Metrics to get VM Details"},{"content":"How to use add ChatGPT (AI) to a VMware Aria Automation Custom Form.\nVMware Aria Automation VMware Aria Automation 8.14.1 was used for this Blog Post. When new versions of VMware Aria Automation are released, the code or process may need to be changed.\nAt VMware Explore 2023, the \u0026ldquo;Well Spoken\u0026rdquo; Hackathon Team delivered an insightful presentation, earning them a well-deserved 2nd place. In this blog post and video, we\u0026rsquo;ll take a closer, \u0026ldquo;Under the Hood\u0026rdquo; look at how they created a Custom Form within VMware Aria Automation, featuring ChatGPT integration. You\u0026rsquo;ll gain insight into the actions and code that brought this Custom Form to life, showcasing the effectiveness of Custom Forms in your Automation journey. ChatGPT\u0026rsquo;s contribution in simplifying code creation for Automation is truly remarkable.\nHere is a quote by Cody De Arkland that I often refer to.\n\u0026ldquo;Your thought process is the most powerful automation tool you’ll ever have!\u0026rdquo;\nThis quote illustrates what the Hackathon Team did with Custom Forms, that are designed to streamline your Automation processes. With some creative thinking, you can easily integrate features like ChatGPT into your VMware Aria Automation Custom Form.\nWatch this video to see the complete process that is discussed in this Blog Post.\nLinks to resources discussed is this Blog Post: Link to my GitHub Repository for sample code like what is included in this Blog Post. When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2024-01-08T00:00:00Z","image":"https://vcrocs.info/vmware-aria-automation-custom-form-with-chatgpt/featured-image_hu_b5acce3f88bb30eb.png","permalink":"https://vcrocs.info/vmware-aria-automation-custom-form-with-chatgpt/","title":"VMware Aria Automation | Custom Form with ChatGPT"},{"content":"How to use VMware Aria Automation Orchestrator Actions to make sure AD (Active Directory) OU (Organizational Unit) structure is in place BEFORE creating new Servers.\nVMware Aria Automation VMware Aria Automation 8.14.1 was used for this Blog Post. When new versions of VMware Aria Automation are released, the code or process may need to be changed.\nAll the source code for this Blog is saved in my GitHub Repository. Click on the links within the blog to access the code.\nVMware Aria Automation Orchestrator Actions are a very powerful way to add checks into your server build process. This Blog Post shows you how to verify that the AD OU structure is in place before you do a new Server Build. Within the VMware Aria Automation Catalog, you can have custom forms to ask all the questions required to build a new server (see screen shot). One of the questions can be which AD OU you want to create the new Windows Server. The list of existing OUs in AD can be a dropdown with all the AD OU names provided by a Action. After you select the OU name to locate the new Windows Server Build, the next Action can verify that all the AD Sub OUs are in place. If the OUs are in place the action will only verify. If an AD OU is missing, the Action will create the AD OU before you press submit to create new Server.\nWatch this video to see the complete process that is discussed in this Blog Post.\nHere is Javascript code for the Action that returns all existing AD OUs to populate the dropdown on the custom form. Watch the Video to understand how the code works.\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // Orchestrator Action to list AD Sub OUs // Created by the VMware by Broadcom Healthcare Aria Team // Before you use this Action you MUST run the next 2 Workflows // You MUST run the Workflow \u0026#34;Add an Active Directory server\u0026#34; to add Active Directory Server to Orchestrator // You MUST also run the Workflow \u0026#34;Configure Active Directory plug-in options\u0026#34; and set the \u0026#34;Default Active Directory server\u0026#34; // Set the Parent OU value (APP Name) var parentOU = \u0026#34;APPS\u0026#34;; //Search for Parent OU Value var parentOUPath = ActiveDirectory.search(\u0026#39;OrganizationalUnit\u0026#39;,parentOU); System.log(\u0026#34;Parent OU: \u0026#34; + parentOUPath); // Create Array of Sub OUs for each (ou in parentOUPath){ var childOUs = ou.organizationalUnits; //System.log(\u0026#34;Child OUs: \u0026#34; + childOUs); } //System.log(\u0026#34;Child OUs Length: \u0026#34; + childOUs.length); var data = new Array(); for each (var ouObject in childOUs){ data.push(ouObject.name) //System.log(\u0026#34;Existing OU Name: \u0026#34; + ouObject.name); } System.log(\u0026#34;Existing Sub OUs: \u0026#34; + data); return data Here is Javascript code for the Action that verifies that the AD OU structure is in place and creates the AD OUs if they do not exist. Watch the Video to understand how the code works.\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 // Orchestrator Action to Verify AD OU Structure // Created by the VMware by Broadcom Healthcare Aria Team // Before you use this Action you MUST run the next 2 Workflows // You MUST run the Workflow \u0026#34;Add an Active Directory server\u0026#34; to add Active Directory Server to Orchestrator // You MUST also run the Workflow \u0026#34;Configure Active Directory plug-in options\u0026#34; and set the \u0026#34;Default Active Directory server\u0026#34; // Function to create a sub OU function performAction(item, substring) { try { // Attempt to create the sub OU item.createOrganizationalUnit(substring); System.log(\u0026#34;Sub OU \u0026#39;\u0026#34; + substring + \u0026#34;\u0026#39; created successfully.\u0026#34;); } catch (e) { System.error(\u0026#34;Error creating Sub OU \u0026#39;\u0026#34; + substring + \u0026#34;\u0026#39;: \u0026#34; + e.message); } } // Set the Parent OU value (APP Name). Create an Action input named parentOU and type is string. //var parentOU = \u0026#34;MGMT\u0026#34;; //var parentOU = \u0026#34;Epic\u0026#34;; //Search for Parent OU Value+ var ous = ActiveDirectory.search(\u0026#39;OrganizationalUnit\u0026#39;,parentOU); System.log(\u0026#34;ous: \u0026#34; + ous); //System.log(\u0026#34;ous: \u0026#34; + ous.length); if(ous.length \u0026gt; 0){ // Create Array of Sub OUs for each (ou in ous){ var childOUs = ou.organizationalUnits; //System.log(\u0026#34;Child OUs: \u0026#34; + childOUs); } // Build a string of Sub OU Values var subOUs = \u0026#34;\u0026#34;; for each (var ouObject in childOUs){ subOUs = subOUs + ouObject.name + \u0026#34;:\u0026#34; System.log(\u0026#34;Existing OU Name: \u0026#34; + ouObject.name); } System.log(\u0026#34;Existing Sub OUs: \u0026#34; + subOUs); // Define the array of sub OU Names to look for var subOUNames = [\u0026#34;Groups\u0026#34;, \u0026#34;Servers\u0026#34;, \u0026#34;Computers\u0026#34;]; // Loop through each substring subOUNames.forEach(function(substring) { // Check if the string contains the substring if (subOUs.indexOf(substring) !== -1) { System.log(\u0026#34;Sub OU \u0026#39;\u0026#34; + substring + \u0026#34;\u0026#39; Exists.\u0026#34;); } else { System.log(\u0026#34;Sub OU \u0026#39;\u0026#34; + substring + \u0026#34;\u0026#39; DOES NOT Exist! Creating..\u0026#34;); // Code to create the AD Sub OUs //System.log(\u0026#34;substring: \u0026#34; + substring) var ous = ActiveDirectory.searchExactMatch(\u0026#34;OrganizationalUnit\u0026#34;,parentOU); //System.log(\u0026#34;ous: \u0026#34; + ous) // Iterate over the items using forEach ous.forEach(function(item) { performAction(item, substring); }); } }); System.log(\u0026#34;All Sub OUs exist!\u0026#34;) return \u0026#34;All Sub OUs exist!\u0026#34; } else { System.log(\u0026#34;OU \u0026#34; + parentOU + \u0026#34; Not Found\u0026#34;) return \u0026#34;OU \u0026#34; + parentOU + \u0026#34; Not Found\u0026#34; } Links to resources discussed is this Blog Post: Source code used in this Blog Post in my GitHub Repository. When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2024-01-07T00:00:00Z","image":"https://vcrocs.info/vmware-aria-automation-orchestrator-active-directory-ous/featured-image_hu_b5acce3f88bb30eb.png","permalink":"https://vcrocs.info/vmware-aria-automation-orchestrator-active-directory-ous/","title":"VMware Aria Automation Orchestrator | Active Directory OUs"},{"content":"End Of Year Review 2023\nThe year 2023 was a good chapter in my career, emphasizing the importance of community contribution. I hold a belief that my endeavors are worthwhile if they benefit even one person. This past year, I engaged in numerous presentations and blog posts, focusing on giving back to the vCommunity. My efforts in sharing knowledge and resources have, I believe, positively impacted others, making 2023 a year of success and meaningful community engagement.\nHighlights of 2023 Started a VMware Aria Suite Solution Architect Role. I get to work with some people that have been role models to me. The culture within this Team is the best that I have ever experienced. vExpert 2023 | Member since 2020 vExpert 2023 | vExpert Cloud Management VMware Explore 2023 Hackathon: I was the Hackathon Team Lead and we finished 2nd place. VMware Explore 2023 session (Presentation): Use VMware Aria to Create/Manage/Monitor Windows Servers (on-prem/cloud) [CODE2501LV] The VMware Community Podcast | I was a Guest on the show. The PowerShell Podcast | I was a Guest on the show Philly VMUG Presentation | VMware Aria Automation and Operations My Top 20 Blog Posts of 2023 Rank Blog Topic Views 01 vCROCS - Home Page 3061 02 VMware Aria Automation and Ansible Integration 1227 03 Unlocking the Potential - VMware Aria Operations - Automation Central - Snapshot Age 713 04 VMware Aria Automation - Working with Windows Server Drives 660 05 Unlocking the Potential - VMware Aria Automation Config API 574 06 How vRealize Operations can help with Right Sizing VMs 509 07 VMware Aria Automation and SaltStack Config Resource 380 08 VMware Aria Operations - RVTools Dashboard 331 09 How to use PowerShell Modules with vRA 8.2 305 10 Unlocking the Potential - VMware Aria Operations - Metric Search 291 11 Unlocking the Potential - VMware Aria Operations - October 2023 PowerBlock 290 12 VMware Aria Operations - Servicenow - Management Pack 265 13 Schedule RVTools Data Export 250 14 Rest API calls in VMware Aria Automation with PowerShell 228 15 VMware Explore 2023 - Presentation 208 16 Unlocking the Potential - VMware Aria Automation - ABX Action Constants and Secrets 166 17 Unlocking the Potential - VMware Aria Automation - Custom Form Versioning 156 18 VMware Aria Operations for Logs (SaaS) - ESXi Host syslog setting 146 19 Unlocking the Potential - VMware Aria Operations - Automation Central - VM Snaps 131 20 VMware Explore 2023 - Hackathon 125 The top 20 list reveals a significant interest in utilizing Automation and Operations. The fact that Ansible\u0026rsquo;s integration with VMware Aria Automation ranked #1 was unexpected, evidenced by the frequent views of this particular blog post. This observation has inspired me to dedicate more of my blogging efforts to VMware Aria Automation Ansible integration in the upcoming year.\n*Stats from Google Analytics.\nSet-Goals 2024 Give back more to the vCommunity. Be a good mentor. Get a session approved for VMware Explore 2024. Do more VMware Aria Presentations | PowerBlocks | Videos | etc\u0026hellip; Create more Blog Posts. Never Stop Learning\u0026hellip; Thanks for visiting in 2023! If you found this Blog site useful and it helped you, Buy me a coffee to start my day. ","date":"2024-01-01T00:00:00Z","image":"https://vcrocs.info/end-of-year-review-2023/featured-image_hu_b9bb5f55b854439f.png","permalink":"https://vcrocs.info/end-of-year-review-2023/","title":"End of Year Review - 2023"},{"content":"How to use the VMware Aria Operations | Servicenow | Management Pack to add information to the Servicenow CMDB\nBlog Update: I presented the content from this Blog at a TECH BYTES session on February 9th, 2024. 150 people registered for the webinar and there was a lot of interest with the ServiceNow Management Pack (MP). We received good feedback from the attendees on the capabilities of the MP.\nVMware Aria Operations VMware Aria Operations 8.14.1 and Servicenow MP (Management Pack) 9.0 was used for this Blog Post. When new versions of VMware Aria Operations or the MP are released, the code or process may need to be changed.\nAll the source code for this Blog is saved in my GitHub Repository. Click on the links within the blog to access the code.\nI wanted to share how I setup the Servicenow Management Pack in my lab to update a Servicenow CMDB (Configuration Management DataBase). The VMware Documentation covers the process well. I wanted to cover a couple of steps to help make the process easier.\nI followed the instructions exactly as listed in the PDF link below.\nInstructions to setup Servicenow to allow the MP to send data to CMDB | Click Here to View PDF\nFor the Servicenow user permissions I did the following:\nCreated a Servicenow user named LPU (Least Privilege User) Created a Servicenow Role and named it vROPS_MP Added the user to the role. Added the role to all the Servicenow ACLs listed in the document. If there were more than one ACL with the same name with read permissions, I used the newest ACL. I did not add to all ACLs with the same name. I gave the role “read” and “edit_ci_relations” to the tables listed in the document. I used the moid_populate_only.json config that is OOTB (Out of the Box) with no changes to start to make sure everything was working correct. When I added the account to the management pack in Aria Operations, it did a good job to let me know if everything was set up correctly in Servicenow and if the json config file was setup correct. I had a permission wrong and it showed me what was wrong when I did a Validate Connection. I fixed the permission like it showed me and then everything worked. My lab data is now showing up in Servicenow CMDB.\nManagement Pack Config screen: Management Pack Config screen (Validate Connection | Failed). Shows the field name is incorrect: Management Pack Config screen (Validate Connection | Success): OOTB, the config files can be found here on the VMware Aria Operations Appliance:\nThe config file will go here: /usr/lib/vmware-vcops/user/plugins/inbound/servicenow_adapter3/work\nThe templates are located at: /usr/lib/vmware-vcops/user/plugins/inbound/servicenow_adapter3/conf/config_samples\nHere is the moid_populate_only.json with no changes.\nClick arrow to expand the code:\n1 2 3 4 5 6 7 { \u0026#34;cmdbSync\u0026#34;: { \u0026#34;syncMode\u0026#34;: \u0026#34;POPULATE_ONLY\u0026#34;, \u0026#34;objectIdentifierSource\u0026#34;: \u0026#34;MOID\u0026#34; } } After I verified everything was working with OOTB settings, I wanted to add some additional data to the Servicenow CMDB. The VM (virtual machine) IP address is not sent to Servicenow CMDB with default settings. Here is the json file I have in my lab to send VM IP and Host CPU info.\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { \u0026#34;cmdbSync\u0026#34;: { \u0026#34;syncMode\u0026#34;: \u0026#34;POPULATE_ONLY\u0026#34;, \u0026#34;objectIdentifierSource\u0026#34;: \u0026#34;MOID\u0026#34;, \u0026#34;additionalColumns\u0026#34;: { \u0026#34;builtInHostSystem\u0026#34;: [ { \u0026#34;cmdbColumn\u0026#34;: \u0026#34;cpu_name\u0026#34;, \u0026#34;vropsType\u0026#34;: \u0026#34;PROPERTY\u0026#34;, \u0026#34;vropsField\u0026#34;: \u0026#34;cpu|cpuModel\u0026#34; } ] , \u0026#34;builtInVirtualMachine\u0026#34;: [ { \u0026#34;cmdbColumn\u0026#34;: \u0026#34;guest_os_fullname\u0026#34;, \u0026#34;vropsType\u0026#34;: \u0026#34;PROPERTY\u0026#34;, \u0026#34;vropsField\u0026#34;: \u0026#34;summary|guest|fullName\u0026#34; }, { \u0026#34;cmdbColumn\u0026#34;: \u0026#34;ip_address\u0026#34;, \u0026#34;vropsType\u0026#34;: \u0026#34;PROPERTY\u0026#34;, \u0026#34;vropsField\u0026#34;: \u0026#34;summary|guest|ipAddress\u0026#34; } ] } } } In the VMware documentation it says to use the vropsField name in the json config file but I did not see where it told you how to get the vropsField name. Here are some examples on how to get the vROPS field names.\nvROPS VM Field Names available (PowerShell Script):\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 $opsURL = \u0026#34;https://vao-ent.corp.local\u0026#34; $opsUsername = \u0026#34;admin\u0026#34; $opsPassword = \u0026#34;VMware1!\u0026#34; $vmName = \u0026#34;LINUX-U-170\u0026#34; $authSource = \u0026#34;local\u0026#34; # ----- Get Aria Operations token $uri = \u0026#34;$opsURL/suite-api/api/auth/token/acquire?_no_links=true\u0026#34; #$uri # --- Create body $bodyHashtable = @{ username = $opsUsername authSource = $authSource password = $opsPassword } # --- Convert the hashtable to a JSON string $body = $bodyHashtable | ConvertTo-Json $token = Invoke-RestMethod -Uri $uri -Method Post -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;Content-Type\u0026#34; = \u0026#34;application/json\u0026#34; } -Body $body -SkipCertificateCheck #$token.token $authorization = \u0026#34;OpsToken \u0026#34; + $token.token #$authorization # ----- Get the VM Operations identifier #$uri = \u0026#34;$opsURL/suite-api/api/resources?maintenanceScheduleId=\u0026amp;name=$vmName\u0026amp;page=0\u0026amp;pageSize=1000\u0026amp;_no_links=true\u0026#34; $uri = \u0026#34;$opsURL/suite-api/api/resources?name=$vmName\u0026amp;page=0\u0026amp;pageSize=1000\u0026amp;_no_links=true\u0026#34; #$uri $identifier = Invoke-RestMethod -Uri $uri -Method Get -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;Authorization\u0026#34; = $authorization } -SkipCertificateCheck #$identifier $identifier = $identifier.resourceList $json = $identifier | ConvertTo-Json -Depth 10 #$json # Convert the JSON string to a PowerShell object $data = $json | ConvertFrom-Json # Search for the object where resourceKindKey is \u0026#34;VirtualMachine\u0026#34; $targetResourceKindKey = \u0026#34;VirtualMachine\u0026#34; $matchedObject = $data | Where-Object { $_.resourceKey.resourceKindKey -eq $targetResourceKindKey } # If a matching object is found, output the identifier if ($matchedObject) { $vmIdentifier = $($matchedObject.identifier) #Write-Output $($matchedObject.identifier) } # End If else { Write-Output \u0026#34;No VirtualMachine resourceKindKey found\u0026#34; } # End Else # ----- Get Field Names and Values $uri = \u0026#34;$opsURL/suite-api/api/resources/properties?resourceId=$vmidentifier\u0026amp;_no_links=true\u0026#34; #$uri $resourcePropertiesList = Invoke-RestMethod -Uri $uri -Method Get -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;Authorization\u0026#34; = $authorization } -SkipCertificateCheck $outPut = $resourcePropertiesList.resourcePropertiesList.property Write-Output $outPut vROPS Host Field Names available (PowerShell Script):\nClick arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 $opsURL = \u0026#34;https://vao-ent.corp.local\u0026#34; $opsUsername = \u0026#34;admin\u0026#34; $opsPassword = \u0026#34;VMware1!\u0026#34; $hostName = \u0026#34;esxi8-04.corp.local\u0026#34; $authSource = \u0026#34;local\u0026#34; # ----- Get Aria Operations token $uri = \u0026#34;$opsURL/suite-api/api/auth/token/acquire?_no_links=true\u0026#34; #$uri # --- Create body $bodyHashtable = @{ username = $opsUsername authSource = $authSource password = $opsPassword } # --- Convert the hashtable to a JSON string $body = $bodyHashtable | ConvertTo-Json $token = Invoke-RestMethod -Uri $uri -Method Post -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;Content-Type\u0026#34; = \u0026#34;application/json\u0026#34; } -Body $body -SkipCertificateCheck #$token.token $authorization = \u0026#34;OpsToken \u0026#34; + $token.token #$authorization # ----- Get the VM Operations identifier $uri = \u0026#34;$opsURL/suite-api/api/resources?name=$hostName\u0026amp;page=0\u0026amp;pageSize=1000\u0026amp;_no_links=true\u0026#34; #$uri $identifier = Invoke-RestMethod -Uri $uri -Method Get -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;Authorization\u0026#34; = $authorization } -SkipCertificateCheck #$identifier $identifier = $identifier.resourceList $json = $identifier | ConvertTo-Json -Depth 10 #$json # Convert the JSON string to a PowerShell object $data = $json | ConvertFrom-Json #$data # Search for the object where resourceKindKey is \u0026#34;VirtualMachine\u0026#34; $targetResourceKindKey = \u0026#34;Hostsystem\u0026#34; $matchedObject = $data | Where-Object { $_.resourceKey.resourceKindKey -eq $targetResourceKindKey } # If a matching object is found, output the identifier if ($matchedObject) { $vmIdentifier = $($matchedObject.identifier) #Write-Output $($matchedObject.identifier) } # End If else { Write-Output \u0026#34;No VirtualMachine resourceKindKey found\u0026#34; } # End Else # ----- Get Field Names and Values $uri = \u0026#34;$opsURL/suite-api/api/resources/properties?resourceId=$vmidentifier\u0026amp;_no_links=true\u0026#34; #$uri $resourcePropertiesList = Invoke-RestMethod -Uri $uri -Method Get -Headers @{ \u0026#34;accept\u0026#34; = \u0026#34;application/json\u0026#34; \u0026#34;Authorization\u0026#34; = $authorization } -SkipCertificateCheck $outPut = $resourcePropertiesList.resourcePropertiesList.property Write-Output $outPut Here is the results of running the PowerShell scripts to get the vropsField names. The column \u0026ldquo;name\u0026rdquo; is what you need to use in the json config file.\nIf you don\u0026rsquo;t want to use the PowerSHell Scripts to get the VMware Aria Operations field names, watch this YouTube video to see the steps I used to get the field names using the VMware Aria Operations APIs.\nThe cmdbColumn name info that needs included in the json config file is in Servicenow. Watch this YouTube video to see the steps I used to get the Servicenow column names to use with the json config file.\nExample of how Servicenow CMDB will look with IP Address sent from VMware Aria Operation Management Pack.\nAnother Example of how Servicenow CMDB will look with IP Address sent from VMware Aria Operation Management Pack.\nLinks to resources about VMware Aria Operations | Servicenow | Management Pack: Source code used in this Blog Post. Brock Peterson Blog Post | Updated vRTVS Management Pack for ServiceNow. This Blog Post does a great job discussing how to send VMware Aria Operations Alerts to Servicenow. VMware Aria Operations Servicenow Management Pack documentation. When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-12-22T00:00:00Z","image":"https://vcrocs.info/vmware-aria-operations-servicenow-management-pack/featured-image_hu_ab50017a4277988e.png","permalink":"https://vcrocs.info/vmware-aria-operations-servicenow-management-pack/","title":"VMware Aria Operations | Servicenow | Management Pack"},{"content":"APPs that I use everyday to be Productive | 2023\nIn 2022, I shared a list of apps that were part of my daily routine. This year, I want to reveal the new apps I\u0026rsquo;ve incorporated into my workflow and discuss which ones I\u0026rsquo;ve moved on from.\nI\u0026rsquo;m always on the lookout for new apps, so if you have any favorites that I haven\u0026rsquo;t mentioned, please feel free to share them with me. Additionally, if you\u0026rsquo;re curious about how I integrate these apps into my daily routine, reach out to me. I\u0026rsquo;d be happy to demonstrate their use in a personalized demo.\nMy current app selection has been influenced significantly by the VMware/Broadcom merger.\nRecent APPs: Recently, I\u0026rsquo;ve begun using these apps to boost my productivity:\nAPP Usage Google Suite of APPs\n- Gmail - Google Calendar - Chat - Spaces - Tasks - Keep - Docs-Sheets-Slides I use Everyday. Notion I use the Web Clipping Feature the most to strip out all adverting, etc\u0026hellip; from web pages, when I want to just save the text. ChatGPT Daily, I engage in practices that enhance my writing skills and develop code for automation purposes. Proven APPs: Here\u0026rsquo;s a list of apps that have become staples in my daily work and blogging routines. These tools have consistently proven their value in my workflows.:\nAPP Usage TickTick - To-Do and Notes App in one. I use everyday. Where I save all my To-Do\u0026rsquo;s and Notes. I like the Note filtering a lot! CleanShot X - Screen Shot and Screen recording App I use everyday. The scrolling screen capture is awesome! BetterSnapTool - easily manage your window positions I use everyday. I couldn\u0026rsquo;t use a MAC without having the shortcut keys for Window Management Zoom - Online Meetings, Chat, etc\u0026hellip; I use everyday for calls with customers. I feel it is the easiest to use for online meetings. Visual Studio Code - Creating Code I use often. Used to create my Blog post and any Automation scripts I create. Github Desktop I use often. I used for all GitHub Repository Updates. Affinity Photo - Photo editing Used for all image editing that I do. VMware Fusion Used for creating VMs on my Macbook Pro. Termius - SSH Client I use for all SSH in my Lab area. Forklift - SFTP Client I use for file management and syncing folders. Hugo - The world’s fastest framework for building websites Used to create this Blog Site! Backblaze - Online Backup to keep all my important files offsite. Used for all personal Backups. Dashlane - Password Manager Used for all personal PW management Raindrop.io - All-in-one bookmark manager Used to keep all my bookmarks in one location. Browser Ranking in order of usage: Microsoft Edge Mozilla Firefox Google Chrome Apple Safari APPs no longer used everyday: APP Usage Slack Replaced by Google Chat and Spaces by employer mmhmm - Makes on-screen meetings and presentations a little more fun. I still think this is a Cool App. I just don\u0026rsquo;t use it much. Microsoft Office - Word, Excel, Outlook, Powerpoint, OneNote Replaced by Google APPs by employer Microsoft Teams - Online Meetings, Chat, etc\u0026hellip; Employer removed from list of available APPs. I always liked Zoom better anyway. If you found this article helpful and would like to show your appreciation, consider buying me a coffee to kickstart my day. ","date":"2023-12-02T00:00:00Z","image":"https://vcrocs.info/productive-apps-2023/featured-image_hu_cacd11e57abf7297.png","permalink":"https://vcrocs.info/productive-apps-2023/","title":"Productive APPs | 2023"},{"content":"Using VMware Aria Automation Action Constants and Secrets\nVMware Aria Automation VMware Aria Automation 8.14 was used for this Blog Post. When new versions of VMware Aria Automation are released, the code may need to be changed.\nAll the source code for this Blog is saved in my GitHub Repository. Click on the links within the blog to access the code.\nI wanted to share how I use Action Constants and Secrets within VMware Aria Automation. Action Constants are a great to have a variable that can be used with many Actions where the value may change. Instead of having to edit 10s or 100s of Actions, you change One Action Constant and all the Actions are updated instantly. Main reason to use Secrets is to keep the values of Passwords out of the code! Plus, like Action Constants, if a Password would change, all you need to do is change one Secret and all your Actions and Templates are automatically Updated. Secrets can also be used in the yaml code of Templates.\nAction Constants Action Constants Use Cases:\nvCenter Username vCenter FQDN VMware Aria Automation Config Username VMware Aria Automation Config FQDN salt master FQDN Any value used in Actions that may change from time to time To access Action Constants: Assembler/Extensibility/Actions/Actions Constants\nYou will see the Action Constants Names and Values. How to use Action Constants and Secrets with an Action:\nAdd the Action Constants and Secrets used within the Action in the Default inputs section. To use a Action Constant value within the Action PowerShell code use $inputs.\u0026ldquo;Action Constant\u0026rdquo; To use a Secret value within the Action PowerShell code use $context.getSecret($inputs.\u0026ldquo;Secret Name\u0026rdquo;) In the example code, review how I am connecting to the vCenter. No hard coded Username, Password or vCenter FQDN. If any of these values would change, I would never need to edit the Action, only the Action Constants and Secret. Link to code | GitHub Repository Secrets Secrets Use Cases:\nPasswords Any value you don\u0026rsquo;t want displayed in plain text within your code To access Secrets: Assembler/Infrastructure/Secrets/Secrets\nYou will see the Secret Names and Description only. You can never see the Secret value after you create it. If you think the value is not correct you need to re-enter the value. How to use Secrets with an Template:\nAdd code to the template yaml that is like this: password: \u0026lsquo;${secret.UbuntuPassword}\u0026rsquo; See Screen Shot Links to resources about Actions Constants and Secrets: Secret Automation Assembler properties How can I create extensibility action constants When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-11-14T00:00:00Z","image":"https://vcrocs.info/unlocking-the-potential-vmware-aria-automation-abx-action-constants-and-secrets/featured-image_hu_b5acce3f88bb30eb.png","permalink":"https://vcrocs.info/unlocking-the-potential-vmware-aria-automation-abx-action-constants-and-secrets/","title":"Unlocking the Potential | VMware Aria Automation | ABX Action Constants and Secrets"},{"content":"Using PowerShell with the VMware Aria Automation Config API\nVMware Aria Automation Config API: VMware Aria Automation 8.14 was used for this Blog Post. When new versions of VMware Aria Automation Config are released, the code may need to be changed.\nThere is a lot of Automation that I like to complete where I use the VMware Aria Automation Config API. The code that I am sharing is a PowerShell Script but the code could also be included in a VMware Aria Automation ABX Action, VMware Aria Automation Orchestrator Action or VMware Aria Automation Orchestrator Workflow.\nAll of my customers are 80% - 90% Microsoft Windows Servers. That is why you will see a lot of PowerShell code as examples in my Blog Posts. I like to share what my customers will use in their environments.\nAll the source code for this Blog is saved in my GitHub Repository. Please click on the link to see the code.\nLink | vCROCS | GitHub Repository Added these PowerShell Scripts to use with the VMware Aria Automation Config APIs These PowerShell Scripts are a good starting point to help you use the VMware Aria Automation Config APIs You can modify the scripts to work with any of the salt functions. The sample scripts show how to:\n[x] test.ping\n[x] grains.append\n[x] grains.remove\n[x] state.apply\n[x] key.delete The scripts will show you how to authenticate with VMware Aria Automation Config to use the APIs. The scripts will show you how to create the API Body to use with VMware Aria Automation Config. The scripts will show you how to use the Job ID (JID) to get the status of the job so you know when the job is complete and if it was successful. When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-11-12T00:00:00Z","image":"https://vcrocs.info/unlocking-the-potential-vmware-aria-automation-config-api/featured-image_hu_b5acce3f88bb30eb.png","permalink":"https://vcrocs.info/unlocking-the-potential-vmware-aria-automation-config-api/","title":"Unlocking the Potential | VMware Aria Automation Config API"},{"content":"Unlocking the Power of VMware Aria Operations: A Comprehensive Guide\nA Comprehensive Guide: Christopher Kusek and I teamed up to create this PowerBlock video, aimed at showcasing some of the new VMware Aria Operations features that have been in high demand among customers. In this video, we\u0026rsquo;ll be sharing valuable VMware Aria Operations Tips and Tricks.\nOur PowerBlock Agenda was inspired by conversations with VMware customers. When they expressed their surprise by saying, \u0026lsquo;We didn\u0026rsquo;t know you could do that,\u0026rsquo; we recognized the need to create this PowerBlock to share our insights with the vCommunity.\nWe invite you to take a moment to watch the video, as we\u0026rsquo;re confident you\u0026rsquo;ll discover some insightful new tips and tricks to enhance your VMware Aria experience.\nVideo Content: Learn how to set a home Dashboard and give some examples Learn about text display Widget use cases like VMware Cloud Services Status, Zoom Status, Weather Learn how Automation Central can cleanup Snaps and skip VMs if a specific vCenter TAG is added to VM, reboot VMs, Power on/off Cloud Native VMs Learn how to change “Snapshot Age older than” value in Automation Central Learn how a single Dashboard can monitor vCenter and Cloud Native VMs Learn about View Usage YouTube Video: Thank You: I want to extend my gratitude to Christopher Kusek for inviting me to collaborate on this video, which we are excited to share on his YouTube channel. Christopher has been a mentor to me from the moment I stepped into VMware. In my very first week at the company, even before we became colleagues on the same team, Christopher reached out to me and initiated a Zoom session. He expressed his genuine commitment to ensuring my success at VMware and offered valuable insights and guidance. Now that we\u0026rsquo;re both part of the same team, Christopher\u0026rsquo;s support continues to be an asset in my daily journey. Throughout one\u0026rsquo;s career, there are individuals who leave a lasting impact, and Christopher Kusek has played that role in mine. I will forever appreciate his guidance and cherish the friendship we\u0026rsquo;ve built. In this video, I\u0026rsquo;d like to acknowledge that some of the knowledge I\u0026rsquo;m sharing today was by fellow members of my team. We have a Slack channel where mutual support is a way of life. The culture within my team is nothing short of remarkable; it\u0026rsquo;s the most collaborative environment I\u0026rsquo;ve ever been a part of. Here, everyone is genuinely invested in each other\u0026rsquo;s success, always ready to extend a helping hand. I want to express my gratitude to Ron Singler and Aaron Dunbrow for recognizing my passion for the VMware Aria Suite of Products and extending me the opportunity to join the exceptional team at VMware. Being a part of this team as a Senior Cloud Solutions Architect has been an incredibly rewarding journey. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-10-25T00:00:00Z","image":"https://vcrocs.info/unlocking-the-potential-vmware-aria-operations-october-2023-powerblock/featured-image_hu_ab50017a4277988e.png","permalink":"https://vcrocs.info/unlocking-the-potential-vmware-aria-operations-october-2023-powerblock/","title":"Unlocking the Potential | VMware Aria Operations | October 2023 PowerBlock"},{"content":"How to change “Snapshot Age older than” value in VMware Aria Operations | Automation Central.\nVMware Aria Operations | Automation Central: The question \u0026ldquo;How to change “Snapshot Age older than” value in VMware Aria Operations | Automation Central\u0026rdquo; has been asked several times recently, so I created a video to show you how to change the value.\nWatch the video on my YouTube Channel to see the steps to change the “Snapshot Age older than” value for Automation Central.\nYouTube Video: Lessons Learned Out of the Box the “Snapshot Age older than” is set to 7 days within VMware Aria Operations. You can change the “Snapshot Age older than” value within Optimize|Reclaim|Settings. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-10-16T00:00:00Z","image":"https://vcrocs.info/unlocking-the-potential-vmware-aria-operations-automation-central-snapshot-age/featured-image_hu_117ec2b6fd6e840e.png","permalink":"https://vcrocs.info/unlocking-the-potential-vmware-aria-operations-automation-central-snapshot-age/","title":"Unlocking the Potential | VMware Aria Operations | Automation Central | Snapshot Age"},{"content":"How to Automate the ESXi Host \u0026ldquo;Syslog.global.logHost\u0026rdquo; setting, when using Cloud Proxies.\nThis blog post is part of a series of blog posts that will be created to help you \u0026ldquo;Unlock the Potential\u0026rdquo; of the VMware Aria Products. I want to give you some \u0026ldquo;Real World\u0026rdquo; examples that VMware admins could use everyday to help them with their daily tasks. Hopefully you will learn from my Tips and Tricks.\nVMware Aria Operations for Logs | SaaS Version: The Details in this Blog Post were created in October 2023. New VMware Aria Operations for Logs updates are released every month, so the details shown in this Blog Post could change.\nWhen you use VMware Aria Operations for Logs | SaaS Version, you need to have one or more Cloud Proxies to send the log info from your on-prem vCenter and ESXi Hosts to VMware Cloud Services. If you have more than (1) Cloud Proxy, there is no automated way built into VMware Aria Operations for Logs to distribute the Cloud Proxy usage. One way to set the vCenter ESXi hosts to use a specific Cloud Proxy, is to use a PowerCLI script. I included some sample scripts in this blog post to help you get started.\nLogic of the PowerCLI script:\nThe script will count the number of VMware Cloud Services, Cloud Proxies Specified The script will count the number of VMware vCenter ESXi Hosts in the vCenter Specified The script will equally distribute the number of vCenter ESXi Hosts per Cloud Proxy The script will set the Advanced System Setting \u0026ldquo;Syslog.global.logHost\u0026rdquo; on each ESXi Host ESXi Host Advanced System Settings:\nThis is how to manually set the \u0026ldquo;Syslog.global.logHost\u0026rdquo; on each ESXi Host Cloud Proxies:\nGo to Configuration/Cloud Proxies to see all the Proxies added Cloud Proxy Information:\nCloud Proxy Details like State, CPU, Memory vSphere Integration:\nGo to Configuration/vSphere Integration to see all the vCenters added vCenter Server Configuration:\nvCenter Server Configuration You can use this screen to set which Cloud Proxy to use but if you have 100s or 1000s of Hosts, I find it easier to use the script included in this Blog Post. PowerShell Code: Set “Syslog.global.logHost” value on all Hosts Sample Script to set the \u0026ldquo;Syslog.global.logHost\u0026rdquo; value on each ESXi Host The script will balance the usage of the Cloud Proxies The script could be scheduled to run every day to maintain the correct settings. Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 # ----- Set Variable Values to use with Script $vcServer = \u0026#34;vcsa8x.corp.local\u0026#34; $vcUser = \u0026#34;administrator@corp.local\u0026#34; $vcPassword = \u0026#34;VMware1!\u0026#34; # ----- This example uses (1) syslog setting for each host. #$syslogServers = \u0026#34;udp://vaol-vip.corp.local:514\u0026#34; # ----- This example uses (2) syslog settings for each host. #$syslogServers = \u0026#34;udp://vaol-vip.corp.local:514,tcp://DBH-CP-VAOL-01.corp.local:514\u0026#34; # ----- This example uses (2) syslog settings divided equally between hosts. #$syslogServers = \u0026#34;udp://vaol-vip.corp.local:514;udp://vaol-01.corp.local:514\u0026#34; # ----- This example uses (3) syslog settings divided equally between hosts. $syslogServers = \u0026#34;udp://vaol-vip-03.corp.local:514;udp://vaol-vip-02.corp.local:514;udp://vaol-vip-01.corp.local:514\u0026#34; # ----- This example uses (4) syslog settings divided equally between hosts. #$syslogServers = \u0026#34;udp://vaol-vip-01.corp.local:514;udp://vaol-vip-02.corp.local:514;udp://vaol-vip-03.corp.local:514;udp://vaol-vip-04.corp.local:514\u0026#34; # ----- Get list of syslog server specifed and seperated by semicolons. Semicolons were used in case you would want to specify (2) syslog servers seperated by commas. $syslogServerList = $syslogServers.Split(\u0026#34;;\u0026#34;) $syslogServerList = $syslogServerList | Sort-Object $output = \u0026#34;syslog Server List: \u0026#34; + $syslogServerList Write-Output $output [int]$syslogServerCount = $syslogServerList.Count $output = \u0026#34;syslog Server Count: \u0026#34; + $syslogServerCount Write-Output $output # ----- Connect to the vCenter Server or ESXi host Connect-VIServer -Server $vcServer -User $vcUser -Password $vcPassword -Protocol https -Force if($syslogServerCount -gt 1){ # ----- Get Number of Hosts $hostList = Get-VMHost | Select-Object Name | Sort-Object Name #$hostList [int]$hostCount = $hostList.Count # ----- Total Number of Hosts $output = \u0026#34;Host Count: \u0026#34; + $hostCount Write-Output $output # ----- Calculate how to divide the hosts $baseValue = [math]::Floor($hostCount / $syslogServerCount) $remainder = $hostCount % $syslogServerCount # ----- Create an array to hold the results $syslogProxyNumber = @(1..$syslogServerCount | ForEach-Object { $baseValue }) #$syslogProxyNumber # ----- Distribute the remainder among the numbers for ($i = 0; $i -lt $syslogServerCount; $i++) { if ($remainder -eq 0) { break } $syslogProxyNumber[$i]++ $remainder-- } $output = \u0026#34;Hosts Per Syslog Group: \u0026#34; + $syslogProxyNumber Write-Output $output $output = \u0026#34;Highest sysloggroup array value: \u0026#34; + ($syslogProxyNumber.Count - 1) Write-Output $output $output = \u0026#34;Syslog Group Count: \u0026#34; + $syslogProxyNumber.Count Write-Output $output # ----- Calculate the sum [int]$sum = ($syslogProxyNumber | Measure-Object -Sum).Sum $output = \u0026#34;Total Hosts to add syslog info: \u0026#34; + $sum Write-Output $output if($sum -eq $hostCount){ Write-Output \u0026#34;Hosts were divided as equal as posible\u0026#34; } else{ Write-Output \u0026#34;Hosts were NOT divided equal. TRY AGAIN!\u0026#34; } } # End If else{ Write-Output \u0026#34;Only 1 syslog Server was specififed!\u0026#34; } # end else $syslogProxyNumberArrayValue = 0 $servercountstart = 1 $serverCountTotal = $syslogProxyNumber[$syslogProxyNumberArrayValue] # Loop thru ESXi Hosts foreach($esxiName in $hostList){ # ----- Create Server Count Number $servercountstartstr = \u0026#39;0000\u0026#39; + $servercountstart $servercountstartstr = $servercountstartstr[-4..-1] -join \u0026#39;\u0026#39; # ----- Set the syslog Host value on Each ESXi Host if($syslogServerCount -gt 1){ $output = \u0026#34;Server Count: \u0026#34; + $servercountstartstr + \u0026#34; | ESXi Server Name: \u0026#34; + $esxiName.Name + \u0026#34; | Proxy Name: \u0026#34; + $syslogServerList[$syslogProxyNumberArrayValue] Write-Output $output # ----- Set the Syslog.global.logHost value $output = \u0026#34;------------- Get-VMHost \u0026#34; + $esxiName.Name + \u0026#34; | Get-AdvancedSetting -Name \u0026#39;Syslog.Global.Loghost\u0026#39; | Set-AdvancedSetting -Value \u0026#34; + $syslogServerList[$syslogProxyNumberArrayValue] + \u0026#34; -Confirm:$false\u0026#34; Write-Output $output # ----- The next line will make the changes. Remove the line comment after you test the script and make sure you are getting the results you want to use. #Get-VMHost $esxiName.Name | Get-AdvancedSetting -Name \u0026#39;Syslog.Global.Loghost\u0026#39; | Set-AdvancedSetting -Value $syslogServerList[$syslogProxyNumberArrayValue] -Confirm:$false } # End If elseif($syslogServerCount -eq 1){ $output = \u0026#34;Server Count: \u0026#34; + $servercountstartstr + \u0026#34; | ESXi Server Name: \u0026#34; + $esxiName.Name + \u0026#34; | Proxy Name: \u0026#34; + $syslogServerList Write-Output $output # ----- The next line will make the changes. Remove the line comment after you test the script and make sure you are getting the results you want to use. #Get-VMHost $esxiName.Name | Get-AdvancedSetting -Name \u0026#39;Syslog.Global.Loghost\u0026#39; | Set-AdvancedSetting -Value $syslogServerList -Confirm:$false } # End Elseif # ----- Increment Host Count and switch which Proxy to use based on count $servercountstart++ if($servercountstart -gt $serverCountTotal -and $syslogServerCount -gt 1){ $servercountstart = 1 $syslogProxyNumberArrayValue++ $serverCountTotal = $syslogProxyNumber[$syslogProxyNumberArrayValue] } # End If } # End foreach # ----- Disconnect from the vCenter Server or ESXi host Disconnect-VIServer -Server $vcServer -Confirm:$false Get current “Syslog.global.logHost” value on all Hosts Here is a sample script that can be used to show the current \u0026ldquo;Syslog.global.logHost\u0026rdquo; values Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # ----- [ Get current sysloghost value on all Hosts ] ----- # ----- Set Variable Values to use with Script $vcServer = \u0026#34;vcsa8x.corp.local\u0026#34; $vcUser = \u0026#34;administrator@corp.local\u0026#34; $vcPassword = \u0026#34;VMware1!\u0026#34; # ----- File Name to store data $filePath = \u0026#34;C:\\Github\\PS-TAM-Lab\\syslog-current-info.csv\u0026#34; # ----- Connect to the vCenter Server or ESXi host Connect-VIServer -Server $vcServer -User $vcUser -Password $vcPassword -Protocol https -Force # ----- Get list of all Hosts $hostList = Get-VMHost | Select-Object Name | Sort-Object Name # ----- Create new CSV file New-Item -Path $filePath -ItemType File -Force # ----- add header to CSV file Add-Content -Path $filePath -Value \u0026#34;ServerName,syslogName\u0026#34; # ----- Get all ESXi Hosts $hostList = Get-VMHost | Select-Object Name | Sort-Object Name # ----- Output Data to screen and the CSV file foreach($hostName in $hostList){ $syslogInfo = Get-VMHost -Name $hostName.Name | Get-AdvancedSetting -Name \u0026#34;Syslog.global.logHost\u0026#34; $output = \u0026#34;Server Name: \u0026#34; + $syslogInfo.Entity.Name + \u0026#34; | syslog Name: \u0026#34; + $syslogInfo.Value Write-Output $output # ----- add info to csv file $addContentstr = $syslogInfo.Entity.Name + \u0026#34;,\u0026#34; + $syslogInfo.Value Add-Content -Path $filePath -Value $addContentstr } # End foreach # ----- Disconnect from the vCenter Server or ESXi host Disconnect-VIServer -Server $vcServer -Confirm:$false Sample Output from script: Set “Syslog.global.logHost” value to null on all Hosts Sample script if you would ever want to set the \u0026ldquo;Syslog.global.logHost\u0026rdquo; values to null on all the ESXi Hosts. Click arrow to expand the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # ----- [ Set sysloghost value to null on all Hosts ] ----- # ----- Set Variable Values to use with Script $vcServer = \u0026#34;vcsa8x.corp.local\u0026#34; $vcUser = \u0026#34;administrator@corp.local\u0026#34; $vcPassword = \u0026#34;VMware1!\u0026#34; # ----- Connect to the vCenter Server or ESXi host Connect-VIServer -Server $vcServer -User $vcUser -Password $vcPassword -Protocol https -Force # ----- Get list of all Hosts $hostList = Get-VMHost | Select-Object Name | Sort-Object Name # ----- Get all ESXi Hosts $hostList = Get-VMHost | Select-Object Name | Sort-Object Name # ----- Output Data to screen and a CSV file. foreach($hostName in $hostList){ $output = \u0026#34;Server Name: \u0026#34; + $hostName.Name + \u0026#34; | syslog Name: Set to null\u0026#34; Write-Output $output # ----- Set logserver address to null Set-VMHostSysLogServer -SysLogServer $null -VMHost $hostName.Name } # End foreach # ----- Disconnect from the vCenter Server or ESXi host Disconnect-VIServer -Server $vcServer -Confirm:$false Get “Syslog.global.logHost” address on a specific Host Very simple script to get the \u0026ldquo;Syslog.global.logHost\u0026rdquo; values on a single ESXi host. Click arrow to expand the code:\n1 2 # ----- Simple Get syslogserver address on a specific Host Get-VMHostSysLogServer -VMHost \u0026#39;esxi8-05.corp.local\u0026#39; Lessons Learned When you use VMware Aria Operations for Logs | SaaS Version, you may need more than one Cloud Proxy If you have more than one Cloud Proxy, you will need a way to balance the usage between the Proxies If you have 10s, 100s or 1000s of ESXi Hosts, using a script will be the easiest and quickest way to specify \u0026ldquo;Syslog.global.logHost” values. When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-10-07T00:00:00Z","image":"https://vcrocs.info/vmware-aria-operations-for-logs-saas-esxi-host-syslog-setting/featured-image_hu_9985bc8e77ecc97f.png","permalink":"https://vcrocs.info/vmware-aria-operations-for-logs-saas-esxi-host-syslog-setting/","title":"VMware Aria Operations for Logs (SaaS) | ESXi Host syslog setting"},{"content":"The VMware Community Podcast, episode #659 | I was a Guest on the show\nPodcast Guest: I listen to Podcasts all the time. If the Podcast covers VMware Products, you will find it in my playlist and I will listen to all the episodes. The VMware Communities Podcast has been on my playlist for many years. I was able to meet a regular co-host on the podcast, Matt Langguth, while attending the Central PA VMUG events and \u0026ldquo;Little Hacks\u0026rdquo; hosted by a business in the Altoona, PA Area. Matt and I attended a VMware event together in July, in the Pittsburgh, PA area. When I told Matt what was I was going to be involved with at VMware Explore 2023, he thought it would make a good podcast episode to share with the vCommunity. I said that I would be happy to join the VMware Communities Podcast and discuss how I was a Hackathon Team Captain and talk about the presentation that I did in the VMware {code} Theater.\nMatt was also the person that introduced me to the VMware vExpert program. With his encouragement at a \u0026ldquo;Little Hack\u0026rdquo;, I applied and have been a part of the vExpert program since 2020. The vCommunity has been a great experience for me to meet friends and also advance my career.\nHopefully the vCommunity enjoys this episode. I thought this would be another great way to give back to the community and share some information.\nEpisode Info: The episode I recorded with \u0026ldquo;VMware Community Podcast #659\u0026rdquo; was released on 09/06/2023.\nHosts and Show on Socials: Eric Nielson Corey Romero Matt Langguth VMware Community Podcast Podcast Discussion: How did I get started with vCommunity My career path The VMUG vCommunity and other User Groups The 2023 VMware Explore Hackathon My Presentation at VMware Explore 2023 in the {code} Theater Link to Podcast on YouTube: Enjoy the listen!\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-09-06T00:00:00Z","image":"https://vcrocs.info/the-vmware-community-podcast-i-was-a-guest-on-the-show/featured-image_hu_1329ac22a794ce94.png","permalink":"https://vcrocs.info/the-vmware-community-podcast-i-was-a-guest-on-the-show/","title":"The VMware Community Podcast | I was a Guest on the show"},{"content":"VMware Expore 2023 was the best Conference that I ever attended!\nYou may be wondering why the headline says \u0026ldquo;VMware Explore 2023 was the best Conference that I ever attended!\u0026rdquo;. Here are my reasons.\nI got to meet some of my co-workers in person and shake their hand and thank them personally for all their help and support. So many people helped me get to where I am in my career and it was good for me to personally thank them.\nI was the Team Captain of a Hackathon Team that won 2nd place. The Hackathon Team was a great group of people that I will now call my friends for the rest of my life. During the Hackathon I did 1:1 presentations to Alan Renouf, Chris Wolf and other great Hackathon Judges. While doing the 1:1 to Alan, William Lam was also at my table to discuss the Teams project.\nHackathon Team: Tina Krogull Wes Milliron Viviana Miranda Madison Welsch Edgar Sanchez Dale Hassinger I did my first live presentation in the VMware {code} Theater. The session was full with friends, co-workers, customers and other conference attendees. The feedback after my presentation was great with many people wanting more information and follow-ups. The topic was of interest to a lot of people.\nThere were many sessions with new VMware product announcements that are very exciting. Go view the recorded session videos on the VMware Explore Web Site.\nAttending VMware Explore as an employee for the first time was a much different experience than when I was customer. I had a feeling of pride for being part of such a great company and culture.\nFavorite PICs from VMware Explore 2023. My Presentation in the VMware {code} Theater:\nMy Presentation in the VMware {code} Theater:\nAt the Hackathon:\nAt the Hackathon with Alan Renouf and William Lam:\nHackathon 2nd place trophy. Won by the Team that I was the Captain:\nHackathon participants and Judges:\nHackathon Team Member Ed Sanchez:\nHackathon Team Member Viviana Miranda:\nChristopher Kusek: Friend, Mentor, Team Member:\nChristopher Kusek: Doing an awesome presentation:\nChristopher Kusek (L) and Iwan \u0026rsquo;e1\u0026rsquo; Rahabok (R) | Both part of the Aria Family and friends:\nCosmin Trif (L) Christopher Kusek (C) and Ron Singler (R) | Members of my Team, Friends, Mentors:\nAriel Sanchez (L) Christina Griffus (R) | (2) of the Best TAMs and Mentors you will ever meet:\nleft to right: Ariel Sanchez, Greg Bates, Dale Hassinger, Ed Sanchez, Admin Willie | All friends from the vCommunity:\nAriel Sanchez Packing the house during his session:\nHealthcare SE Breakfast group | Marjorie Abdelkrime, Cory Lyons, Jeff Pardi, Dan Mitchell, Dale Hassinger | Another great group of co-workers:\nWhiskey that I shared with Ariel Sanchez. Small token of my appreciation for everything he has done for me in my career:\nAmanda Blevins (l) Ariel Sanchez (c) Viviana Miranda (r) | All great people and members of the VMware family:\nNathan Bennett | We met on the socials and did a podcast together:\nVMware Aria Operations Dashboard used at Hands On Labs:\nHackathon Team:\nVMware {code} Theater Session:\nVideo of the Presentation at VMware Explore 2023. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-08-26T00:00:00Z","image":"https://vcrocs.info/vmware-explore-2023-review-and-experience/featured-image_hu_9fee1fd2009583e3.png","permalink":"https://vcrocs.info/vmware-explore-2023-review-and-experience/","title":"VMware Explore 2023 | Review and Experience"},{"content":"Use VMware Aria to Create/Manage/Monitor Windows Servers (on-prem/cloud)\nI will be doing a VMware Explore 2023 Presentation. I did a virtual VMWorld presentation in 2021 but this will be my first VMware Explore Presentation that I will be doing \u0026ldquo;Live\u0026rdquo;. There will be many days going into this presentation so that the people attending will feel it was worth their time to learn about the topic. This is an awesome topic that I am very passionate about.\nSo register today for VMware Explore 2023 and attend my session.\nSession Name: Use VMware Aria to Create/Manage/Monitor Windows Servers (on-prem/cloud) [CODE2501LV]\nDescription: Learn how to create Windows Servers on-prem and in the cloud, see how to use the saltstack resource with the cloud template, add grain data with the cloud template, install software using the windows repo, add Windows Server roles and features with states, and use states to maintain your Windows Server configuration. After creating Windows Servers, you will also see how to monitor on-prem and cloud servers with VMware Aria Operations.\nPresenters: Dale Hassinger, Senior Cloud Solutions Architect, vExpert\nTopic: Use VMware Aria to Create/Manage/Monitor Windows Servers (on-prem/cloud)\nSession ID: CODE2501LV\nTrack : Multi-Cloud\nPrimary Products: VMware Aria Automation | VMware Aria Automation Config | VMware Aria Operations\nSession Type: VMware {code} Theater Session\nVMware Explore Conference: 08/21/2023-08/24/2023\nLink to My Session: My Session | Use VMware Aria to Create/Manage/Monitor Windows Servers (on-prem/cloud)\nLink to VMware Explore 2023 Content Catalog: VMware Explore 2023 | Content Catalog\nSource Code: All the code from my Presentation is in my GitHub Repository.\nHere is the link:\nvCROCS | GitHub Repository PICs of the Presentation at VMware Explore 2023. Video of the Presentation at VMware Explore 2023. The presentation was well attended. There was some good discussions with some of the attendees after the presentation. Thank You to everyone that took the time from their schedule to attend my presentation.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-08-18T00:00:00Z","image":"https://vcrocs.info/vmware-explore-2023-presentation/featured-image_hu_e7ab12a72a10c3d8.png","permalink":"https://vcrocs.info/vmware-explore-2023-presentation/","title":"VMware Explore 2023 | Presentation"},{"content":"VMware Explore 2023 | Hackathon Team Captain\nVMware Explore 2023 Hackathon: I will be participating in the VMware Explore 2023 Hackathon. I am the Team Captain for the \u0026ldquo;Well Spoken\u0026rdquo; Team. This Blog Post will be documenting the journey of the \u0026ldquo;Well Spoken\u0026rdquo; Team.\nI want to thank Senior Staff TAM, Ariel Sanchez, for organizing the Team. Originally we were going to be part of Ariel\u0026rsquo;s Team but there were too many people, so we split the Team in half. Ariel asked me to be the Captain of the 2nd Team. If you know Ariel, you know why he had too many people on his team. Ariel is very active in the #vCommunity and does a great job promoting the #vCommunity. So when he asked on social platforms for people to join his team, there was instantly interest from a lot of people. Ariel has done a lot for me personally since I started working at VMware and I can\u0026rsquo;t wait to meet him in person at the Hackathon.\nTeam Name: \u0026ldquo;Well Spoken\u0026rdquo;\nTeam Hack: \u0026ldquo;How to use Generative AI to create new Automation or Convert Existing.\nTeam Description: \u0026ldquo;Be prepared as they unveil their approach to transforming ordinary conversations into mind-boggling automation scripts. From novices to seasoned professionals, the team will unlock the secrets of this cutting-edge technology. Together, we shall revolutionize the way we automate VMware Products.\u0026rdquo;\nTeam Members: Tina Krogull | Senior Technical Adoption Manager | Germany\nWes Milliron | Technical Adoption Manager | Pennsylvania\nViviana Miranda | Senior Technical Marketing Architect | Costa Rica\nMadison Welsch | Technical Adoption Manager | Ohio\nEdgar Sanchez | Systems Engineer II-VR/Windows at UMB | Alabama\nDale Hassinger | Technical Adoption Manager | Pennsylvania\nThis is an AWESOME Team! I think it is great how we will be able to work together as an International Team. There is a lot of great experience and backgrounds on this Team.\nUpdate 07/07/2023: Come back often to check for updates on how the \u0026ldquo;Hacking\u0026rdquo; is proceeding!\nUpdate 08/15/2023: The \u0026ldquo;Well-Spoken\u0026rdquo; Team:\nThe Team is almost ready. We are looking forward to doing our presentation to the Hackathon Judges.\nHere is a Sneak Peak at what we are working on. We will make it easier for anyone to get started with Automation.\nUpdate 08/25/2023: The \u0026ldquo;Well-Spoken\u0026rdquo; Team got 2nd place at the VMware Explore Hackathon! There was a total of 9 Teams.\nI am so proud of what the \u0026ldquo;Well-Spoken\u0026rdquo; Team created together. There was great collaboration throughout the whole process.\nThe Team created a custom form in VMware Aria Automation that will help you build a chat question that would be sent to ChatGPT and return complete usable scripts to use with Automation. The Scirpt returned could then be saved into a Teams/Slack Channel, GitHub Repository or a VMwaqre Aria Operations Dashboard.\nThis custom form will help customers get started with Automation and also convert existing Automation, like an Ansible Playbook, into a salt state file.\nAward: Great discussion with Alan Renouf and William Lam:\nAll Participates and Judges:\nEd Sanchez and I:\nViviana Miranda and I:\nIt would have been nice if the Whole Hackathon Team would have been able to attend the Hackathon. Maybe next year. Fingers crossed\u0026hellip;\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-08-15T00:00:00Z","image":"https://vcrocs.info/vmware-explore-2023-hackathon/featured-image_hu_4dbd3a0239407805.png","permalink":"https://vcrocs.info/vmware-explore-2023-hackathon/","title":"VMware Explore 2023 | Hackathon"},{"content":"GitHub Repository | Code and Examples to help you get started\nCreating a Blog Post every time I want to share a new code example or a new Dashboard Design can take a lot of time. To keep it simple for some items I want to share, I created a GitHub Repository. This will be a nice way for me to quickly add code more often. So go take a look at the GitHub Repository, and check back often. I will continue to do the more detailed Blog Posts, but I will also add a lot of snippets of code to the repository to share with the vCommunity.\nGitHub Repository Name: \u0026ldquo;Unlocking The Potential\u0026rdquo; Collection of items for the VMware Aria Admin and Automation | Monitoring | Logging Enthusiast.\nVMware Aria Automation | vRA Templates abx scripts Workflows VMware Aria Automation Config | SaltStack Config state files jobs VMware Aria Operations | vROPS Dashboards Views Super Metrics Metric Search Examples VMware Aria Operations for Logs | Log Insight PowerShell Scripts PowerCLI Scripts Ansible Playbooks Link to GitHub Repository: GitHub Repository | \u0026ldquo;Unlocking The Potential\u0026rdquo;.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-06-24T00:00:00Z","image":"https://vcrocs.info/github-repository-code-and-examples-to-help-you-get-started/featured-image_hu_f1a3222cb49651ee.png","permalink":"https://vcrocs.info/github-repository-code-and-examples-to-help-you-get-started/","title":"GitHub Repository | Code and Examples to help you get started"},{"content":"Custom Form Versioning Demo\nVMware Aria Automation 8.12 Released: With the release of VMware Aria Automation 8.12, Custom Form Versioning was added to the Product. I use a lot Custom Forms with the Automation that I create, so I wanted to make sure I understood how the versioning feature worked. If you never did versioning before, this Blog Post should save you some time getting started and help you understand how the new features was designed to work.\nHow to Video: Here is a video that shows you the process to use Custom Form Version Control. There are several steps involved with versioning, so I thought a video would be the best way to show you how the new feature works.\nHow to start with previous custom form This screen shot is a very important step to start with previous version of Custom Form. Use \u0026ldquo;New Form From\u0026rdquo; and select previous version. You will then have all the custom changes you made in previous version as a starting point for new version.\nLessons Learned When you release a new Template version to the Catalog, make sure to use the \u0026ldquo;New Form From\u0026rdquo; to start with all previous changes. Custom Form Versioning makes it very easy to role back changes. Overall, nice new feature added to VMware Aria Automation 8.12. Links I found to be very helpful: VMware Blog: VMware Aria Automation April (8.12.0) – Custom Forms Version History When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-05-20T00:00:00Z","image":"https://vcrocs.info/unlocking-the-potential-vmware-aria-automation-custom-form-versioning/featured-image_hu_b5acce3f88bb30eb.png","permalink":"https://vcrocs.info/unlocking-the-potential-vmware-aria-automation-custom-form-versioning/","title":"Unlocking the Potential | VMware Aria Automation | Custom Form Versioning"},{"content":"Adding \u0026ldquo;DoNotDelete\u0026rdquo; to a VM Snap Name to control if Auto Deleted.\nVMware Aria Operations 8.12 Released: With the release of VMware Aria Operations 8.12, \u0026ldquo;Snapshot Name\u0026rdquo; was added to \u0026ldquo;Delete old snapshots\u0026rdquo;.\nDelete old snapshots: Adding \u0026ldquo;Snapshot Name\u0026rdquo; to \u0026ldquo;Delete old snapshots\u0026rdquo; in Automation Central may seem like a small change but it adds a lot of Power to the process. This change allows you to create a Job to run everyday that will delete all Snaps on VMs EXCEPT Snaps that have \u0026ldquo;DoNotDelete\u0026rdquo; in the name.\nYou could also do the opposite with this process. You can have the job only delete Snapshots where the Snap Name contains the text \u0026ldquo;AutoDelete\u0026rdquo;. I prefer using the method to auto delete all old VM snaps, unless you tell me not to. After being a VMware administrator for many years, I have seen to many VMs running with snaps older that 30 days or even with multiple snaps running and each snap 60+ days old. That is NOT best practice. VM Snaps are NOT Backups. Using Automation Central within VMware Aria Operations helps you keep your environment running better and helps you follow some best practice rules.\nSchedule, Report, History amd Jobs Here are the screens you will see in Automation Central, Schedule, Report, History amd Jobs.\nSchedule: Nice calendar view of all scheduled jobs. Report: Shows you how much storage you were able to re-claim by deleting old snaps. History: Shows you every time a Snap was deleted with details. Jobs: List of all Jobs you created. Lessons Learned Using the VMware Aria Operations Automation Central is a great way to keep snapshots cleaned up on VMs. Add the text \u0026ldquo;DoNotDelete\u0026rdquo; to the Snap Name, makes an easy way to save Snaps that shouldn\u0026rsquo;t be auto deleted. Overall nice new feature added to VMware Aria Operations 8.12. Links I found to be very helpful: VMware Blog: What’s New in VMware Aria Operations 8.12 When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-05-13T00:00:00Z","image":"https://vcrocs.info/unlocking-the-potential-vmware-aria-operations-automation-central-vm-snaps/featured-image_hu_4c7de3d9232b4b58.png","permalink":"https://vcrocs.info/unlocking-the-potential-vmware-aria-operations-automation-central-vm-snaps/","title":"Unlocking the Potential | VMware Aria Operations | Automation Central | VM Snaps"},{"content":"Example metric queries to help you with \u0026ldquo;Real World\u0026rdquo; questions.\nThis blog post is the start of a series of blog posts that will be created to help you \u0026ldquo;Unlock the Potential\u0026rdquo; of the VMware Aria Products. I want to give you some \u0026ldquo;Real World\u0026rdquo; examples that VMware admins could use everyday to help them with their daily tasks. Hopefully you will learn from my Tips and Tricks.\nVMware Aria Operations 8.12 Released: With the release of VMware Aria Operations 8.12, Metric Searches was added to the product.\nI always like to create Dashboards with VMware Aria Operations to show metric information that I think is important to a VMware Admin. I think that metric searches will help provide a lot of information that is not included on existing or custom dashboards. Metric Searches will also allow non-admins, that don\u0026rsquo;t have permission to create dashboards and views, to see specific information to help troubleshoot an issue.\nI really like how the results of a metric search will stack and then you can scroll to see what item has the highest value. You can change the results to show different time ranges. After results are displayed you can also start defining the parents of the results.\nSearch Examples: In this example the metric search found all VMs with CPU|Ready ms \u0026gt; 750 ms. When search is complete you can define the search further by selecting the parent host.\n1 2 # --- Find All VMs with CPU|Ready ms \u0026gt; 750 ms Metric: Virtual Machine where CPU|Ready ms \u0026gt; 750 ms Now lets take the search used above and define the results further by specifying host or cluster. 1 2 3 4 5 # --- Find All VMs with CPU|Ready ms \u0026gt; 750 ms WHERE the host is esx-02a.corp.local Metric: Virtual Machine where CPU|Ready ms \u0026gt; 750 ms childOf esx-02a.corp.local # --- Find All VMs with CPU|Ready ms \u0026gt; 750 ms WHERE the cluster is Cluster-01 Metric: Virtual Machine where CPU|Ready ms \u0026gt; 750 ms childOf Cluster-01 Example Metric Searches for VMs: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # --- Find All VMs with CPU usage % greater than 90 Metric: Virtual Machine where CPU|Usage % \u0026gt; 90 # --- Find All VMs with Memory usage % greater than 90 Metric: Virtual Machine where Memory|Usage % \u0026gt; 90 # --- Find All VMs with Snap Shots older than 2 days Metric: Virtual Machine where {Disk Space|Snapshot|Age (Days)} \u0026gt; 2 # --- Find All VMs running longer than 30 days. Shows VMs not patched if you do monthly patching. Metric: Virtual Machine where {System|OS Uptime Second(s)} \u0026gt; 30 {Day(s)} # --- Show CPU and Memory usage for all VMs with a specific string in the name Metric: Virtual Machine where CPU|Usage % \u0026gt; 0 and Memory|Usage % \u0026gt; 0 and Configuration|Name contains \u0026#39;rocky\u0026#39; # --- Show CPU and Memory usage for a specific VM Metric: Virtual Machine where CPU|Usage % \u0026gt; 0 and Memory|Usage % \u0026gt; 0 and Configuration|Name equals \u0026#39;DBH-196\u0026#39; # --- Show CPU and Memory usage for all VMs in a specific Cluster Metric: Virtual Machine where CPU|Usage % \u0026gt; 0 and Memory|Usage % \u0026gt; 0 and Summary|Parent Cluster equals \u0026#39;Cluster-02\u0026#39; Example Metric Searches for Hosts: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # --- Show Hosts with High CPU Usage Metric: Host System where CPU|Usage % \u0026gt; 80 # --- Show Hosts with High Memory Usage Metric: Host System where Memory|Usage % \u0026gt; 80 # --- Show Hosts In Maintenance Mode Metric: Host System where Runtime|Maintenance State equals \u0026#39;inMaintenance\u0026#39; # --- Show Hosts where Health is less than 100% Metric: Host System where Badge|Health % \u0026lt; 100 # --- Show Hosts where Workload is greater than 75% Metric: Host System where Badge|Workload % \u0026gt; 75 # --- Show CPU Usage and Memory Usage for all Hosts In a Specific Cluster Metric: Host System where CPU|Usage % \u0026gt; 0 and Memory|Usage % \u0026gt; 0 and Summary|Parent Cluster equals \u0026#39;Cluster-01\u0026#39; Example Metric Searches for Clusters: 1 2 # --- Show Clusters where DRS was turned off Metric: Cluster Configuration|DRS Configuration|Enabled of Cluster Compute Resource where Cluster Configuration|DRS Configuration|Enabled equals \u0026#39;false\u0026#39; Example Metric Searches for Datastores: 1 2 3 4 5 # --- Show Datastores where Capacity used is greater than 75% Metric: Datastore where Capacity|Used Space % \u0026gt; 75 # --- Show Datastores where Health is less than 100% Metric: Datastore where Badge|Health % \u0026lt; 100 These metric search query examples should give you some good ideas of what you can do. Take these examples and change to make your own. Have Fun!\nMetric search queries remind me of one of my favorite quotes:\nYour thought process is the most powerful automation tool you’ll ever have! - Cody De Arkland\nStream Deck If you\u0026rsquo;re thinking to yourself, I don\u0026rsquo;t want to have to type or copy/paste these metric searches everyday, I have a solution. STREAM DECK! If you ever wanted an excuse to spend the money for a Stream Deck, now is the time! You can program the buttons of a Stream Deck to do the searches. There is a button type in the Stream Deck called text. Enter the metric search query as the text. See the screen shot below. AWESOME!\nDemo of doing Multiple Searches in a row and all the text is entered by the Stream Deck.\nHow to use the Kebab menu to go to the TroubleShooting Workbench Here is an example of all the steps above and then also choosing the kebab menu to go to the troubleshooting workbench.\nEnter Search String with Stream Deck Review the VMs for high CPU Change the date range to 7 days to see how long the VM has been at 100% usage Go to the troubleshooting WorkBench to see why the CPU usage is so high. Lessons Learned Metric Searches are a great way to do get some quick data. Nice way for non-admins to get data they want to see that isn\u0026rsquo;t included in OOTB (Out of The Box) Dashboards and Views. Quick way to be able to stack metrics from multiple objects. Metric Search adds a way to extend how you would use Aria Operations Standard version, because you can not create custom dashboards and views. Links I found to be very helpful: VMware Blog: Metric-Based Search Improvements in VMware Aria Operations When I write my blogs, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete the tasks in this article.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-05-06T00:00:00Z","image":"https://vcrocs.info/unlocking-the-potential-vmware-aria-operations-metric-search/featured-image_hu_4c7de3d9232b4b58.png","permalink":"https://vcrocs.info/unlocking-the-potential-vmware-aria-operations-metric-search/","title":"Unlocking the Potential | VMware Aria Operations | Metric Search"},{"content":"How to show RVTools data in a VMware Aria Operations Dashboard.\nI know a lot of VMware admins that use RVTools on a regular basis. RVTools was #1 on the VMware Tools list on vSpeaking Podcast Episode 108. When I was a VMware Customer, I used RVTools for 10+ years.\nRecently I was asked how to see some of the data that RVTools generates in a VMware Aria Operations Dashboard. Some of the data displayed in the RVTools vHealth Worksheet is not a metric or property that VMware Aria Operations collects or generates. The company uses VMware Aria Operations for all monitoring and thought it would be nice to see this additional data in a VMware Aria Operations Dashboard. They would auto generate the RVTools files everyday, but it was additional steps to open the generated spreadsheet file, plus they had to remember to go look at the RVTools data. If the RVTools data was in a Dashboard, they thought it would be easier to see and wouldn\u0026rsquo;t have to remember to go look at the data. They would make the RVTools Dashboard a favorite in VMware Aria Operations and look at the data everyday.\nIf you don\u0026rsquo;t use RVTools today, take some time and review it. There are some good use cases for using the product. Awesome to see a Product developed by a VMware admin to make his life easier, and then shared and used by over a million people within the vCommunity.\nUse Case Customer used RVTools to see data about their VMware environment. Customer used VMware Aria Operations for all monitoring. Customer wanted to have a VMware Aria Operations Dashboard that showed RVTools data to create a \u0026ldquo;Single Pane of Glass\u0026rdquo; experience. Steps to complete the process: Automate the process to generate the RVTools xlsx file everyday. Generate html files from the RVTools xlsx file, to display in a VMware Aria Operations Dashboard. Need access to a Web Server of your choice to save the html files. The files are static, so any flavor of web server will work. RVTools vHealth data in a VMware Aria Operations Dashboard: Screen shot of Dashboard PowerShell Script: The script was created to be dynamic. No worksheet names or field names are hard coded. If new Worksheets or fields are added to RVTools in the future, they will automatically be picked up with this script.\nRVTools provides a program to encrypt your password that will be used with the script. The program is named \u0026ldquo;RVToolsPasswordEncryption.exe\u0026rdquo;.\nThe PowerShell Script uses the importexcel PowerShell Module to see the data in the RVTools xlsx file. If you have never used the importexcel module, please review to see if you would have other use cases. No need to have Excel Installed. Works Awesome, one of my Favorite PowerShell Modules. Thanks Doug Finke Click to expand PowerShell code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 # Created By: Dale Hassinger # Blog Site: www.vCROCS.info # Notes: # This script uses the importexcel powershell module # find-module importexcel # install-module importexcel # Script Description: Creates RVTools xlsx file and creates a web page for every worksheet. # ----- [ Function to Create the HTML Files ] ----- function Create-HTML{ param( [parameter(mandatory = $true)] [string]$workSheet ) # End param #$workSheet = \u0026#39;vHealth\u0026#39; $vTools = Import-Excel -Path \u0026#34;C:\\RVTools\\RVTools-Data.xlsx\u0026#34; -WorksheetName $workSheet #$vTools # -- Get the Header info for the specifc worksheet $tableHeaders = ($vTools[0].psobject.Properties).name #$tableHeaders # -- Build the Table Header $tableHeader = @\u0026#39; \u0026#39;@ foreach($field in $tableHeaders){ $outPut = \u0026#39; \u0026lt;th\u0026gt;\u0026#39; + $field + \u0026#39;\u0026lt;/th\u0026gt;\u0026#39; $tableHeader += \u0026#34;$output\u0026#34; + \u0026#34;`n\u0026#34; #Write-Output $tableHeader } #$tableHeader # -- Start creating the HTML file $htmlFile = @\u0026#39; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;PageTitle\u0026lt;/title\u0026gt; \u0026lt;!-- Include the required stylesheets and scripts --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css\u0026#34;\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://code.jquery.com/jquery-3.6.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- CSS rules to control the font --\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; body { font-family: Arial, sans-serif; font-size: 11px; } table { font-family: Arial, sans-serif; font-size: 11px; border-collapse: collapse; width: 100%; } th, td { padding: 8px; text-align: left; border: 1px solid #ddd; } th { background-color: #f2f2f2; } \u0026lt;/style\u0026gt;\t\u0026lt;!-- Initialize the DataTables plugin --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; $(document).ready(function() { $(\u0026#39;#example\u0026#39;).DataTable({ scrollX: true, // enable horizontal scrolling order: [[ 0, \u0026#34;asc\u0026#34; ]], // sort by the first column in ascending order by default searching: true // enable searching }); }); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;table id=\u0026#34;example\u0026#34; class=\u0026#34;display\u0026#34; style=\u0026#34;width:100%\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026#39;@ # -- Create HTML Page Title $pageTitle = \u0026#39;RVTools | \u0026#39; + $workSheet $htmlFile = $htmlFile.Replace(\u0026#34;PageTitle\u0026#34;,$pageTitle) # -- Add Table Header to HTML File $htmlFile += $tableHeader $htmlHeader2 = @\u0026#39; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026#39;@ $htmlFile += $htmlHeader2 # -- Create HTML Table $table = @\u0026#39; \u0026#39;@ foreach($record in $vTools){ $output = \u0026#39; \u0026lt;tr\u0026gt;\u0026#39; foreach($field in $tableHeaders){ $output += \u0026#39;\u0026lt;td\u0026gt;\u0026#39; + $record.$field + \u0026#39;\u0026lt;/td\u0026gt;\u0026#39; #Write-Output $tableHeader } $output += \u0026#39;\u0026lt;/tr\u0026gt;\u0026#39; #Write-Output $output $table += \u0026#34;$output\u0026#34; + \u0026#34;`n\u0026#34; } #$table # -- Add Table to HTML File #$table $htmlFile += $table #$htmlFile # -- Create HTML Footer $htmlFooter = @\u0026#39; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#39;@ #$htmlFooter # -- Add HTML Footer $htmlFile += $htmlFooter #$htmlFile # -- Create the HTML file in the Web Server folder $filePath = \u0026#39;C:\\inetpub\\wwwroot\\rvtools\\\u0026#39; + $workSheet + \u0026#39;.htm\u0026#39; $htmlFile | Out-File -FilePath $filePath } # End Function # ----- [ Run RVTools and create the xlsx file ] ----- # -- Set RVTools path [string] $RVToolsPath = \u0026#34;C:\\RVTools\u0026#34; # -- cd to RVTools directory set-location $RVToolsPath # -- Set parameters for vCenter and start RVTools export [string] $VCServer = \u0026#34;vcsa-01a.corp.local\u0026#34; # my test vCenter server [string] $User = \u0026#34;administrator@corp.local\u0026#34; # or use -passthroughAuth [string] $EncryptedPassword = \u0026#34;_RVToolsV2PWDasF30QqSuq9OjfEwP+zMeR93x/p511QbI9SZl9YvUJw=\u0026#34; # use RVToolsPasswordEncryption.exe to encrypt your password [string] $XlsxDir = \u0026#34;C:\\RVTools\u0026#34; [string] $XlsxFile = \u0026#34;RVTools-Data.xlsx\u0026#34; # -- Start cli of RVTools Write-Host \u0026#34;Start export for vCenter $VCServer\u0026#34; -ForegroundColor DarkYellow $Arguments = \u0026#34;-u $User -p $EncryptedPassword -s $VCServer -c ExportAll2xlsx -d $XlsxDir -f $XlsxFile -DBColumnNames\u0026#34; #Write-Host $Arguments $Process = Start-Process -FilePath \u0026#34;C:\\RVTools\\RVTools.exe\u0026#34; -ArgumentList $Arguments -Wait -PassThru #-NoNewWindow if($Process.ExitCode -eq -1) { Write-Host \u0026#34;Error: Export failed! RVTools returned exitcode -1, probably a connection error! Script is stopped\u0026#34; -ForegroundColor Red exit 1 } # End If # ----- [ Get Name of every Worksheet in xlsx file and send to function to create html files ] ----- $worksheetNames = Get-ExcelSheetInfo \u0026#39;C:\\RVTools\\RVTools-Data.xlsx\u0026#39; foreach($workSheet in $worksheetNames.Name){ $output = \u0026#39;WorkSheet: \u0026#39; + $workSheet Write-Output $output Create-HTML -workSheet $workSheet } # End Foreach Results of script: For my example, I am using a Windows Server and IIs Web Server. All html files are saved in the folder C:\\inetpub\\wwwroot\\rvtools\\ on the IIS Server. A html file is created for ever Worksheet within the xlsx file. VMware Aria Operation Dashboard Design: Use the Text Display Widget to show the results of a html within the Dashboard. Add a Text Display Widget for every Worksheet that you want to display within the Dashboard. Add the url to the Text Display Widget. You MUST use a secure url. IE: https://192.168.110.202/rvtools/vHealth.htm How to run the script everyday?: I use a Workflow within VMware Aria Automation Orchestrator that is built-in to VMware Aria Automation. You can also you a stand alone VMware Aria Automation Orchestrator install if you don\u0026rsquo;t use VMware Aria Automation. There is a OOTB (Out of the Box) Workflow that allows you to run a PowerShell script on a PowerShell Host. I clone that Workflow and edit to match my environment. I schedule the Workflow to run everyday at 5:00 am. Lessons Learned The Text Display Widget is a nice way to display data in a VMware Aria Operations Dashboard from any html file. Using the Text Display Widget allows you to create that \u0026ldquo;Single Pane of Glass\u0026rdquo; experience with VMware Aria Operations. When I write about Automation, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete automation as long as it completes successfully and consistently.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-04-01T00:00:00Z","image":"https://vcrocs.info/vmware-aria-operations-rvtools-dashboard/featured-image_hu_3e96ca1cde44058.png","permalink":"https://vcrocs.info/vmware-aria-operations-rvtools-dashboard/","title":"VMware Aria Operations | RVTools Dashboard"},{"content":"Rest API calls in VMware Aria Automation with PowerShell\nUse Case: I’m often faced with the scenario where a client or colleague are attempting to perform an action and are met with the response that the feature isn’t in a GUI, but there is an API you can call. This scenario is common across the VMware stack of products as it’s not practical to have a button for everything, but it usually leads to the follow up question in some form of “well how do I call that?”. I wanted to write about a recent experience with a colleague as a means of showing one way to accomplish that.\nBefore I jump into the details, I wanted to add somewhat of a disclaimer that with any type of automation there are numerous ways to solve a particular problem. Based on my comfort with specific products and scripting languages, what’s below is how I was able to work with the client to address the problem. There is the possibility that another person could accomplish the same task in a different way and none of it is ‘wrong’.\nA colleague came to me and asked about a way to assist a client looking to add several networks into a Network Profile within Cloud Assembly (a component of Aria Automation). While his client could have very easily clicked one-by-one in the UI, that is a tedious operation and runs the risk of human error. Based on the client’s familiarity with PowerShell, we opted to write a script to invoke the necessary API’s using the Invoke-RestMethod PowerShell cmdlet.\nSo, to frame up a bit more of the ‘how’, when faced with a scenario like this, we need to have a script that performs three steps:\nSteps: Get your authentication token/header configured Find the appropriate URI and use a ‘GET’ method to look at the formatting and to help build a body Find the appropriate URI and method (e.g. ‘PATCH’ or ‘POST’) in order to call that API and feed it the necessary information in the body Step 1: So, I need to provide a set of credentials to the CSP login URI. This will give me a refresh token which I can then feed to the IaaS login URI to get my access token. The access token will be what I can use to make the necessary calls into my Aria Automation environment. The URI’s and some more detail are provided in VMware KB 89129.\nThere are some potentially easier methods to authenticate to Aria Automation and invoke a REST API call (like the PowerVRA Module), but for my example below, I used all native PowerShell.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #BasicInfo: $vraServer = \u0026#34;vra.corp.local\u0026#34; #Get Credentials to build auth: $credential = Get-Credential $username = $credential.UserName $pass = $credential.Password $password = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($pass)) $authBody = @{ \u0026#34;username\u0026#34; = $username \u0026#34;password\u0026#34; = $password } #Build Header: $header = New-Object \u0026#34;System.Collections.Generic.Dictionary[[String],[String]]\u0026#34; $header.Add(\u0026#34;Accept\u0026#34;,\u0026#34;application/json\u0026#34;) $header.Add(\u0026#34;Content-Type\u0026#34;,\u0026#34;application/json\u0026#34;) #Get Refresh Token: $uri = \u0026#34;https://\u0026#34; + $vraServer + \u0026#34;/csp/gateway/am/api/login?access_token\u0026#34; $refreshToken = Invoke-RestMethod -uri $uri -Method POST -Headers $header -Body ($authBody | ConvertTo-Json) -SkipCertificateCheck $refreshToken = $refreshToken.refresh_token $refreshTokenBody = @{ \u0026#34;refreshToken\u0026#34; = $refreshToken } #Get Access Token: $uri = \u0026#34;https://\u0026#34; + $vraServer + \u0026#34;/iaas/api/login\u0026#34; $accessToken = Invoke-RestMethod -Uri $uri -Method POST -Headers $header -body ($refreshTokenBody | ConvertTo-JSON) -SkipCertificateCheck $accessToken = \u0026#34;Bearer \u0026#34; + $accessToken.token #add access token to Header $header.Add(\u0026#34;Authorization\u0026#34;,$accessToken) Step 2: Now that I have the $accessToken variable set and added to my header, I can make any REST API calls I need. For this example, we wanted to add a bunch of fabric-networks (in vSphere parlance DvPGs) to a network profile. In VMware Aria Automation, these are already available with the addition of my vCenter Cloud Account, just not associated with a network profile. In order to enumerate the available fabric-networks, I am going to take my $header variable with the newly generated $accessToken added and call a ‘Get’ against the /iaas/api/fabric-networks/ URI.\n1 2 3 #Get Fabric Network Ids: $uri = \u0026#34;https://\u0026#34; + $vraServer + \u0026#34;/iaas/api/fabric-networks\u0026#34; $fabricNetworks = Invoke-RestMethod -uri $uri -Method GET -Headers $header - Now that I have a full list, I wanted to isolate the list down to those on a specific Distributed Virtual Switch using the following:\n1 $dvPGs = $fabricNetworks.content | Where {$_.name -like \u0026#39;*DvPG*\u0026#39;} Step 3: Now that I have my list of fabric-networks, I wanted to build a JSON body that I could send to Aria Automation to add them to the network-profile in question. So, I used the following request to pull the necessary info:\n1 2 3 #Get Network Profiles: $uri = \u0026#34;https://\u0026#34; + $vraServer + \u0026#34;/iaas/api/network-profiles\u0026#34; $networkProfiles = Invoke-RestMethod -uri $uri -Method GET -Headers $header -SkipCertificateCheck In my lab I had a single network profile, so if I just run $networkProfiles | ConvertTo-JSON in PowerShell, we get the info we need for our body.\nThe fun with this specific example is that the info in the ‘GET’ request is slightly different than how we have to format it for the ‘PATCH’ request. Looking at the SwaggerUI interface (https://\u0026ldquo;YourAriaAutomationServer\u0026rdquo;/iaas/api/swagger) and looking at the Network Profile Section, I can see the URI for the PATCH call (/iaas/api/network-profiles/{id}) and that we need to feed an array of ID’s to a property called ‘fabricNetworkIds’. A couple of other good points to call out is to pay attention to any field or property marked as ‘Required’. If you’re unfamiliar with the SwaggerUI interface, selecting the ‘Model’ link within a Specific URI will give you that information. In my example, I see I need to have the ID for the network profile, the name of the network profile, and the regionID of the network profile.\n(Side note… depending on what is in the REST Body, exercise some caution and testing with a PATCH or PUT command as in this specific case with the NetworkID’s, they will only add what is in the body and remove anything else. Essentially the body replaces what is already there instead of appending to an already existing list.)\nNow that I have my body, we just repeat the process and invoke the call to the appropriate URI. The example below only has a couple of fabricNetworkIds specified, but the actual ask was for several hundred.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $body = @{ \u0026#34;name\u0026#34; = \u0026#34;REST_API\u0026#34; \u0026#34;id\u0026#34;= \u0026#34;cce57ddd-d206-9999-870d-25b8775fb365\u0026#34; \u0026#34;orgId\u0026#34; = \u0026#34;12131928-3bdd-9999-9e69-3edf5c318a7d\u0026#34; \u0026#34;customProperties\u0026#34; = @{ \u0026#34;datacenterId\u0026#34; = \u0026#34;Datacenter:datacenter-3\u0026#34; } \u0026#34;externalRegionId\u0026#34; = \u0026#34;Datacenter:datacenter-3\u0026#34; \u0026#34;cloudAccountId\u0026#34; = \u0026#34;8274acb1-bad2-40cf-1969-e3ed60c16956\u0026#34; \u0026#34;isolationType\u0026#34; = \u0026#34;NONE\u0026#34; \u0026#34;fabricNetworkIds\u0026#34; = @( \u0026#34;fba96959-c0b2-99a6-bb7b-0da4c35b3eaf\u0026#34; \u0026#34;21a52412-85a3-4b9d-a99b-0aaf19185755\u0026#34; ) } $uri = \u0026#34;https://\u0026#34; + $vraServer + \u0026#34;/iaas/api/network-profiles/\u0026#34; + $npId Invoke-RestMethod -uri $uri -Method PATCH -Headers $header -Body ($body | ConvertTo-JSON -Depth 5) -SkipCertificateCheck The result is beneficial for two reasons.\nMy colleague and his client have a way of adding the necessary DvPG’s to their network profile in a methodical way that avoids a lot of clicking. The steps and much of the code above are reusable, so whatever the use case you’re attempting to solve for, you don’t have to start from scratch each time. Hopefully this example helps anyone who is stuck or just looking for an example to keep in their back pocket of ‘how to’ for when that situation arises.\nGuest Blogger: I want to thank guest Blogger, Dave Kaber @dave_kaber, for taking the time to write this blog post and share with the #vCommunity. Hopefully Dave will be sharing some additional content in the future.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-03-20T00:00:00Z","image":"https://vcrocs.info/rest-api-calls-in-vmware-aria-automation-with-powershell/featured-image_hu_b5acce3f88bb30eb.png","permalink":"https://vcrocs.info/rest-api-calls-in-vmware-aria-automation-with-powershell/","title":"Rest API calls in VMware Aria Automation with PowerShell"},{"content":"The PowerShell Podcast | I was a Guest on the show\nPodcast Guest: I listen to Podcasts all the time. This past year, I started listening to a new podcast, \u0026ldquo;The PowerShell Podcast\u0026rdquo;. This podcast has become one of my favorites that I listen to every week. The hosts (Andrew Pla and Jordan Hammond) are funny, the content interests me a lot, and the list of guests has been awesome. The guests are people that I have read their books or use their PowerShell Modules to complete automation.\nI thought it would be fun to join the podcast as a guest, to share how I use PowerShell with VMware products. VMware has a PowerShell Module, PowerCLI, that I use with almost all automation that I create. With VMware Aria Automation, you can use PowerShell with Workflows, Actions, and have salt execute PowerShell scripts with state files and functions. So I reached out to the hosts of \u0026ldquo;The PowerShell Podcast\u0026rdquo; and showed my interest to be a guest on the Podcast. They thought that my story would make a good episode, so we scheduled a time to record. The experience to record the podcast episode was great. The behind the scenes was funny. The guests talk to each other the same way they do when when recording an episode. They make you feel comfortable as a guest.\nHopefully the vCommunity enjoys this episode. I thought this would be another great way to give back to the community and share some information.\nThe episode I recorded with \u0026ldquo;The PowerShell Podcast\u0026rdquo; was released on 03/20/2023. Here are the links:\nThe PowerShell Podcast | \u0026ldquo;Using PowerCLI with Dale Hassinger\u0026rdquo; | on Podbean The PowerShell Podcast | \u0026ldquo;Using PowerCLI with Dale Hassinger\u0026rdquo; | on Youtube Podcast Discussion: How did I get started with PowerShell My career path, CNC Programmer to a VMware TAM The VMUG vCommunity and other User Groups My favorite PowerShell Module, PowerCLI Other PowerShell Modules I like to use. Link to Podcast Website: The PowerShell Podcast on Podbean The PowerShell Podcast on Youtube Hosts and Show on Twitter: Andrew Pla Jordan Hammond The PowerShell Podcast Enjoy the listen!\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-03-12T00:00:00Z","image":"https://vcrocs.info/the-powershell-podcast-i-was-a-guest-on-the-show/featured-image_hu_9b2e241b6e65de7b.png","permalink":"https://vcrocs.info/the-powershell-podcast-i-was-a-guest-on-the-show/","title":"The PowerShell Podcast | I was a Guest on the show"},{"content":"Philly VMUG | VMware Aria Automation and Operations | Recorded Session now available!\nPresentation: On Friday, March 31, 2023, I will be doing at Presentation at the Philly VMUG. Click Here to register.\nI am going to demo to the Philly VMUG Community, how to use VMware Aria Automation and VMware Aria Operations to create, manage and monitor VMs on-prem and in the cloud using the same VMware Aria Suite installation. Come see what working in a multi-cloud environment is like.\nDemo: Create VMs on-prem and in the cloud Monitor VMs on-prem and in the cloud Use VMware Aria Automation Config to configure and maintain State on-prem and in the cloud. Stop the cloud chaos by using a single tool like VMware Aria for creation, management and monitoring. Update: Here is the link to watch the Presentation on the Philly VMUG Youtube Channel:\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-03-10T00:00:00Z","image":"https://vcrocs.info/philly-vmug-vmware-aria-automation-and-operations/featured-image_hu_9cb3936a4f887835.png","permalink":"https://vcrocs.info/philly-vmug-vmware-aria-automation-and-operations/","title":"Philly VMUG | VMware Aria Automation and Operations"},{"content":"How to add Windows Server Drives to VMware Aria Automation Cloud Templates.\nI want to create new Windows Servers in VMware Aria Automation that will be production ready when the server build process is complete. One item when building new Windows Servers is adding drives. I want a way to add additional drives and have the drive be online and formatted properly. Non SQL Windows Servers will have data drives formatted with 4k allocation unit size and Windows SQL Servers will have the data drives formatted with 64k allocation unit size. VMware Aria Automation provides a way to add drives OOTB (Out of the Box) but does not automatically format the drives. That is why I use a Salt state in my example. I use the salt state to bring the new drive online and format. This Blog post shows one way to accomplish these tasks. I always say, with automation there a 100 ways to do the same process. Hopefully this Blog gives you some ideas and options.\nUse Case Add Cloud Agnostic Volumes to a VMware Aria Automation Cloud Template. To make New Windows Server Builds consistent I show the drives that are available on the Catalog Item Custom Form. You don\u0026rsquo;t need to add any additional drives. Keep the drive sizes at the default size of \u0026ldquo;0\u0026rdquo; and the drives DO NOT get created. At the end of the new server build I want the new Windows Server drives to be online and formatted properly. Be production ready! Steps to complete the process: Automated Salt minion installation. See the Blog Post I wrote that completes this step. Click Here Add grains data about the drives to minion when the minion installation completes. See example yaml code. Run a state file when the minion installation completes that brings the new drive online and formats the drive so that it is ready to use immediately. See example yaml code. Requirements: This blog was created using VMware Aria Automation and VMware Aria Automation Config version 8.11.0 (Salt version 3005.1). The process may vary for different versions of VMware Aria Automation and Salt. Cloud Template | Windows 2019 Server: There are (3) Cloud Agnostic Volumes on the Cloud Template for my use case. You can have as many as you want for your environment. The SaltStack Config Resource is added to the Cloud Template. VMware Aria Automation Cloud Template file: Key elements to review in the yaml code: The yaml code includes grains that saves the drive information. These values are based on input from the Catalog custom form. the yaml code includes stateFiles to run. If the drive size input specified is equal to \u0026ldquo;0\u0026rdquo; then the drive count will be \u0026ldquo;0\u0026rdquo;. Drive will NOT be created. Click to expand yaml code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 formatVersion: 1 inputs: CustomizationSpec: type: string description: Customization Specification default: W2K19 title: CustomizationSpec VMName: type: string title: VM Name minLength: 1 maxLength: 15 default: DBH-194 IP: type: string default: 192.168.110.194 EDrive: type: integer title: E-Drive default: 0 description: Enter 0 to disable the disk and not create LDrive: type: integer title: L-Drive default: 0 description: Enter 0 to disable the disk and not create TDrive: type: integer title: T-Drive default: 0 description: Enter 0 to disable the disk and not create SQL: type: string title: SQL description: Selecting SQL will format all DATA drives with 64k allocation. default: \u0026#39;False\u0026#39; enum: - \u0026#39;True\u0026#39; - \u0026#39;False\u0026#39; resources: Network: type: Cloud.Network properties: networkType: existing constraints: - tag: network:VMs Virtual_Machine: type: Cloud.Machine properties: image: W2K19 flavor: medium customizationSpec: ${input.CustomizationSpec} name: ${input.VMName} remoteAccess: authentication: usernamePassword username: administrator password: VMware1! networks: - network: ${resource.Network.id} assignment: static address: ${input.IP} attachedDisks: ${map_to_object(resource.Cloud_Volume_E[*].id + resource.Cloud_Volume_L[*].id + resource.Cloud_Volume_T[*].id , \u0026#34;source\u0026#34;)} edrivesize: ${input.EDrive} ldrivesize: ${input.LDrive} tdrivesize: ${input.TDrive} sql: ${input.SQL} # - VMware Max SCSI Controllers is 4 # - VMware Max Unit per SCSI Controllers is 15 Cloud_Volume_E: type: Cloud.Volume properties: capacityGb: ${input.EDrive} count: \u0026#39;${input.EDrive == 0 ? 0 : 1 }\u0026#39; SCSIController: SCSI_Controller_1 unitNumber: 0 provisioningType: thin Cloud_Volume_L: type: Cloud.Volume properties: capacityGb: ${input.LDrive} count: \u0026#39;${input.LDrive == 0 ? 0 : 1 }\u0026#39; SCSIController: SCSI_Controller_1 unitNumber: 1 provisioningType: thin Cloud_Volume_T: type: Cloud.Volume properties: capacityGb: ${input.TDrive} count: \u0026#39;${input.TDrive == 0 ? 0 : 1 }\u0026#39; SCSIController: SCSI_Controller_1 unitNumber: 2 provisioningType: thin Cloud_SaltStack_1: type: Cloud.SaltStack properties: hosts: - ${resource.Virtual_Machine.id} masterId: saltstack_enterprise_installer stateFiles: - /vcrocs/windows-server-services.sls - /vcrocs/windows-server-new-drives.sls saltEnvironment: base additionalMinionParams: grains: vCROCS_Roles: - webserver - database vCROCS_Drive_E_Size: - ${input.EDrive} vCROCS_Drive_L_Size: - ${input.LDrive} vCROCS_Drive_T_Size: - ${input.TDrive} vCROCS_SQL: - ${input.SQL} Service Broker Catalog item: Show the (3) drives that are available as a Standard Windows Server Build. To create the drives is an option. Make drive size a \u0026ldquo;0\u0026rdquo; (default Value) and the drive will NOT be created. Select SQL \u0026ldquo;True\u0026rdquo; will make the data drives be formatted with 64k allocation unit size, \u0026ldquo;false\u0026rdquo; will be 4k allocation unit size. Completed Windows Server Deployment: Shows which salt states were used with the deployment. You can view the grains data that was added to the minion. VMware Aria Automation Config State file: Screen shot shows the state file in SaltTack Config File Server. The state file is very simple. Tells the minion which PowerShell script to run. Click to expand yaml code 1 2 3 4 5 onlinenewdrives: cmd.script: - name: newdrives - source: salt://scripts/windows-server-new-drives-ps.ps1 - shell: PowerShell PowerShell Script to online and format new drives: The PowerShell file is saved within the VMware Aria Automation Config file server. The PowerShell script gets the grain data and stores it as variables. If the drive letter capacity is greater than \u0026ldquo;0\u0026rdquo; it will execute. Script will only run on new drives in offline mode as a safety feature. Will not do anything with existing online drives. If state is run by accident after server is in production nothing will change. Script uses the grain data SQL to determine how to format the drives. If grains value SQL is equal to \u0026ldquo;True\u0026rdquo; the it will use 64k allocation unit size, otherwise it uses 4k allocation unit size. Click to expand PowerShell code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 # ----- [ Get minion data ] ----- $eDrive = salt-call grains.get vCROCS_Drive_E_Size --output=json | ConvertFrom-Json $eDrive = $eDrive.local $output = \u0026#39;E-Drive: \u0026#39; + $eDrive Write-Output $output $lDrive = salt-call grains.get vCROCS_Drive_L_Size --output=json | ConvertFrom-Json $lDrive = $lDrive.local $output = \u0026#39;L-Drive: \u0026#39; +$lDrive Write-Output $output $tDrive = salt-call grains.get vCROCS_Drive_T_Size --output=json | ConvertFrom-Json $tDrive = $tDrive.local $output = \u0026#39;T-Drive: \u0026#39; + $tDrive Write-Output $output $SQL = salt-call grains.get vCROCS_SQL --output=json | ConvertFrom-Json $SQL = $SQL.local $output = \u0026#39;SQL: \u0026#39; + $SQL Write-Output $output # ----- [ Function to bring drive online and format ] ----- function set-driveOnline{ param( [parameter(mandatory = $true)] [string]$driveLetter, [int]$diskNumber ) $diskOnline = Get-Disk | Where-Object Number -EQ $diskNumber if($diskOnline.OperationalStatus -eq \u0026#39;offline\u0026#39;){ Get-Disk | Where-Object Number -EQ $diskNumber | Set-Disk -IsOffline $False $disksize = Get-Disk -Number $diskNumber | Select-Object size $disksize = $disksize.size $disksize = $disksize/1073741824 $output = \u0026#39;Disk \u0026#39; + $diskNumber + \u0026#39; Size: \u0026#39; + $disksize Write-Output $output if($disksize -gt 0){ Initialize-Disk $diskNumber -PartitionStyle GPT } # End if New-Partition -DiskNumber $diskNumber -UseMaximumSize -DriveLetter $driveLetter if($SQL -eq \u0026#39;True\u0026#39;){ Format-Volume -DriveLetter $driveLetter -FileSystem NTFS -NewFileSystemLabel \u0026#34;SQL Data\u0026#34; -AllocationUnitSize 65536 -Confirm:$false } # End If else{ Format-Volume -DriveLetter $driveLetter -FileSystem NTFS -NewFileSystemLabel \u0026#34;APP Data\u0026#34; -AllocationUnitSize 4096 -Confirm:$false } # End Else $global:diskNumber++ $output = \u0026#39;Disk Number: \u0026#39; + $global:diskNumber Write-Output $output } # end if offline } # end function $global:diskNumber = 1 $output = \u0026#39;Disk Number: \u0026#39; + $global:diskNumber Write-Output $output if($eDrive -gt 0){ $driveLetter = \u0026#39;E\u0026#39; $output = \u0026#39;Drive Letter: \u0026#39; + $driveLetter Write-Output $output # run function set-driveOnline -driveLetter $driveLetter -diskNumber $global:diskNumber } # end if if($lDrive -gt 0){ $driveLetter = \u0026#39;L\u0026#39; $output = \u0026#39;Drive Letter: \u0026#39; + $driveLetter Write-Output $output # run function set-driveOnline -driveLetter $driveLetter -diskNumber $global:diskNumber } # end if if($tDrive -gt 0){ $driveLetter = \u0026#39;T\u0026#39; $output = \u0026#39;Drive Letter: \u0026#39; + $driveLetter Write-Output $output # run function set-driveOnline -driveLetter $driveLetter -diskNumber $global:diskNumber } # end if This screen shot shows how the drives status will be in the Windows Server Disk Management when the New Server Build is Complete. No additional steps are required to start using the drives. This screen shot shows where the grains file is saved. This screen shot shows the grains file contents. Lessons Learned Saving information as grains data is a great way to save input data when creating new servers. The combination of having Salt State files run PowerShell scripts is very powerful when creating new Windows Servers with VMware Aria Automation. When I write about VMware Aria Automation, I always say there are many ways to accomplish the same task. VMware Aria Automation Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your VMware Aria Suite Advanced/Enterprise license. If you own the VMware Aria Suite, you own VMware Aria Automation Config.\nVMware Aria Automation = vRealize Automation VMware Aria Automation Config = SaltStack Config If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-02-18T00:00:00Z","image":"https://vcrocs.info/vmware-aria-automation-working-with-windows-server-drives/featured-image_hu_cd2779661507492e.png","permalink":"https://vcrocs.info/vmware-aria-automation-working-with-windows-server-drives/","title":"VMware Aria Automation | Working with Windows Server Drives"},{"content":"VMware vExpert 2020 - Present | VMware vExpert Cloud Management 2021 - Present\nVMware vExpert 2020 - Present | VMware vExpert Cloud Management 2021 - Present I am very proud to be part of the VMware vExpert program. This is the fourth year that I was accepted into the program. One part of the vExpert program that I think is great is that the program recognizes people for sharing their knowledge and \u0026ldquo;Giving Back\u0026rdquo;. A person selected into the vExpert programs is someone that likes to share, wants to make themselves and everyone around them smarter.\nOne of my goals as an VMware employee is to be able to give more back to the vCommunity than I was able to as an end user of the VMware Products.\n2023 is also the 3rd year that I was accepted into the VMware vExpert Cloud Management subprogram.\nWhat is the VMware vExpert Program? Program Overview The VMware vExpert program is VMware\u0026rsquo;s global evangelism and advocacy program. The program is designed to put VMware\u0026rsquo;s marketing resources towards your advocacy efforts. Promotion of your articles, exposure at our global events, co-op advertising, traffic analysis, and early access to beta programs and VMware\u0026rsquo;s roadmap. The awards are for individuals, not companies, and last for one year. Employees of both customers and partners can receive the awards. In the application, we consider various community activities from the previous year as well as the current year\u0026rsquo;s (only for 2nd half applications) activities in determining who gets awards. We look to see that not only were you active but are still active in the path you chose to apply for.\nCriteria If you are interested in becoming a vExpert the criteria is simple. We are looking for IT Professionals who are sharing their VMware knowledge and contributing that back to the community. The term \u0026ldquo;giving back\u0026rdquo; is defined as going above and beyond your day job. There are several ways to share your knowledge and engage with the community. Some of those activities are blogging, book authoring, magazine articles, CloudCred task writing, active in Facebook groups, forum (VMTN as well as other non VMware) platforms, public speaking, VMUG leadership, videos and so on.\nThanks: I have worked with a great group of people at VMware, past and present. I would like to thank everyone that has helped me on my journey called a career.\nEmail: Dale.Hassinger@vCrocs.info\nLocation: Dillsburg, PA\n\u0026ldquo;9 - 5 pays the bills, 5 - 10 advances your career\u0026rdquo;\n","date":"2023-02-17T00:00:00Z","image":"https://vcrocs.info/vexpert-2023-vexpert-cloud-management/featured-image_hu_72f249ae66b428e6.png","permalink":"https://vcrocs.info/vexpert-2023-vexpert-cloud-management/","title":"vExpert 2023 | vExpert Cloud Management"},{"content":"How to start using the SaltStack Config Resource with VMware Aria Automation Cloud Templates.\nUse Case VMware Aria Automation Config has been the Configuration Management tool that I like to use with Servers, Windows and Linux. The first process to use salt with new servers is to install the salt minion, which is an agent that needs installed on the Server. There are many different ways to install the salt minion agent and what I wanted to show in this blog post is how to use the SaltStack Config Resource with the VMware Automation Cloud Template. When creating a Cloud Template in VMware Aria Automation, one of the options is to add the SaltStack Config Resource.\nWhat the SaltStack Config Resource provides:\nAutomated Salt minion installation Ability to add grains data to minion when the minion installation completes. See example yaml code. The minion key is auto-accepted in SaltStack Config If you delete the VM deployment in VMware Aria Automation, the minion key will be automatically removed from VMware Aria Automation Config. Built-in decommission. Ability to run a state file when the minion installation completes. See example yaml code. Requirements:\nThis blog was created using VMware Aria Automation version 8.11.0. The process may vary for different version of VMware Aria Automation. TCP Port 445 needs to be open between VMware Aria Automation Config server and the new Server that the minion is being installed on. Check the VMware Aria Automation Config server. The OS that you are using for the new server must have an agent file in the /etc/salt/cloud.deploy.d folder. Check the VMware Aria Automation Config server. The version of the agent files in the /etc/salt/cloud.deploy.d folder must match the version of the salt master. The script that creates the grains file when using the SaltStack Config Resource and VMware Aria cloud templates with Windows Servers needs to be manually replaced on the VMware Aria Automation Config Server (salt master). Future VMware Aria Automation Config installs with LCM (VMware Aria Suite LifeCycle) will include this fix. The script creates the grains file in the incorrect folder. Location of script on salt master: /lib64/python3.7/site-packages/salt/utils/cloud.py Make a copy of the original cloud.py before replacing with updated version. Where to get new script: https://github.com/saltstack/salt/blob/master/salt/utils/cloud.py The grains file will be created in \u0026ldquo;C:\\ProgramData\\Salt Project\\Salt\\conf\u0026rdquo; after the script is updated. Update: When I installed VMware Aria Automation Config 8.12, 8.13 and 8.14 I still needed to update the cloud.py file for the grains to be created properly. Current OS support: Any OS not listed is currently not supported at this time.\nCloud Template | Windows 2019 Server: Windows 2019 Server cloud template yaml code: You MUST add the remoteAccess code in the Virtual_Machine section for minion installation. grains data is added in the additionalMinionParams section of the yaml code. When the minion agent installation is complete, you will see the new minion listed in the targets automatically. You do not need to accept the minion key. click to expand yaml code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 FEformatVersion: 1 inputs: CustomizationSpec: type: string description: Customization Specification default: W2K19 title: CustomizationSpec VMName: type: string title: VM Name minLength: 1 maxLength: 15 default: DBH-194 IP: type: string default: 192.168.110.194 EDrive: type: integer title: E-Drive default: 0 description: Enter 0 to disable the disk and not create FDrive: type: integer title: F-Drive default: 0 description: Enter 0 to disable the disk and not create SQL: type: string title: SQL description: Selecting SQL will format all DATA drives with 64k allocation. default: \u0026#39;False\u0026#39; enum: - \u0026#39;True\u0026#39; - \u0026#39;False\u0026#39; resources: Network: type: Cloud.Network properties: networkType: existing constraints: - tag: network:VMs Virtual_Machine: type: Cloud.Machine properties: image: W2K19 flavor: medium customizationSpec: ${input.CustomizationSpec} name: ${input.VMName} remoteAccess: authentication: usernamePassword username: administrator password: VMware1! networks: - network: ${resource.Network.id} assignment: static address: ${input.IP} attachedDisks: ${map_to_object(resource.Cloud_Volume_E[*].id + resource.Cloud_Volume_F[*].id , \u0026#34;source\u0026#34;)} edrivesize: ${input.EDrive} fdrivesize: ${input.FDrive} sql: ${input.SQL} # - VMware Max SCSI Controllers is 4 # - VMware Max Unit per SCSI Controllers is 15 Cloud_Volume_E: type: Cloud.Volume properties: capacityGb: ${input.EDrive} count: \u0026#39;${input.EDrive == 0 ? 0 : 1 }\u0026#39; SCSIController: SCSI_Controller_1 unitNumber: 0 provisioningType: thin Cloud_Volume_F: type: Cloud.Volume properties: capacityGb: ${input.FDrive} count: \u0026#39;${input.FDrive == 0 ? 0 : 1 }\u0026#39; SCSIController: SCSI_Controller_1 unitNumber: 1 provisioningType: thin Cloud_SaltStack_1: type: Cloud.SaltStack properties: hosts: - ${resource.Virtual_Machine.id} masterId: saltstack_enterprise_installer stateFiles: - /vcrocs/windows.sls saltEnvironment: base # - This is how you add grains data to the minion additionalMinionParams: grains: vCROCS_Roles: - webserver - database vCROCS_E_Drive: - ${input.EDrive} vCROCS_F_Drive: - ${input.FDrive} vCROCS_SQL: - ${input.SQL} Cloud Template | Ubuntu 20 Server: Ubuntu 20 Server cloud template yaml code: You MUST add the remoteAccess code in the Virtual_Machine section for minion installation. grains data is added in the additionalMinionParams section of the yaml code. When the minion agent installation is complete, you will see the new minion listed in the targets automatically. You do not need to accept the minion key. click to expand yaml code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 formatVersion: 1 inputs: CustomizationSpec: type: string description: Customization Specification default: ubuntu title: CustomizationSpec VMName: type: string title: VM Name minLength: 1 maxLength: 12 default: DBH-197 IP: type: string default: 192.168.110.197 resources: Cloud_Network_1: type: Cloud.Network properties: networkType: existing constraints: - tag: network:VMs Cloud_Machine_1: type: Cloud.Machine properties: image: ubuntu-20 flavor: small name: ${input.VMName} remoteAccess: authentication: usernamePassword username: administrator password: VMware1! customizationSpec: ${input.CustomizationSpec} constraints: - tag: env:VMs networks: - network: ${resource.Cloud_Network_1.id} assignment: static address: ${input.IP} Cloud_SaltStack_1: type: Cloud.SaltStack properties: hosts: - ${resource.Cloud_Machine_1.id} masterId: saltstack_enterprise_installer stateFiles: - /vcrocs/ubuntu.sls saltEnvironment: base additionalMinionParams: grains: roles: - webserver This screen shot shows how to get the \u0026ldquo;masterId\u0026rdquo; to use in the Cloud Template yaml code. This screen shot shows how to see the SaltMaster version. Completed Deployment This shows what the deployment looks like after it is completed. Grain data is shown within the Salt Configuration section. Custom Form to create the Windows Server Deployment Example of a Custom Form for Windows Server Builds Lessons Learned See \u0026ldquo;Requirements\u0026rdquo; listed above See \u0026ldquo;What the SaltStack Config Resource provides\u0026rdquo; above If you need to update the minion agent files on the salt master server, in folder /etc/salt/cloud.deploy.d, you will have to have your VMware account team download the files for you or open an SR. The files are not public facing. Helpful Links Configure a SaltStack Config integration in vRealize Automation Add the SaltStack Config resource to the cloud template When I write about VMware Aria Automation, I always say there are many ways to accomplish the same task. VMware Aria Automation Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your VMware Aria Suite Advanced/Enterprise license. If you own the VMware Aria Suite, you own VMware Aria Automation Config.\nVMware Aria Automation = vRealize Automation VMware Aria Automation Config = SaltStack Config If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-02-11T00:00:00Z","image":"https://vcrocs.info/vmware-aria-automation-and-saltstack-config-resource/featured-image_hu_b5acce3f88bb30eb.png","permalink":"https://vcrocs.info/vmware-aria-automation-and-saltstack-config-resource/","title":"VMware Aria Automation and SaltStack Config Resource"},{"content":"Use vCenter TAGs to maintain VM Storage Placement.\nA question was recently asked, How can we specify and maintain which DataStore Cluster a VM should use within the VMware vCenter UI? I like using vCenter TAGs for specifying details about VMs, so I thought I would use VMware vCenter TAGs to specify which DataStore Cluster to place a VM.\nI looked at using a Configuration management tool like salt but one of the requirements was to make it easy for the VMware Admin to specify and maintain VM DataStore placement within the VMware vCenter UI.\nI have included sample code that will:\nCreate a VMware vCenter TAG Category Create a VMware vCenter TAG based on DataStore Cluster Name Add the DataStore Cluster VMware vCenter TAG to all VMs within a DataStore cluster Verify that each VM has only (1) vCenter DataStore Cluster TAG Verify that the VM is in the correct DataStore Cluster. Do a VM move if it is not in correct DataStore Cluster. Use Case: Have a way to specify which DataStore Cluster the VM will use within VMware vCenter UI. Have a process in place that will maintain which DataStore Cluster will be used with each VM within VMware vCenter. If a user moves a VM to a DataStore Cluster that it shouldn\u0026rsquo;t be located, move it back to the correct Datastore Cluster to match the assigned VMware vCenter TAG. Solution: Create a VMware vCenter TAG for every DataStore Cluster within VMware vCenter. Assign a VMware vCenter TAG to every VM within vCenter, to specify which DataStore Cluster it should be located. Schedule a VMware Aria Automation Orchestrator Workflow to run everyday to make sure VM DataStore Cluster placement matches VMware vCenter TAG assigned. Steps to connect to VMware vCenter:\n1 2 3 4 5 6 7 8 9 # Script created by: Dale Hassinger # Script provided for Demo Use Only # Date: 2023-01-27 # Purpose: Create and Assign vCenter TAGs to be used for VM Storage placement # Notes: VMs with ISOs attached and Snap Shots may be listed in more than 1 Datastore Cluster # In my lab I made sure there were no SNAPs or ISOs attached before applying TAGs with Automation # ----- [ Connect to vCenter ] ----- Connect-VIServer -Server \u0026#39;vCenter.vCROCS.info\u0026#39; -User \u0026#39;administrator@vCROCS.info\u0026#39; -Password \u0026#39;HackMe1!\u0026#39; -Force Code to create a VMware vCenter TAG Category: For any custom VMware vCenter TAGs that I create to use with Automation, I use a TAG category \u0026ldquo;Automation\u0026rdquo;. You don\u0026rsquo;t need to do this step. You could use a category that already exists within VMware vCenter. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # ----- [ Start Create vCenter TAG Category ] ----- # New TAG Category Name $newCategory = \u0026#39;Automation\u0026#39; # Get all existing vCenter TAG Categories $allCategory = Get-TagCategory # Check to see if category already exists $allCategory = $allCategory.Name $categoryExists = $allCategory.Contains($newCategory) # If TAG category already exists it will not try to re-create if($categoryExists -eq $true){ Write-Output \u0026#39;Category Already exists within vCenter!\u0026#39; } # End if else{ $output = \u0026#39;Creating New Category within vCenter: \u0026#39; + $newCategory Write-Output $output # Create New TAG Category in vCenter New-TagCategory -Name $newCategory -Cardinality Multiple -Description \u0026#39;Used with Automation\u0026#39; } # End Else # ----- [ End Create vCenter TAG Category ] ----- Code to create a VMware vCenter TAG for every Datastore Cluster: The code gets all DataStore Cluster Names and creates a VMware vCenter TAG to match DataStore Cluster Name. I prefix the DataStore Cluster Name with \u0026ldquo;TAG-VM-\u0026rdquo;. The code does check to see if the VMware vCenter TAG already exists. If the vCenter TAG does exist, it does not try and create a new vCenter TAG. include code to connect to vCenter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # ----- [ Start Create vCenter TAG for every Datastore Cluster ] ----- # New TAG Category Name $newCategory = \u0026#39;Automation\u0026#39; $allDatastoreClusters = Get-DatastoreCluster $allDatastoreClusters = $allDatastoreClusters.Name $allTAGs = Get-Tag $allTAGs = $allTAGs.Name $newTAGs = @() # Create new TAG Names foreach($newTAG in $allDatastoreClusters){ $newTAGname = \u0026#39;TAG-VM-\u0026#39; + $newTAG $output = \u0026#39;New TAG Name: \u0026#39; + $newTAGname Write-Output $output $newTAGs+= $newTAGname } # end foreach # Add TAGs to vCenter if they don\u0026#39;t already exist foreach($newTAG in $newTAGs){ # Check to see if category already exists $TagExists = $allTAGs.Contains($newTAG) if($TagExists -eq $true){ $output = \u0026#39;Tag \u0026#39; + $newTAG + \u0026#39; already Exists: \u0026#39; + $TagExists Write-Output $output } # end if else{ $output = \u0026#39;Tag \u0026#39; + $newTAG + \u0026#39; Exists: \u0026#39; + $TagExists Write-Output $output # Create New TAG Get-TagCategory -Name $newCategory | New-Tag -Name $newTAG -Description \u0026#39;VM Storage TAG used with Automation\u0026#39; } # end else } # end foreach # ----- [ End Create vCenter TAG for every Datastore Cluster ] ----- Code to add DataStore Cluster vCenter TAG to VMs for a specific Datastore Cluster: You specify DataStore Cluster Name. The code with get all VM names and assign the correct VMware vCenter TAG. It will check to see if TAG is already assigned to the VM. include code to connect to vCenter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # ----- [ Start add Storage vCenter TAG to VMs for a specific DataStore Cluster ] ----- $datastoreCluster = \u0026#39;DS-CLSTR-03\u0026#39; #$datastoreCluster = \u0026#39;DS-CLSTR-04\u0026#39; $TAGname = \u0026#39;TAG-VM-\u0026#39; + $datastoreCluster $allVMs = Get-DatastoreCluster -Name $datastoreCluster | Get-VM $allVMs = $allVMs.Name foreach($vm in $allVMs){ # Get existing TAGs assigned to VM #$assignedTAGs = \u0026#39;\u0026#39; $assignedTAGs = Get-VM $vm | Get-TagAssignment $assignedTAGs = $assignedTAGs.Tag.Name if(!$assignedTAGs){ $output = \u0026#39;VM: \u0026#39; + $vm + \u0026#39; has no tags\u0026#39; Write-Output $output New-TagAssignment -Tag $TAGname -Entity $vm } # end if else{ $TagExists = $assignedTAGs.Contains($TAGname) if($TagExists -eq $false){ New-TagAssignment -Tag $TAGname -Entity $vm $output = \u0026#39;Assigned TAG: \u0026#39; + $TAGname + \u0026#39; to VM: \u0026#39; + $vm Write-Output $output } # end if else{ $output = \u0026#39;TAG: \u0026#39; + $TAGname + \u0026#39; already assigned to VM: \u0026#39; + $vm Write-Output $output } } # end else } # end foreach # ----- [ End add Storage vCenter TAG to VMs for a specific DataStore Cluster ] ----- Code to Verify that each VM only has (1) DataStore Cluster TAG assigned: The code looks to see if one than (1) DataStore Cluster TAG is assigned. If a VM has an iso mounted from a 2nd Datastore that could make (2) TAGs get assigned. If a VM was located on a DataStore Cluster and had a SNAP Shot and was moved to a 2nd DataStore Cluster, it could get (2) DataStore Cluster TAGs assigned until the SNAP is Deleted. For this use case, I ONLY want (1) Datastore Cluster to be used per VM. include code to connect to vCenter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # ----- [ Start Verify that VM has only (1) DS Cluster TAG ] ----- $allVMs = Get-VM $allVMs = $allVMs.Name $allVMs = $allvms | Sort-Object Write-Output \u0026#39;Starting TAG count check...\u0026#39; foreach($vm in $allVMs){ $assignedTAGs = Get-VM $vm | Get-TagAssignment $assignedTAGs = $assignedTAGs.Tag.Name $assignedTAGs = $assignedTAGs | Where-Object {$_ -like \u0026#39;TAG-VM-DS-CLSTR-*\u0026#39;} $tagCount = $assignedTAGs.count if($tagCount -gt 1){ $output = \u0026#39;VM: \u0026#39; + $vm + \u0026#39; has more than 1 DS Cluter Tag Assigned!\u0026#39; Write-Output $output } # end if } # End foreach Write-Output \u0026#39;TAG count check complete\u0026#39; # ----- [ End Verify that VM has only (1) DS Cluster TAG ] ----- Code to verify that each VM is located in the correct DataStore Cluster based in vCenter TAG: The code gets all the DataStore Cluster VMware vCenter TAGs. The code then gets all VMs assigned a TAG and verifies that the VM is located in the correct DataStore Cluster. If the VM is NOT located in the DataStore Cluster that matches the vCenter TAG, it moves the VM to the correct DataStore Cluster. include code to connect to vCenter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # ----- [ Start Verify that VM is in correct DS Cluster based in TAG ] ----- $newCategory = \u0026#39;Automation\u0026#39; $allTAGs = Get-Tag $allTAGs = $allTAGs.Name $allTAGs = $allTAGs | Where-Object {$_ -like \u0026#39;TAG-VM-DS-CLSTR-*\u0026#39;} | Sort-Object foreach($tag in $allTAGs){ $output = \u0026#39;--- TAG: \u0026#39; + $tag Write-Output $output $dsCluster = $tag $dsCluster = $dsCluster.replace(\u0026#39;TAG-VM-\u0026#39;,\u0026#39;\u0026#39;) $tagfilter = $newCategory + \u0026#39;/\u0026#39; + $tag $vmList = Get-TagAssignment | Where-Object {$_.Tag -like $tagfilter} $vmList = $vmList.Entity.Name | Sort-Object foreach($vm in $vmlist){ $currentDSCluster = Get-VM $vm | Get-DatastoreCluster $currentDSCluster = $currentDSCluster.Name if($currentDSCluster -eq $dsCluster){ $output = \u0026#39;Already in DS Cluster: \u0026#39; + $dsCluster + \u0026#39; - VM: \u0026#39; + $vm Write-Output $output } # end if else{ $output = \u0026#39;*Moving to DS Cluster: \u0026#39; + $dsCluster + \u0026#39; - VM: \u0026#39; + $vm Write-Output $output Move-VM -VM $vm -Datastore $dsCluster } # End else } # End foreach } # end foreach # ----- [ End Verify that VM is in correct DS Cluster based in TAG ] ----- Code to Disconnect CD from all VMs: include code to connect to vCenter Before I assigned the vCenter TAGs to the VMs using a script to automate the process, I made sure that none of the VMs had a SNAP or a iso attached. Here is the code to disconnect all iso images mounted to a VM. 1 2 # Code Disconnect CD from all VMs Get-VM | Where-Object {$_.PowerState –eq “PoweredOn”} | Get-CDDrive | Set-CDDrive -NoMedia -Confirm:$False Lessons Learned You can use this code to maintain VM placement, but you could also use this code to move VMs to new DatStore Clusters. Assign a new TAG to the VM and the process will do a Storage vMotion for you. Great way to move VMs if you get a new SAN. I located the VM based on DataStore Cluster. You could change code slightly and specify a specific DataStore. If there is a member on your VMware Team that changes which DataStore Cluster a VM should be located for no reason, you could also fix the issue by giving that Team Member 30 days in the electric chair so they don\u0026rsquo;t do it again. :) When I write about vRealize Aria Automation, I always say there are many ways to accomplish the same task. This article is just one way that you could accomplish this task. I am showing what I felt was a good way to complete the use case but every organization/environment will be different. There is no right or wrong way to complete automation as long as it completes successfully and consistently.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2023-01-27T00:00:00Z","image":"https://vcrocs.info/use-vcenter-tags-to-maintain-vm-storage-placement/featured-image_hu_4f7f396860aa275c.png","permalink":"https://vcrocs.info/use-vcenter-tags-to-maintain-vm-storage-placement/","title":"Use vCenter TAGs to maintain VM Storage Placement"},{"content":"How to setup and configure your VMware Aria Automation environment to work with Ansible.\nUse Case I was recently asked how the VMware Aria Automation | Ansible Integration worked. I never used Ansible before so I thought this would be great time to learn Ansible and demo the integration with VMware Aria Automation. If you look at some of my previous blog posts I wrote about SaltStack Config a lot. I thought this would be a good time for myself to learn Ansible and compare the two products.\nWhen I started reading about the VMware Aria Automation and Ansible Integration, I didn\u0026rsquo;t find a single blog post or article that covered everything from installing Ansible to creating a new Server Build in Aria Automation. I am going to document all the steps that it took for me to do a complete Aria Automation | Ansible integration. I hope that someone will find this blog post useful on their Automation journey.\nA lot of people that write about Ansible use it with Red Hat Linux. For my demo environment, I chose to use Rocky Linux so that I don\u0026rsquo;t need to worry about any Red Hat licenses. Some people online recommend using Rocky Linux to replace CentOS. Sometimes it seems that the version of Linux you choose and what product to you use for Automation and Config management can be almost a religious debate. This blog post is to cover a specific use case. How to use VMware Aria Automation | Ansible Integration. Use whatever version of Linux you want. The details that I write about may need to be modified slightly if you use a different version of Linux. This blog post will at least give you the framework to get started.\nWhen I wrote this Blog Post I was using VMware Aria Automation version 8.10.2, Ansible 2.13.3 and Rocky Linux 9.\nTo use the details in this blog post you will need a working install of VMware Aria Automation.\nCreate a Ansible Control Server and install Ansible: Create a new Server. I created a clean Rocky Linux VM. This server will be used as the Ansible Control Node. Steps to install Ansible:\n1 2 3 4 5 6 7 8 # Step 1 | Install Rocky Linux EPEL repository dnf install epel-release -y # Step 2 | Install Ansible dnf install ansible -y # Check Ansible Version after Install ansible --version Results from ansible \u0026ndash;version:\n1 2 3 4 5 6 7 8 9 ansible [core 2.13.3] config file = /etc/ansible/ansible.cfg configured module search path = [\u0026#39;/root/.ansible/plugins/modules\u0026#39;, \u0026#39;/usr/share/ansible/plugins/modules\u0026#39;] ansible python module location = /usr/lib/python3.9/site-packages/ansible ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections executable location = /usr/bin/ansible python version = 3.9.14 (main, Nov 7 2022, 00:00:00) [GCC 11.3.1 20220421 (Red Hat 11.3.1-2)] jinja version = 3.1.2 libyaml = True Edit the hosts file: Edit the /etc/ansible/hosts file: I like to use nano to edit files. To save file changes in Nano use cntrl-o. To exit Nano use cntrl-x. 1 2 # the cmd at the cli to edit the hosts file nano /etc/ansible/hosts This is the contents of the /etc/ansible/hosts file: 1 2 3 4 5 6 [rocky] 192.168.110.201 [rocky:vars] ansible_user=root ansible_password=\u0026#39;VMware1!\u0026#39; Edit the ansible.cfg file: Edit the /etc/ansible/ansible.cfg file: 1 2 # the cmd at the cli to edit the ansible.cfg file nano /etc/ansible/ansible.cfg This is the minium contents of the /etc/ansible/ansible.cfg file:\nBOTH of these lines MUST be in the ansible.cfg file to add Ansible to VMware Aria Automation. If they are not present, adding the Integration will fail! The vault password file can be named something different, BUT IT MUST BE SPECIFIED! 1 2 3 [defaults] host_key_checking = False vault_password_file = /etc/ansible/vault-pass.txt Test Ansible Install To test the Ansible install you can do a ping:\n1 2 # the cmd at the cli to run a ping ansible rocky -m ping VMware Aria Automation Configuration Add Ansible Integration to VMware Aria Automation:\nYou need to specify the Inventory File path. Default is /etc/ansible/hosts You need to make sure the /etc/ansible/ansible.cfg file has the following two lines of code to add as an VMware Aria Automation Integration. ansible.cfg file:\n1 2 3 [defaults] host_key_checking = False vault_password_file = /etc/ansible/vault-pass.txt Ansible Integration screen:\nVMware Aria Automation Cloud Template Add Ansible to Cloud Template\nCloud Template YAML code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 # Cloud Template using Ansible Integration formatVersion: 1 inputs: CustomizationSpec: type: string description: Customization Specification default: ubuntu title: CustomizationSpec VMName: type: string title: VM Name minLength: 1 maxLength: 12 default: VCROCS-001 IP: type: string default: 192.168.110.200 ServerGroups: type: string title: ServerGroups description: Ansible Server Groups default: rocky enum: - rocky - WebServers - AppServers - DBServers PlayBooks: type: string title: PlayBooks description: Ansible PlayBooks default: web-server-rocky enum: - web-server-rocky - rocky-web - rocky-db resources: Cloud_Ansible_1: type: Cloud.Ansible properties: host: ${resource.Cloud_Machine_1.*} osType: linux account: rocky-ansible username: root password: VMware1! groups: - ${input.ServerGroups} playbooks: provision: - ${\u0026#34;/etc/ansible/\u0026#34; + input.PlayBooks + \u0026#34;.yml\u0026#34; } Cloud_Network_1: type: Cloud.Network properties: networkType: existing constraints: - tag: network:VMs Cloud_Machine_1: type: Cloud.Machine properties: image: rocky flavor: small name: ${input.VMName} customizationSpec: ${input.CustomizationSpec} constraints: - tag: env:VMs networks: - network: ${resource.Cloud_Network_1.id} assignment: static address: ${input.IP} Example Ansible Playbook Creates a txt file, adds text to txt file, installs web server, starts web server service, enables cockpit, installs git, and does a git pull request from GitHub to copy web site files to new server. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # web-server-rocky.yml - hosts: rocky name: Ansible Playbook to Install Web Server tasks: - name: Create a new txt file | web-server.txt file: path: /root/web-server.txt state: touch - name: Add a line of text to txt file | web-server.txt lineinfile: path: /root/web-server.txt line: \u0026#34;vRA created this VM and used Ansible to create and modify this txt file | web-server.txt\u0026#34; - name: Install Apache web server dnf: name: httpd state: latest - name: Ensure HTTP server is running service: name: httpd state: started - name: Run systemctl enable --now cockpit.socket command shell: systemctl enable --now cockpit.socket - name: Install Git dnf: name: git state: latest - name: Github Pull request of www.vCROCS.info ansible.builtin.git: repo: https://github.com/dalehassinger/Blog.git dest: /var/www/html single_branch: yes version: master VMware Aria Automation Service Broker Catalog:\nVMware Aria Automation Service Broker Request You can make the Ansible Server Group and Playbooks a dropdown with the custom form. The code to do this is within the YAML code of the Cloud Template. Lessons Learned The VMware Aria Automation | Ansible Integration works well if you follow all the configuration steps. Ansible installation is very easy when you follow the directions. Helpful Links Red Hat Ansible Web Site Deeper look at the vRealize Automation and Ansible Open Source Integration Configure Ansible Open Source integration in Cloud Assembly When I write about VMware Aria Automation I always say there are many ways to accomplish the same task. Ansible is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Ansible.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2022-12-30T00:00:00Z","image":"https://vcrocs.info/vmware-aria-automation-and-ansible-integration/featured-image_hu_9ce33ab210e9b302.png","permalink":"https://vcrocs.info/vmware-aria-automation-and-ansible-integration/","title":"VMware Aria Automation and Ansible Integration"},{"content":"APPs that I use everyday to be Productive | 2022\nIf you have any APPs that you like better than I have listed please send them my way. I am always open to looking at new APPs. If you would ever want to see how I use these APPs reach out! I can do a demo.\nRecent APPs Here are some APPs that I started using recently to be productive:\nTickTick | To-Do and Notes App in one. CleanShot X | Screen Shot and Screen recording App mmhmm | Makes on-screen meetings and presentations a little more fun. Proven APPs Here are some APPs that I have been using Daily for work or Blogging for awhile. They have proven their place in my workflows:\nVisual Studio Code | Creating Code Github Desktop Affinity Photo | Photo editing VMware Fusion Termius | SSH Client Forklift | SFTP Client Slack Zoom | Online Meetings, Chat, etc\u0026hellip; Hugo | The world’s fastest framework for building websites Microsoft Teams | Online Meetings, Chat, etc\u0026hellip; Microsoft Office | Word, Excel, Outlook, Powerpoint, OneNote Backblaze | Online Backup to keep all my important files offsite. Dashlane | Password Manager BetterSnapTool | easily manage your window positions Raindrop.io | All-in-one bookmark manager If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2022-11-26T00:00:00Z","image":"https://vcrocs.info/productive-apps-2022/featured-image_hu_cacd11e57abf7297.png","permalink":"https://vcrocs.info/productive-apps-2022/","title":"Productive APPs | 2022"},{"content":"New Job | August 2022 | Technical Account Manager (TAM)\nOn August 1, 2022 I became an employee of VMware as a Technical Account Manager, TAM.\nI was hired to be a TAM with a focus on the vRealize Suite. Within a month of my hire date VMware announced VMware Aria. So now I am a TAM with a focus on the VMware Aria Product.\nTo work for VMware was a career goal of mine. I was always impressed by the VMware employees that I worked with the past 10+ years. Everyone was always very professional and had a great attitude to help their customers. I wanted to know personally what it was like to work in that type of culture. If you know me you know that I have a passion for the VMware Aria suite of Products. So to be a TAM with a focus on Aria is a good fit for me.\nAfter several months at VMware, this is what I learned.\nThe culture overall is very positive. A lot of people helped me in my on-boarding and wanted to see me be successful. People that I knew before I joined VMware reached out to me and said \u0026ldquo;What can I do to help you\u0026rdquo;. The employee benefits are the best that I ever had in my career so far. You get to do a lot of training to keep your skills up to date and at a level the customers expect. The on-boarding process can take days, weeks, months\u0026hellip; To get started I received a laptop of my choice 3 days before my start date. Never experienced that before. Having a Mentor at VMware is very important. Someone that wants to help you be successful and will take the time to show you how to do your job, recommend training, help you pick benefits, let you know about different programs to get involved with, let you know about weekly zoom training sessions, help you get a lab setup, etc\u0026hellip; VMware wants all employees to give back by making donations to non-profits, 100% match by VMware. VMware wants all employees to donate time to non-profits. Special thanks to some people that went above and beyond when I started at VMware to help me, in no particular order:\nMarshall Cline, Ariel Sanchez, Brock Peterson, Cosmin Trif, Christopher Kusek, Anton Wesztergom, Alex Musicante, Chad Thomas, David Kruse, Steve Lieberson, Paul Schlosser, Christina Griffus and some I may have missed.\nNow that I am getting more engaged with the customers that I will be working with, I plan to start blogging more again to continue giving back to the vCommunity. Share the knowledge!\nIf anyone that reads my blogs would ever want to talk to me about being a VMware employee, please reach out to me. I will share my experience 1:1.\nAnother area that I want to give back to the vCommunity is to help Mentor others. If anyone wants to ever talk, please reach out.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2022-11-01T00:00:00Z","image":"https://vcrocs.info/what-have-i-been-up-to-2nd-half-2022/featured-image_hu_f783706128aa95cf.png","permalink":"https://vcrocs.info/what-have-i-been-up-to-2nd-half-2022/","title":"What have I been up to? | 2nd half 2022"},{"content":"VMware Explore 2022 | San Francisco\nVMware Explore is always one of the premiere Technology Events every year. Here is a collection of links and tips to some of the activities that I would attend and enjoy.\nI always tried to attend the Keynotes to learn about new product announcements and to hear the direction that VMware was going. I attended a lot of sessions. See list of sessions that I would enjoy. I would do Hands on Labs that were not available to do anytime. There are some HOLs that are available only during the conference and there are VMware people to help you with the labs. If you are a TAM customer, there are sessions dedicated to TAM customers. Go to the Expo Area. You can always talk to VMware Engineers at the booths in the Expo Area and watch demos. A lot of Vendors in the Expo Area. I would allows attend some of the vBrownbag Tech Talks. The Tech Talks were a 10 - 15 minute presentation. Watch for Vendor Parties. They are always fun and drinks | food are always free. The Veeam party in the past was always one of the better parties. See a McLaren F1 car in person, experience the speed of F1 in a fun simulator and learn how VMware helps McLaren F1 accelerate innovation. VMware Explore Sessions: Login to VMware Explore 2022 before clicking on session links. (Click Here)\nAgenda: VMware Explore Agenda Speakers: William Lam | Cloud Infrastructure Business Group Vincent Riccio | Cloud Management Business Unit Chris McClanahan | Cloud Management Business Unit Ariel Sanchez | One of the most accomplished TAMs you will meet. A mentor to many people in TECH John Nicholson | Storage and Availability Business Unit Sam McGeown | Technical Marketing team for Cloud Automation John Dias | Cloud Management solutions Amanda Blevins | Vice President and Chief Technology Officer for the Americas Kyle Ruddy | Senior Technical Product Marketing Manager for HashiCorp Graham Lockard | IT Infrastructure Manager | Penn State University | SaaS with Horizon Topics: SaltStack PowerCLI PowerShell | More sessions this year than I have seen in the past. VMware {code} vRealize Automation vRealize Operations vRealize Orchestrator vRealize Log Insight Virtually Speaking Podcast Live vSAN vSphere DevOps Sessions: VMware Explore | Twitter ","date":"2022-08-24T00:00:00Z","image":"https://vcrocs.info/central-pa-vmug-august-2022/featured-image_hu_ed49a869dfc30ea6.png","permalink":"https://vcrocs.info/central-pa-vmug-august-2022/","title":"Central PA VMUG | August 2022"},{"content":"VMware PowerBlock | August 2022\nThe August PowerBlock is absolutely going to be a well attended event. We are gong to have an all-star lineup, of highly qualified automation engineers, including Ariel Sanchez, Tom Gillaspy, Chris McClanahan, Dale Hassinger and our powerblock discussing a variety of topics.\nHere is the general outline for the conversation:\nHow do you get started with automation? What does success look like? What are some of the common mistakes / misperceptions when getting started with automation? What are some examples of customer success using vRealize Automation? Why Automate? How to get started? What does success look like? What are some common mistakes / misperception\u0026rsquo;s Examples of customer success If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2022-08-19T00:00:00Z","image":"https://vcrocs.info/vmware-powerblock-august-2022/featured-image_hu_4480ed903b86e84f.png","permalink":"https://vcrocs.info/vmware-powerblock-august-2022/","title":"VMware PowerBlock | August 2022"},{"content":"Using SaltStack Config api for Automation from vRA Catalog or cmd\nA personal goal of mine for 2022 was to start doing more with Python when working with VMware SaltStack Config. As a Windows Admin most of my automation was done with PowerShell. All the examples you see in the salt documentation are written in Python, so to use Python for some processes makes sense.\nI had a use case that made sense to use Python. I want to schedule reboots of AWS EC2 instances using SaltStack Config. For Servers that are on-prem I would always automate the process to create a server reboot scheduled task in vCenter. With AWS I want to use VMware SaltStack Config to schedule the Server Reboot.\nManual Steps:\nCreate a SaltStack Config Job to do the reboot.\nI create a job named \u0026ldquo;vRA | Server Reboot\u0026rdquo;. This job will be used for all scheduled server reboots. Copy the Python Code below and create a ScheduleServerReboot.py file that will be copied to the SSC server. The Python Code completes the following steps:\nCreates a Target that uses the grain \u0026ldquo;id\u0026rdquo; and will only target the Server that you want to reboot. Creates a Run Once Schedule to use the job and new target that was created. Sends an email to show that the run once schedule to reboot server was created. SaltStack Config Server: My SaltStack Config Server (SSC) is what VMware provides when using Life Cycle Manager (LCM) running Photon OS. Python Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 # --- Python Code --- # --- In my code I show the Password. In Production DO NOT DO THIS. # --- There are so many different ways to include encrypted PWs in the code. # --- Use what works best in your environment. # example to run the script # python3 /scripts/ScheduleServerReboot.py -name \u0026#39;2019DC\u0026#39; -dateTime \u0026#39;2022-06-25T23:00\u0026#39; import argparse import pprint import json from datetime import datetime from datetime import timedelta import random import smtplib, ssl from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart # --- Generate a random ID number randomNumber = random.randint(0,1000) randomNumber = \u0026#39;0000\u0026#39; + str(randomNumber) randomNumber = randomNumber[-4:] print(\u0026#39;ID:\u0026#39;,randomNumber) # --- parse arguments parser = argparse.ArgumentParser(description=\u0026#34;Create Targets\u0026#34;, formatter_class=argparse.ArgumentDefaultsHelpFormatter) parser.add_argument(\u0026#34;-name\u0026#34;, help=\u0026#34;Target Name\u0026#34;) parser.add_argument(\u0026#34;-dateTime\u0026#34;, help=\u0026#34;Schedule Date | Time\u0026#34;) args = vars(parser.parse_args()) # --- Set up variables argName = args[\u0026#34;name\u0026#34;] argDateTime = args[\u0026#34;dateTime\u0026#34;] argDate = argDateTime[0:10] # --- Print the variables print(\u0026#39;Server Name: \u0026#39;,argName) print(\u0026#39;Date | Time: \u0026#39;,argDateTime) # --- Connect to SSC Server host = \u0026#39;https://192.168.86.110\u0026#39; user = \u0026#39;root\u0026#39; password = \u0026#39;HackMe!\u0026#39; from sseapiclient.tornado import SyncClient client = SyncClient.connect(host, user, password, ssl_validate_cert=False) # --- Check to make sure minion exists minionName = \u0026#39;\u0026#39; minionReturn = client.api.minions.get_minion_presence(minion_id = argName) #print(targetReturn) for x in minionReturn.ret[\u0026#39;results\u0026#39;]: #print(x) minionName = x[\u0026#39;minion\u0026#39;] print(\u0026#39;minionName:\u0026#39;, minionName) if minionName == \u0026#39;\u0026#39;: print(\u0026#39;Minion not found!\u0026#39;) minionExists = \u0026#39;false\u0026#39; else: print(\u0026#39;Minion found!\u0026#39;) minionExists = \u0026#39;true\u0026#39; # --- Create Target ID | Name targetID = \u0026#39;id:\u0026#39; + argName targetName = \u0026#34;vRA | Reboot | \u0026#34; + argName + \u0026#39; | \u0026#39; + argDate + \u0026#39; | ID:\u0026#39; + randomNumber print(\u0026#39;Target ID:\u0026#39;,targetID) print(\u0026#39;Target Name:\u0026#39;,targetName) # --- Create New SSC Target client.api.tgt.save_target_group(tgt={\u0026#39;*\u0026#39;: {\u0026#39;tgt_type\u0026#39;: \u0026#39;grain\u0026#39;, \u0026#39;tgt\u0026#39;:targetID}}, name=targetName) # --- Get UUID of new Target Created targetReturn = client.api.tgt.get_target_group(name=targetName) for x in targetReturn.ret[\u0026#39;results\u0026#39;]: #print(x) targetUUID = x[\u0026#39;uuid\u0026#39;] print(\u0026#39;Target UUID:\u0026#39;, targetUUID) # --- Get UUID of Job to run in Schedule #jobReturn=client.api.job.get_jobs() jobName = \u0026#39;vRA | Server Reboot\u0026#39; print(\u0026#39;Job Name: \u0026#39;,jobName) jobReturn = client.api.job.get_jobs(name=jobName) for x in jobReturn.ret[\u0026#39;results\u0026#39;]: #print(x) jobUUID = x[\u0026#39;uuid\u0026#39;] print(\u0026#39;Job UUID:\u0026#39;, jobUUID) # -- Create a run once Schedule # 2022-06-21T13:21 - Date|Time format from vRA print(\u0026#39;Schedule Time:\u0026#39;,argDateTime) # --- Create Schedule Name scheduleName = \u0026#39;vRA | Reboot | \u0026#39; + argName + \u0026#39; | \u0026#39; + argDate + \u0026#39; | ID:\u0026#39; + randomNumber print(\u0026#39;Schedule Name:\u0026#39;, scheduleName) # --- Create Run Once Schedule scheduleReturn = client.api.schedule.save( name=scheduleName, schedule={\u0026#39;once\u0026#39;: argDateTime, \u0026#39;timezone\u0026#39;: \u0026#39;America/New_York\u0026#39;}, cmd=\u0026#34;local\u0026#34;, tgt_uuid=targetUUID, job_uuid=jobUUID ) # --- Send Email about vRA Request using gmail. sender_email = \u0026#34;dale.hassinger@gmail.com\u0026#34; receiver_email = \u0026#34;dale.hassinger@vcrocs.info\u0026#34; password = \u0026#34;HackMe!\u0026#34; message = MIMEMultipart(\u0026#34;alternative\u0026#34;) message[\u0026#34;Subject\u0026#34;] = \u0026#34;vRA Scheduled EC2 Reboot | \u0026#34; + argName message[\u0026#34;From\u0026#34;] = sender_email message[\u0026#34;To\u0026#34;] = receiver_email # --- Create HTML Body if minionExists == \u0026#39;true\u0026#39;: html = \u0026#34;\u0026#34;\u0026#34; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;A Request to reboot a AWS EC2 was run from vRA.\u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;EC2 Information:\u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;ul style=\u0026#34;list-style-type:disc\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 12px;\u0026#34;\u0026gt;\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;EC2 Name: \u0026#34;\u0026#34;\u0026#34; + argName + \u0026#34;\u0026#34;\u0026#34;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 12px;\u0026#34;\u0026gt;\u0026lt;li\u0026gt;Target Created: \u0026#34;\u0026#34;\u0026#34; + targetName + \u0026#34;\u0026#34;\u0026#34;\u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 12px;\u0026#34;\u0026gt;\u0026lt;li\u0026gt;Schedule Created: \u0026#34;\u0026#34;\u0026#34; + scheduleName + \u0026#34;\u0026#34;\u0026#34;\u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 12px;\u0026#34;\u0026gt;\u0026lt;li\u0026gt;Reboot Date | Time: \u0026#34;\u0026#34;\u0026#34; + argDateTime + \u0026#34;\u0026#34;\u0026#34;\u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 11px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;vCROCS - Automated IT \u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 10px;\u0026#34;\u0026gt;#VMware #vRealize #SaltStackConfig\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;\u0026#34;\u0026#34; elif minionExists == \u0026#39;false\u0026#39;: html = \u0026#34;\u0026#34;\u0026#34; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;A Request to reboot a AWS EC2 was run from vRA.\u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;EC2 Information:\u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;ul style=\u0026#34;list-style-type:disc\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 12px;\u0026#34;\u0026gt;\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;EC2 Name: \u0026#34;\u0026#34;\u0026#34; + argName + \u0026#34;\u0026#34;\u0026#34;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;The Server Name was not found in Salt! Please double check name and try again!\u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 11px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;vCROCS - Automated IT \u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 10px;\u0026#34;\u0026gt;#VMware #vRealize #SaltStackConfig\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;\u0026#34;\u0026#34; # --- HTML MIMEText objects emailHTML = MIMEText(html, \u0026#34;html\u0026#34;) # --- Add the HTML part to MIMEMultipart message message.attach(emailHTML) # --- Create secure connection and send HTML email context = ssl.create_default_context() with smtplib.SMTP_SSL(\u0026#34;smtp.gmail.com\u0026#34;, 465, context=context) as server: server.login(sender_email, password) server.sendmail( sender_email, receiver_email, message.as_string() ) Example of email that is sent when process completes.\nScreen Shots of the SaltStack Config Job, Target and Schedule:\nSSC Job:\nSSC Target:\nTo run this process to reboot an AWS EC2 from the vRA catalog for Day 2 operations I used the OOTB (Out of The Box) orchestrator workflow named \u0026ldquo;Run SSH command\u0026rdquo;. I never modify the OOTB workflows. I cloned this Workflow and named it \u0026ldquo;Schedule EC2 Reboot\u0026rdquo;.\nOriginal OOTB Workflow from vRO:\nCloned Worked in vRO:\nVery simple form to fill out. Enter EC2 name and Date|Time.\nThe Workflow takes the data from the vRA custom form and does an SSH Connection to the SSC server and runs a single line command using the data from the form as arguments:\npython3 /scripts/ScheduleServerReboot.py -name \u0026lsquo;2019DC\u0026rsquo; -dateTime 2022-06-25T23:00\u0026rsquo;\nI hope the provided code and screenshots were helpful to get you started. Lessons Learned: If you are a Windows Server Admin that knows PowerShell, to start using Python will take some time but the languages are similar. SaltStack Config api is a great way to create Day 2 automation processes in vRA. SaltStack Config - RaaS API Documentation Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2022-06-26T00:00:00Z","image":"https://vcrocs.info/vmware-vrealize-saltstack-config-api/featured-image_hu_58172bdfb729f141.png","permalink":"https://vcrocs.info/vmware-vrealize-saltstack-config-api/","title":"VMware vRealize SaltStack Config API"},{"content":"Part 9: Using salt-api with PowerShell for Windows Server Automation\nUpdate: It was brought to my attention that adding cherypy will break the salt master. After a quick test in my lab I had the same issue with the newest version of SaltStack Config. DO NOT use this blog post until I get a working version in my lab.\nIf you want to work with the VMware Aria Automation Config API please use this newer Blog Post that I created:\nUnlocking the Potential | VMware Aria Automation Config API This post is to show how to use PowerShell to make RESTful API calls to SaltStack Config. This is something that I have wanted to do for awhile. I could never find any examples in my Google searches, so I took the time to learn how the examples that use curl work and translated that into PowerShell Code. I hope some Windows Server Admins will find this post helpful. I like using salt to do Windows Server Configuration Management more than remote PowerShell. You can run changes against many servers at the exact same time instead of looping thru a list of servers names.\nI am also going to look at use salt-api with vRealize Automation ABX action scripts.\nIn some previous posts I used the POSH-SSH module but when you use the salt-api, the PowerShell Module POSH-SSH is no longer needed.\nConfiguration Changes to the SaltStack Config Server: My SaltStack Config Server (SSC) is what VMware provides when using Life Cycle Manager (LCM) running Photon OS. The following steps are what I needed to do in my Lab environment from the SSC CLI to enable salt-api: * Always make sure you have a good snap | backup before making any changes to SSC Server Install CherryPy: 1 pip3 install cherrypy Install the PyOpenSSL package: 1 pip3 install pyopenssl Generate a self-signed certificate: 1 salt-call --local tls.create_self_signed_cert open firewall port 8000: 1 iptables -A INPUT -i eth0 -p tcp --dport 8000 -j ACCEPT Edit /etc/salt/master file: 1 vi /etc/salt/master Add these lines to the /etc/salt/master file:\n1 2 3 4 5 6 7 8 9 external_auth: pam: root: - .* rest_cherrypy: port: 8000 ssl_crt: /etc/pki/tls/certs/localhost.crt ssl_key: /etc/pki/tls/certs/localhost.key Restart salt-master and check service status for any errors: 1 2 systemctl restart salt-master systemctl status salt-master Enable | Start salt-api and check service status for any errors: 1 2 3 systemctl enable salt-api systemctl start salt-api systemctl status salt-api Tests to make sure SaltStack Config Changes are working: I did all this PowerShell code from my mac. To use self-signed certs I use -SkipCertificateCheck. On a Windows OS the code is different. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # --- PowerShell Code --- Invoke-WebRequest -Uri \u0026#39;https://192.168.86.141:8000\u0026#39; -SkipCertificateCheck Results: StatusCode : 200 StatusDescription : OK Content : {\u0026#34;return\u0026#34;: \u0026#34;Welcome\u0026#34;, \u0026#34;clients\u0026#34;: [\u0026#34;local\u0026#34;, \u0026#34;local_async\u0026#34;, \u0026#34;local_batch\u0026#34;, \u0026#34;local_subset\u0026#34;, \u0026#34;runner\u0026#34;, \u0026#34;runner_async\u0026#34;, \u0026#34;ssh\u0026#34;, \u0026#34;wheel\u0026#34;, \u0026#34;wheel_async\u0026#34;]} RawContent : HTTP/1.1 200 OK Server: CherryPy/8.9.1 Date: Sat, 11 Jun 2022 20:57:46 GMT Access-Control-Allow-Origin: * Access-Control-Expose-Headers: GET, POST Access-Control-Allow-Credentials: true Vary: Accept-E… Headers : {[Server, System.String[]], [Date, System.String[]], [Access-Control-Allow-Origin, System.String[]], [Access-Control-Expose-Headers, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 146 RelationLink : {} Make sure you see StatusCode: 200\nNext step is to make sure you get a token:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # --- PowerShell Code --- # --- In my code I show the PassWord. In Production DO NOT DO THIS. # --- There are so many different ways to include encrypted PWs in the code. # --- Use what works best in your environment. $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; # --- Set the json body $body = \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;root\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;HackMe!\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;}\u0026#39; # --- Fetch New Token from salt master $url = \u0026#34;$saltServerAddress/login\u0026#34; $Params = @{ Method = \u0026#34;Post\u0026#34; Uri = $url Body = $Body ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck $fetch $fetch.return.token Results: return ------ {@{token=6696846c802f78d5326a69b79d36e95015d37f5a; expire=1655025071.22838; start=1654981871.22838; user=root; eauth=pam; perms=System.Object[]}} 6696846c802f78d5326a69b79d36e95015d37f5a You will see \u0026ldquo;token=\u0026rdquo; in the return data PowerShell API Code Examples: Run a test.ping 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # --- PowerShell Code --- $minionName = \u0026#39;2019DC\u0026#39; $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; $userName = \u0026#39;root\u0026#39; $password = \u0026#39;HackMe!\u0026#39; $fun = \u0026#39;test.ping\u0026#39; $fetch = \u0026#39;\u0026#39; # --- Set the json body $body = \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;\u0026#39; + $userName + \u0026#39;\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;\u0026#39; + $password + \u0026#39;\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;,\u0026#34;tgt\u0026#34;: \u0026#34;\u0026#39; + $minionName + \u0026#39;\u0026#34;,\u0026#34;fun\u0026#34;: \u0026#34;\u0026#39; + $fun + \u0026#39;\u0026#34;,\u0026#34;client\u0026#34;: \u0026#34;local\u0026#34;}\u0026#39; # --- Create RESTful API Request $url = \u0026#34;$saltServerAddress/run\u0026#34; $Params = @{ Method = \u0026#34;Post\u0026#34; Uri = $url Body = $Body ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck # --- Showing different ways to show the return data #$fetch $fetch.return $fetch.return.$minionName Check disk.usage 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # --- PowerShell Code --- $minionName = \u0026#39;2019DC\u0026#39; $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; $userName = \u0026#39;root\u0026#39; $password = \u0026#39;HackMe!\u0026#39; $fun = \u0026#39;disk.usage\u0026#39; # -salt function $fetch = \u0026#39;\u0026#39; # --- Set the json body $body = \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;\u0026#39; + $userName + \u0026#39;\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;\u0026#39; + $password + \u0026#39;\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;,\u0026#34;tgt\u0026#34;: \u0026#34;\u0026#39; + $minionName + \u0026#39;\u0026#34;,\u0026#34;fun\u0026#34;: \u0026#34;\u0026#39; + $fun + \u0026#39;\u0026#34;,\u0026#34;client\u0026#34;: \u0026#34;local\u0026#34;}\u0026#39; # --- Create RESTful API Request $url = \u0026#34;$saltServerAddress/run\u0026#34; $Params = @{ Method = \u0026#34;Post\u0026#34; Uri = $url Body = $Body ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck # --- Showing different ways to show the return data $fetch.return $fetch.return.$minionName $fetch.return.$minionName.\u0026#39;C:\\\u0026#39; $fetch.return.$minionName.\u0026#39;C:\\\u0026#39;.capacity Check Service Status 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # --- PowerShell Code --- $minionName = \u0026#39;2019DC\u0026#39; $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; $userName = \u0026#39;root\u0026#39; $password = \u0026#39;HackMe!\u0026#39; $fun = \u0026#39;service.status\u0026#39; # -salt function $arg = \u0026#39;spooler\u0026#39; # -Service Name $fetch = \u0026#39;\u0026#39; # --- Set the json body $body = \u0026#39;{\u0026#34;username\u0026#34;: \u0026#34;\u0026#39; + $userName + \u0026#39;\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;\u0026#39; + $password + \u0026#39;\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;,\u0026#34;tgt\u0026#34;: \u0026#34;\u0026#39; + $minionName + \u0026#39;\u0026#34;,\u0026#34;fun\u0026#34;: \u0026#34;\u0026#39; + $fun + \u0026#39;\u0026#34;,\u0026#34;arg\u0026#34;: \u0026#34;\u0026#39; + $arg + \u0026#39;\u0026#34;,\u0026#34;client\u0026#34;: \u0026#34;local\u0026#34;}\u0026#39; # --- Create RESTful API Request $url = \u0026#34;$saltServerAddress/run\u0026#34; $Params = @{ Method = \u0026#34;Post\u0026#34; Uri = $url Body = $Body ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck # --- Service Status | True = Running | False = Stopped $fetch.return.$minionName Stop Service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # --- PowerShell Code --- $minionName = \u0026#39;2019DC\u0026#39; $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; $userName = \u0026#39;root\u0026#39; $password = \u0026#39;HackMe!\u0026#39; $fun = \u0026#39;service.stop\u0026#39; # -salt function $arg = \u0026#39;spooler\u0026#39; # -Service Name $fetch = \u0026#39;\u0026#39; # --- Set the json body $body = \u0026#39;{\u0026#34;username\u0026#34;: \u0026#34;\u0026#39; + $userName + \u0026#39;\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;\u0026#39; + $password + \u0026#39;\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;,\u0026#34;tgt\u0026#34;: \u0026#34;\u0026#39; + $minionName + \u0026#39;\u0026#34;,\u0026#34;fun\u0026#34;: \u0026#34;\u0026#39; + $fun + \u0026#39;\u0026#34;,\u0026#34;arg\u0026#34;: \u0026#34;\u0026#39; + $arg + \u0026#39;\u0026#34;,\u0026#34;client\u0026#34;: \u0026#34;local\u0026#34;}\u0026#39; # --- Create RESTful API Request $url = \u0026#34;$saltServerAddress/run\u0026#34; $Params = @{ Method = \u0026#34;Post\u0026#34; Uri = $url Body = $Body ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck # --- Service Stopped | True = Stopped | False = Not Stopped $fetch.return.$minionName Disable Service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # --- PowerShell Code --- $minionName = \u0026#39;2019DC\u0026#39; $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; $userName = \u0026#39;root\u0026#39; $password = \u0026#39;HackMe!\u0026#39; $fun = \u0026#39;service.disable\u0026#39; # -salt function $arg = \u0026#39;spooler\u0026#39; # -Service Name $fetch = \u0026#39;\u0026#39; # --- Set the json body $body = \u0026#39;{\u0026#34;username\u0026#34;: \u0026#34;\u0026#39; + $userName + \u0026#39;\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;\u0026#39; + $password + \u0026#39;\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;,\u0026#34;tgt\u0026#34;: \u0026#34;\u0026#39; + $minionName + \u0026#39;\u0026#34;,\u0026#34;fun\u0026#34;: \u0026#34;\u0026#39; + $fun + \u0026#39;\u0026#34;,\u0026#34;arg\u0026#34;: \u0026#34;\u0026#39; + $arg + \u0026#39;\u0026#34;,\u0026#34;client\u0026#34;: \u0026#34;local\u0026#34;}\u0026#39; # --- Create RESTful API Request $url = \u0026#34;$saltServerAddress/run\u0026#34; $Params = @{ Method = \u0026#34;Post\u0026#34; Uri = $url Body = $Body ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck # --- Service Disabled | True = Disabled | False = Not Disabled $fetch.return.$minionName I hope the code was helpful to get started. Lessons Learned: OOTB (Out of the Box) a SaltStack Config Server is NOT setup to use CherryPY to use api calls. Using PowerShell Invoke-RestMethod is a great way to automate SaltStack Config. The more I use salt with Windows Servers the more I like how it works. So fast. Many different ways to do automation | configuration Management. To get the proper args for a salt function I always test from the CLI. SaltStack REST_CHERRYPY Documentation SaltStack EXTERNAL AUTHENTICATION SYSTEM Documentation Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2022-06-10T00:00:00Z","image":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-9/featured-image_hu_58172bdfb729f141.png","permalink":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-9/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 9"},{"content":"Salt functions that I find myself using the most.\nI have been using VMware vRealize SaltStack Config for several months and I thought I would share and create my own cheat sheet to show which functions I use the most as a Windows Server admin and how to format the syntax. I still feel that I barely use all the capabilities that salt has to offer. SaltStack Config is a very Powerful tool to have available for anyone that has a vRealize Suite License. As a Windows Server admin don\u0026rsquo;t be afraid of salt because you feel it was made for Linux admins. That is NOT the case. I will be managing all Windows Server in my environment with salt. That includes VMs in vCenter and cloud native Azure VMs.\nThis cheat sheet will be updated often to show examples as my journey into the salt world continues. Check back often.\nLink to salt module Documentation\nPing - Make sure server responds: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026gt; Command: salt \u0026#34;vCROCS01\u0026#34; test.ping OR salt \u0026#34;*\u0026#34; test.ping OR salt \u0026#34;vC*\u0026#34; test.ping \u0026gt; Results: vCROCS01: True \u0026gt; Command using --output=json: salt \u0026#34;vCROCS01\u0026#34; test.ping --output=json \u0026gt; Results: { \u0026#34;vCROCS01\u0026#34;: true } Windows Disk Usage: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 \u0026gt; Command: salt \u0026#34;vCROCS01\u0026#34; disk.usage \u0026gt; Results: vCROCS01: ---------- C:\\: ---------- 1K-blocks: 67642364.0 available: 15229492.0 capacity: 77% filesystem: C:\\ used: 52412872.0 E:\\: ---------- 1K-blocks: 41809856.0 available: 38486208.0 capacity: 8% filesystem: E:\\ used: 3323648.0 \u0026gt; Command: salt \u0026#34;vCROCS01\u0026#34; disk.usage --output=json \u0026gt; Results: { \u0026#34;vCROCS01\u0026#34;: { \u0026#34;C:\\\\\u0026#34;: { \u0026#34;filesystem\u0026#34;: \u0026#34;C:\\\\\u0026#34;, \u0026#34;1K-blocks\u0026#34;: 67642364.0, \u0026#34;used\u0026#34;: 52424392.0, \u0026#34;available\u0026#34;: 15217972.0, \u0026#34;capacity\u0026#34;: \u0026#34;78%\u0026#34; }, \u0026#34;E:\\\\\u0026#34;: { \u0026#34;filesystem\u0026#34;: \u0026#34;E:\\\\\u0026#34;, \u0026#34;1K-blocks\u0026#34;: 41809856.0, \u0026#34;used\u0026#34;: 3323648.0, \u0026#34;available\u0026#34;: 38486208.0, \u0026#34;capacity\u0026#34;: \u0026#34;8%\u0026#34; } } } Windows Services: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026gt; Command stop a Windows Service: salt \u0026#34;vCROCS01\u0026#34; service.stop \u0026#34;spooler\u0026#34; \u0026gt; Results: vCROCS01: True \u0026gt; Command disable a Windows Service: salt \u0026#34;vCROCS01\u0026#34; service.disable \u0026#34;spooler\u0026#34; \u0026gt; Results: vCROCS01: True \u0026gt; Command get status of a Windows Service: salt \u0026#34;vCROCS01\u0026#34; service.status \u0026#34;spooler\u0026#34; \u0026gt; Results: vCROCS01: False \u0026gt; Command see if a Windows Service is enabled: salt \u0026#34;vCROCS01\u0026#34; service.enabled \u0026#34;spooler\u0026#34; \u0026gt; Results: vCROCS01: False Copy files to | Delete files from | Windows Server: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026gt; Command Copy a file to a Windows Service - Source File | Destination File: salt \u0026#34;vCROCS01\u0026#34; cp.get_file \u0026#34;salt://installer_file.msi\u0026#34; \u0026#34;C:\\install_files\\installer_file.msi\u0026#34; \u0026gt; Results: vCROCS01: C:\\install_files\\installer_file.msi \u0026gt; Command Delete a file from a Windows Service: salt \u0026#34;vCROCS01\u0026#34; file.remove \u0026#39;C:\\install_files\\installer_file.msi\u0026#39; \u0026gt; Results: vCROCS01: True minion grain data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026gt; Command add grain data to a minion: salt \u0026#34;vCROCS01\u0026#34; grains.append azure_vm \u0026#34;True\u0026#34; vCROCS01: ---------- azure_vm: - True \u0026gt; Command get grain custom data from a minion: salt \u0026#34;vCROCS01\u0026#34; grains.get azure_vm \u0026gt; Results: vCROCS01: - True \u0026gt; Command get grain os data from a minion: salt \u0026#34;vCROCS01\u0026#34; grains.get os \u0026gt; Results: vCROCS01: Windows \u0026gt; Command get grain os data from a minion: salt \u0026#34;vCROCS01\u0026#34; grains.get osfullname \u0026gt; Results: vCROCS01: Microsoft Windows Server 2016 Datacenter \u0026gt; Command get grain domain data from a minion: salt \u0026#34;vCROCS01\u0026#34; grains.get domain \u0026gt; Results: vCROCS01: vcrocs.info \u0026gt; Command get grain IP data from a minion: salt \u0026#34;vCROCS01\u0026#34; grains.get fqdn_ip4 \u0026gt; Results: vCROCS01: - 192.168.99.99 \u0026gt; Command sync minion grain data with salt master: salt \u0026#34;vCROCS01\u0026#34; saltutil.sync_grains \u0026gt; Results: vCROCS01: PowerShell: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026gt; Command run powershell command: salt \u0026#34;vCROCS01\u0026#34; cmd.run \u0026#39;Get-Service | Where-Object {$_.Status -eq \u0026#34;Running\u0026#34;}\u0026#39; shell=PowerShell \u0026gt; Results: vCROCS01: Status Name DisplayName ------ ---- ----------- Running AppHostSvc Application Host Helper Service Running BFE Base Filtering Engine Running BrokerInfrastru... Background Tasks Infrastructure Ser... Running CbDefense CB Defense Running CDPSvc Connected Devices Platform Service Running CertPropSvc Certificate Propagation Running COMSysApp COM+ System Application Running CoreMessagingRe... CoreMessaging \u0026gt; Command run powershell script with script saved on salt master File Server: salt \u0026#34;vCROCS01\u0026#34; cmd.script source=\u0026#34;salt://dev/qualys_install_azure.ps1\u0026#34; shell=powershell \u0026gt; Results: Runs all line of code in script the same as if script was saved local on minion. Minion Reboot: 1 2 3 4 5 6 7 8 \u0026gt; Command minion reboot: salt \u0026#34;vCROCS01\u0026#34; system.reboot 0 \u0026gt; Results: vCROCS01: True Join Domain: 1 2 3 4 \u0026gt; Command join minion to a Windows Domain. You can also specify OU that computer object will be located: salt \u0026#34;vCROCS01\u0026#34; system.join_domain domain=\u0026#39;vcrocs.info\u0026#39; username=\u0026#39;vcrocs\\administrator\u0026#39; password=\u0026#39;VMware1!\u0026#39; account_ou=\u0026#39;OU=Dev,OU=Servers,DC=vcrocs,DC=info\u0026#39; account_exists=False restart=True Windows Registry: 1 2 3 4 5 6 7 8 \u0026gt; Command add a registry key to minion or change value of an existing registry key: salt \u0026#34;vCROCS01\u0026#34; reg.set_value HKEY_LOCAL_MACHINE \u0026#39;SYSTEM\\vCROCS\u0026#39; \u0026#39;Created_by_User\u0026#39; \u0026#39;dhassinger\u0026#39; \u0026gt; Results: vCROCS01: True Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2022-03-06T00:00:00Z","image":"https://vcrocs.info/vmware-vrealize-saltstack-config-cheat-sheet-for-a-windows-server-admin/featured-image_hu_58172bdfb729f141.png","permalink":"https://vcrocs.info/vmware-vrealize-saltstack-config-cheat-sheet-for-a-windows-server-admin/","title":"VMware vRealize SaltStack Config cheat sheet for a Windows Server Admin"},{"content":"VMware vExpert 2020 - 2022 | VMware vExpert Cloud Management 2021 - 2022\nVMware vExpert 2020 - 2022 | VMware vExpert Cloud Management 2021 - 2022 I am very proud to be part of the VMware vExpert program. This is the third year that I was accepted into the program. One part of the vExpert program that I think is great is that the program recognizes people for sharing their knowledge and \u0026ldquo;Giving Back\u0026rdquo;. A person selected into the vExpert programs is someone that likes to share, wants to make themselves and everyone around them smarter.\n2022 is also the 2nd year that I was accepted into the VMware vExpert Cloud Management subprogram.\nI think that 2021 was one of my most productive years and one that I advanced my own personal knowledge the most.\nHighlights of 2021 to get accepted into the vExpert Program: VMworld 2021 session (Presentation): Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] SaltConf21 session (Presentation): Managing Windows with SaltStack Config (6) of my personal Blogs were shared by the VMware “vExpert Cloud Management Community” on the Vmware Blog Web Site. I did several vRealize Automation Presentations at VMware HVC (Healthcare Virtualization Community) Events. PowerBlock Customer Showcase - VM “Right Sizing” I did a IDC interview for VMware on Automation that will be released in 2022. I did a VMware Customer Reference Interview that will be released in 2022. Link to Customer Reference I shared a vRealize Operations “Right Sizing” Dashboard on the code.vmware.com web site. What is the VMware vExpert Program? Program Overview The VMware vExpert program is VMware\u0026rsquo;s global evangelism and advocacy program. The program is designed to put VMware\u0026rsquo;s marketing resources towards your advocacy efforts. Promotion of your articles, exposure at our global events, co-op advertising, traffic analysis, and early access to beta programs and VMware\u0026rsquo;s roadmap. The awards are for individuals, not companies, and last for one year. Employees of both customers and partners can receive the awards. In the application, we consider various community activities from the previous year as well as the current year\u0026rsquo;s (only for 2nd half applications) activities in determining who gets awards. We look to see that not only were you active but are still active in the path you chose to apply for.\nCriteria If you are interested in becoming a vExpert the criteria is simple. We are looking for IT Professionals who are sharing their VMware knowledge and contributing that back to the community. The term \u0026ldquo;giving back\u0026rdquo; is defined as going above and beyond your day job. There are several ways to share your knowledge and engage with the community. Some of those activities are blogging, book authoring, magazine articles, CloudCred task writing, active in Facebook groups, forum (VMTN as well as other non VMware) platforms, public speaking, VMUG leadership, videos and so on.\nThanks: I have worked with a great group of people at VMware, past and present. I would like to thank the following people for all their support in no particular order: Steve Leiberson, Karl Hauck, Cosmin Trif, Brock Peterson, Kevin Holland, Daniel Thomas, Marcus Roberts, Paul Schlosser.\nSpecial Thanks to David Kruse for getting me started with vRA.\nSpecial Thanks to some past co-workers, SEs, TAMs, HVC Members that I learned a lot from: Kirk Shaffer, Robert Mitchell, Dan Grove, Steve Holmes, Steve Pittenger, Anton Wesztergom (Opened my eyes to vRA Day 2).\nList of Bloggers that I follow and have learned a lot by them \u0026ldquo;Giving Back\u0026rdquo;: Cody De Arkland, Luc Dekens, Kyle Ruddy, William Lam, Nathen Bennett, Vince Wood, Alan Renouf.\nSpecial Thanks to the person that gave me my first Job in IT: David Cornelius\nand anyone else that helped me in my journey called my career\u0026hellip;\nI have learned a lot from the vCommunity. I want to use this blog as a way for me to \u0026ldquo;give back\u0026rdquo;. If one person finds anything I post helpful I will consider my efforts successful. I am always open to talking to any person, group or organization about what I do with VMware products. Please reach out to me if you ever want to have a discussion.\nEmail: Dale.Hassinger@vCrocs.info\nLocation: Dillsburg, PA\n\"9 - 5 pays the bills, 5 - 10 advances your career\" ","date":"2022-02-22T00:00:00Z","image":"https://vcrocs.info/vexpert-2022-vexpert-cloud-management/featured-image_hu_eeabb21b10983534.png","permalink":"https://vcrocs.info/vexpert-2022-vexpert-cloud-management/","title":"vExpert 2022 | vExpert Cloud Management"},{"content":"Part 8: Pouring the salt grains\nMy previous posts about grain data were to show how to add minion grain data during the creation of a new server with vRA using PowerShell. This post I want to show how I\u0026rsquo;m going to maintain the grain data that is not default out of the box grain data.\nWindows Server grain data not available out of the of box that I want to add to every minion AND make sure the grain data stays up to date:\nWindows Server Features | Roles Windows Server Installed Software Windows Server Running Services These are the steps that I use to maintain custom grain data with a Windows Server:\nCreate a PowerShell Script that can run locally on a minion. Add the script to the SaltStack Config File Manager. Use salt-call to run salt.functions locally on a minion. See screen shot and my code examples below. Create a SaltStack Config Job to execute the PowerShell Script remotely on the minion. See Screen Shot. Create a SaltStack Config Schedule to run the job that you create. The job can run every day, once a week, every 4 hours. Whatever makes sense for your use case. See Screen Shot. If you want to run a script locally on a minion and use salt functions that is where you use the salt-call command. After you learn the salt-functions and are logged into a Windows Server locally, you can still use salt commands by using salt-call.\n1 2 3 4 5 6 7 8 9 10 11 12 # --- example code salt-call --version salt-call test.ping # --- Show Disk Usage salt-call disk.usage # --- Show Installed Features|Roles salt-call win_servermanager.list_installed # --- Show Installed Sofwtare salt-call pkg.list_pkgs Link to salt-call Documentation\nStep 1 - Add script to SaltStack Config File Manager: See code examples below to add Windows Server Features|Roles, Installed Software, and Runnings Services as grain data.\nStep 3 - Create SaltStack Config Schedule: Code Examples: - Add Windows Features | Roles as grain data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 \u0026lt;# .SYNOPSIS This Script is used to Get Windows Servers Features and add as Grain Data .DESCRIPTION Windows Servers Features .PARAMETER No Parameters .INPUTS No inputs .OUTPUTS salt grain data .NOTES Version: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLE N/A #\u0026gt; # ----- [ Start of Code ] --------------------------------------------------------------------------- # --- Minion Get Windows Server Features Installed # --- Delete existing grains features data $saltCommand = \u0026#39;salt-call grains.delkey sem_Windows_Feature force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand $saltCommand = \u0026#39;salt-call win_servermanager.list_installed --output=json\u0026#39; #$saltCommand # --- Run Salt Command $results =Invoke-Expression -Command $saltCommand #$results $features = $results | ConvertFrom-Json #$features $features = $features.local #$features $features = $features -split(\u0026#34;:\u0026#34;) $features = $features -split(\u0026#34;;\u0026#34;) $features = $features -replace(\u0026#34;@{\u0026#34;,\u0026#34;\u0026#34;) $features = $features -replace(\u0026#34;}\u0026#34;,\u0026#34;\u0026#34;) $features = $features.trim() $features = $features -replace(\u0026#34;=\u0026#34;,\u0026#34; | \u0026#34;) $features = $features | Sort-Object #$features foreach($feature in $features){ # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_Windows_Feature \u0026#34;\u0026#39; + $feature + \u0026#39;\u0026#34;\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand } # End Foreach # --- Delete existing grains last update data $saltCommand = \u0026#39;salt-call grains.delkey sem_last_grains_update force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy | hh:mm\u0026#34;) #$grainsupdateDate # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_last_grains_update \u0026#34;\u0026#39; + $grainsupdateDate + \u0026#39;\u0026#34;\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Grains Sync $saltCommand = \u0026#39;salt-call saltutil.sync_grains\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # ----- [ End of Code ] --------------------------------------------------------------------------- - Add Windows Server Installed Packages|Software as grain data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 \u0026lt;# .SYNOPSIS This Script is used to Get Windows Installed Packages and add as Grain Data .DESCRIPTION Windows Servers Installed Packages .PARAMETER No Parameters .INPUTS No inputs .OUTPUTS salt grain data .NOTES Version: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLE N/A #\u0026gt; # ----- [ Start of Code ] --------------------------------------------------------------------------- # --- Minion Get Windows Server Installed Packages|Software # --- Delete existing grains features data $saltCommand = \u0026#39;salt-call grains.delkey sem_Windows_Installed_Software force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand $saltCommand = \u0026#39;salt-call pkg.list_pkgs --output=json\u0026#39; #$saltCommand # --- Run Salt Command $results =Invoke-Expression -Command $saltCommand #$results $installedPackages = $results | ConvertFrom-Json $installedPackages = $installedPackages.local $installedPackages = $installedPackages -split(\u0026#34;:\u0026#34;) $installedPackages = $installedPackages -split(\u0026#34;;\u0026#34;) $installedPackages = $installedPackages -replace(\u0026#34;@{\u0026#34;,\u0026#34;\u0026#34;) $installedPackages = $installedPackages -replace(\u0026#34;}\u0026#34;,\u0026#34;\u0026#34;) $installedPackages = $installedPackages.trim() $installedPackages = $installedPackages -replace(\u0026#34;=\u0026#34;,\u0026#34; | \u0026#34;) $installedPackages = $installedPackages | Sort-Object #$installedPackages foreach($installedPackage in $installedPackages){ # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_Windows_Installed_Software \u0026#34;\u0026#39; + $installedPackage + \u0026#39;\u0026#34;\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand } # End Foreach # --- Delete existing grains last update data $saltCommand = \u0026#39;salt-call grains.delkey sem_last_grains_update force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy | hh:mm\u0026#34;) #$grainsupdateDate # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_last_grains_update \u0026#34;\u0026#39; + $grainsupdateDate + \u0026#39;\u0026#34;\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Grains Sync $saltCommand = \u0026#39;salt-call saltutil.sync_grains\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # ----- [ End of Code ] --------------------------------------------------------------------------- - Add Windows Running Services as grain data: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 \u0026lt;# .SYNOPSIS This Script is used to Get Windows Servers Running Services and add as Grain Data .DESCRIPTION Windows Servers Running Services .PARAMETER No Parameters .INPUTS No inputs .OUTPUTS salt grain data .NOTES Version: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLE N/A #\u0026gt; # ----- [ Start of Code ] --------------------------------------------------------------------------- # --- Minion Get Windows Server Running Services # --- Delete existing grains running services data $saltCommand = \u0026#39;salt-call grains.delkey sem_Windows_Services_Running force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Get all Running Services $serviceNames = Get-Service | Where-Object {$_.Status -eq \u0026#39;Running\u0026#39;} # --- Create Array $servicesGrains = @() # --- Add Service data to the array foreach($serviceName in $serviceNames){ $grainString = $serviceName.Name + \u0026#39; | \u0026#39; + $serviceName.DisplayName $servicesGrains = $servicesGrains + $grainString } # End Foreach #$servicesGrains # --- Add Windows Running Services as Grain Data foreach($servicesGrain in $servicesGrains){ # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_Windows_Services_Running \u0026#34;\u0026#39; + $servicesGrain + \u0026#39;\u0026#34;\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand } # End Foreach # --- Delete existing grains last update data $saltCommand = \u0026#39;salt-call grains.delkey sem_last_grains_update force=True\u0026#39; #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy | hh:mm\u0026#34;) #$grainsupdateDate # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_last_grains_update \u0026#34;\u0026#39; + $grainsupdateDate + \u0026#39;\u0026#34;\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Grains Sync $saltCommand = \u0026#39;salt-call saltutil.sync_grains\u0026#39; # --- Run Salt Command Invoke-Expression -Command $saltCommand # ----- [ End of Code ] --------------------------------------------------------------------------- SaltStack Config Target using Windows Server Running Service (SQL Server): Lessons Learned: Windows Server Features|Roles make a great way to target minions. Windows Server installed software also makes a great way to target minions. Windows Server Running Services is a good way to target minions. If you add custom grain data when the server is created you also need a way to maintain the grain data so it stays up to date and is current. Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2022-02-12T00:00:00Z","image":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-8/featured-image_hu_58172bdfb729f141.png","permalink":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-8/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 8"},{"content":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 7\nThe more I use VMware vRealize SaltStack Config as a Windows Server Admin the more I see the importance of having grain information added to the minion to be able to target servers many different ways. During a recent discussion it was suggested to have the ability to target Windows Server minions by the Windows server Features|Roles that were installed on the server and by which software was installed on a server. There are built-in salt functions to get Features|Roles and installed software. Here is the code I used to get the information and add to the minion grain file using PowerShell. This will allow you to create targets to:\nminions with specific VMware Tools Versions minion with Web Server Feature|Role enabled etc\u0026hellip; Salt Functions: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 # The POSH-SSH PowerShell module MUST be installed to use this code. # Name of Minion that you want to add grain data $minion = \u0026#39;DBH-210\u0026#39; # ----- [ SSH Connection to SalStack Config Server ] ------------------------------------ Write-Host \u0026#39;Making SSH Connection to SaltStack Config Server...\u0026#39; $Server = \u0026#39;ssc.vCROCS.local\u0026#39; $userName = \u0026#39;root\u0026#39; $Password = \u0026#39;VMware#1\u0026#39; # The next line is how to create the encrypted password $psPassword = ConvertTo-SecureString -String $Password -AsPlainText -Force $creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $psPassword $Params = @{ \u0026#34;ComputerName\u0026#34; = $Server \u0026#34;Credential\u0026#34; = $creds } # End Params # SSH Connection to SaltStack Server $sshSession = Get-SSHSession if($sshSession.SessionId -eq 0){ Write-Host \u0026#39;SSH Connection to SSC Server already completed\u0026#39; } # End If else{ Write-Host \u0026#39;Creating new SSH Connection to SSC Server\u0026#39; New-SSHSession @Params } # End Else # ----- [ Start Adding Grain Data ] --------------------------------------------------------------------------- # ----- [ Minion Get Windows Server Features|Roles Installed ] ------------------------------------ Write-Host \u0026#39;Getting Windows Server Features|Roles Installed...\u0026#39; $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; win_servermanager.list_installed --output=json\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params $results = Invoke-SSHCommand @Params $features = $results.Output $features = $results.Output | ConvertFrom-Json $features = $features.PsObject.Properties.Value $features = $features | ConvertTo-Xml # Append Each Feature|Role information to grains Write-Host \u0026#39;Appending Windows Server Features|Roles Installed to grains...\u0026#39; $grainsKey = \u0026#39;vCROCS_Windows_Feature\u0026#39; foreach($feature in $features.Objects.Object.Property){ $grainsValue = $feature.Name + \u0026#39; | \u0026#39; + $feature.\u0026#39;#text\u0026#39; # Grains Append $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#39; + $grainsKey + \u0026#39; \u0026#34;\u0026#39; + $grainsValue + \u0026#39;\u0026#34;\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params Invoke-SSHCommand @Params } # End Foreach # ----- [ Minion Get Windows Server Installed Software ] ------------------------------------ Write-Host \u0026#39;Getting Windows Server Installed Software...\u0026#39; # Get Installed Software $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; pkg.list_pkgs --output=json\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params $results = Invoke-SSHCommand @Params $installedPackages = $results.Output $installedPackages = $installedPackages | ConvertFrom-Json $installedPackages = $installedPackages.PsObject.Properties.Value $installedPackages = $installedPackages | ConvertTo-Xml $grainsKey = \u0026#39;vCROCS_Windows_Installed_Software\u0026#39; # Append Windows Server Installed Software to grains Write-Host \u0026#39;Appending Windows Server Installed Software to grains...\u0026#39; foreach($installedPackage in $installedPackages.Objects.Object.Property){ $grainsValue = $installedPackage.Name + \u0026#39; | \u0026#39; + $installedPackage.\u0026#39;#text\u0026#39; # Grains Append $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#39; + $grainsKey + \u0026#39; \u0026#34;\u0026#39; + $grainsValue + \u0026#39;\u0026#34;\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params Invoke-SSHCommand @Params } # End Foreach # ----- [ Add a Date that grains last updated ] ---------------------------------------------------------------- $grainsupdateDate = Get-Date $grainsValue = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy\u0026#34;) $grainsKey = \u0026#39;vCROCS_last_grains_update\u0026#39; # Grains Append $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#39; + $grainsKey + \u0026#39; \u0026#34;\u0026#39; + $grainsValue + \u0026#39;\u0026#34;\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params Invoke-SSHCommand @Params # ----- [ End Adding Grain Data ] --------------------------------------------------------------------------- # ----- [ Sync minion Grain Data ] ------------------------------------------------------------------ Write-Host \u0026#39;Syncing Minion Grain Data...\u0026#39; # Sync Grains Data $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; saltutil.sync_grains\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params Invoke-SSHCommand @Params # ----- [ Disconnect from SaltStack Config Server ] ------------------------------------------------------------------ Write-Host \u0026#39;Disconnecting from SaltStack Config Server...\u0026#39; Remove-SSHSession -SessionId 0 # ----- [ End of Code ] --------------------------------------------------------------------------- Example grains file after running script The default location of the grains file is in directory “C:\\salt\\conf\u0026quot;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 vCROCS_Windows_Feature: - FileAndStorage-Services | File and Storage Services - NET-Framework-45-Core | .NET Framework 4.7 - NET-Framework-45-Features | .NET Framework 4.7 Features - NET-Framework-Core | .NET Framework 3.5 (includes .NET 2.0 and 3.0) - NET-Framework-Features | .NET Framework 3.5 Features - NET-WCF-Services45 | WCF Services - NET-WCF-TCP-PortSharing45 | TCP Port Sharing - PowerShell | Windows PowerShell 5.1 - PowerShell-ISE | Windows PowerShell ISE - PowerShellRoot | Windows PowerShell - PowerShell-V2 | Windows PowerShell 2.0 Engine - RSAT | Remote Server Administration Tools - RSAT-Feature-Tools | Feature Administration Tools - RSAT-SNMP | SNMP Tools - SNMP-Service | SNMP Service - SNMP-WMI-Provider | SNMP WMI Provider - Storage-Services | Storage Services - System-DataArchiver | System Data Archiver - Telnet-Client | Telnet Client - WoW64-Support | WoW64 Support - XPS-Viewer | XPS Viewer vCROCS_Windows_Installed_Software: - Microsoft Silverlight | 5.1.50918.0 - Microsoft Visual C++ 2013 Redistributable (x64) - 12.0.40664 | 12.0.40664.0 - Microsoft Visual C++ 2013 x64 Additional Runtime - 12.0.40664 | 12.0.40664 - Microsoft Visual C++ 2013 x64 Minimum Runtime - 12.0.40664 | 12.0.40664 - Microsoft Visual C++ 2015-2022 Redistributable (x64) - 14.30.30704 | 14.30.30704.0 - Microsoft Visual C++ 2015-2022 Redistributable (x86) - 14.30.30704 | 14.30.30704.0 - Microsoft Visual C++ 2022 X64 Additional Runtime - 14.30.30704 | 14.30.30704 - Microsoft Visual C++ 2022 X64 Minimum Runtime - 14.30.30704 | 14.30.30704 - Microsoft Visual C++ 2022 X86 Additional Runtime - 14.30.30704 | 14.30.30704 - Microsoft Visual C++ 2022 X86 Minimum Runtime - 14.30.30704 | 14.30.30704 - Salt Minion 3003.1 (Python 3) | 3003.1 - UniversalForwarder | 8.2.4.0 - VMware Tools | 11.3.5.18557794 vCROCS_last_grains_update: - 01/14/2022 SaltStack Target using Windows Server Software Installed: Show all minions that have VMware Tools | 11.3.5.18557794 installed\nLessons Learned: Windows Server Features|Roles make a great way to target minions. Windows Server installed software also makes a great way to target minions. Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2022-01-14T00:00:00Z","image":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-7/featured-image_hu_58172bdfb729f141.png","permalink":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-7/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 7"},{"content":"Get-Review 2021\n2021 was a good year for me with my career. I spent the entire year working from home and I find myself to be more productive when WFH. My wife and I moved into a different home and I now have a dedicated office area on the 2nd floor away from everyone. I still share my office with Belle (Rescue Dog adopted in 2020 before covid) everyday and she loves the fenced in back yard that she can run around in without a leash.\nIn 2021, I started living the \u0026ldquo;Salt Life\u0026rdquo;. In July, I installed SaltStack Config for the first time and started taking a serious look at Salt. I went from zero to doing a presentation about SaltStack at VMworld 2021 in October and another presentation at SaltConf21 in November. Having a session selected for VMworld 2021 was a career \u0026ldquo;Bucket List\u0026rdquo; for me.\nAfter creating a vRealize Operations Dashboard on \u0026ldquo;Right Sizing\u0026rdquo; that I use in production, my vRealize Account Executive setup a meeting for me to meet Iwan \u0026rsquo;e1\u0026rsquo; Rahabok, who is the co-creator of the book \u0026ldquo;Operationalize Your World\u0026rdquo;. Iwan liked the Dashboard I created and included some details about the Dashboard in his book \u0026ldquo;Operationalize Your World\u0026rdquo;.\nI always say if one person finds anything I post helpful, I will consider my efforts successful. In 2021, between the presentations and blogs posts, I feel I have given back and helped some people. I shared the knowledge. 2021 was a successful year for me.\nHighlights of 2021 VMworld 2021 session (Presentation): Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] SaltConf21 session (Presentation): Managing Windows with SaltStack Config (6) of my personal Blogs were shared by the VMware \u0026ldquo;vExpert Cloud Management Community\u0026rdquo; on the Vmware Blog Web Site. I did several vRealize Automation Presentations at VMware HVC (Healthcare Virtualization Community) Events. PowerBlock Customer Showcase - VM \u0026ldquo;Right Sizing\u0026rdquo; I did a IDC interview for VMware on Automation that will be released in 2022. I did a VMware Customer Reference Interview that will be released in 2022. Link to Customer Reference I shared a vRealize Operations \u0026ldquo;Right Sizing\u0026rdquo; Dashboard on the code.vmware.com web site. My Top 10 Blog Posts of 2021 How to use PowerShell modules with vRA 8.2 | 978 How vRealize Operations can help with \u0026ldquo;Right sizing\u0026rdquo; VMs | 799 vRA 8.1 ABX PS | 508 Automating Automation | 415 VMware vRealize SaltStack Config as a Windows Server Admin part 1 | 333 VMware vRealize SaltStack Config as a Windows Server Admin part 2 | 280 vRealize automation 8.1 PowerShell abx | 216 VMware vRealize SaltStack Config as a Windows Server Admin part 4 | 195 VMware vRealize SaltStack Config as a Windows Server Admin part 6 | 164 VMworld 2021 SaltStack Config session | 147 What the top 10 list shows me is there is a lot of interest to use PowerShell with the vRealize Products, VMware admins are interested in Right Sizing and since VMware Purchased SaltStack people what to get started with the product.\n*Stats from Google Analytics.\nSet-Goals 2022 I do a lot of posts on PowerShell and I use it everyday. I want to take some time in 2022 and learn Python. I have done a little bit of Python but not enough to call myself a Python Programmer. I think there are some use cases with vRealize Automation and SaltStack Config that knowing Python may help. I want to spend more time with Salt. Salt is a powerful tool and I want to expand my knowledge with Salt. Get a session approved for VMworld 2022 and SaltConf22. Do more VMware PowerBlock Presentations. Create more Blog Posts. Never Stop Learning\u0026hellip; Thanks for visiting in 2021! If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2022-01-01T00:00:00Z","image":"https://vcrocs.info/year-in-review-2021-2022-goals/featured-image_hu_980df0c387fc13fb.png","permalink":"https://vcrocs.info/year-in-review-2021-2022-goals/","title":"Year in Review - 2021 | 2022 Goals"},{"content":"How to work with NSX-T security Tags using PowerShell\nPowerShell Code to work with NSX-T APIs Included some examples of code to Automate adding/removing NSX-T Security Tags from VMs. Also some code to show which VMs are assigned to a Security TAG or which TAGs are assigned to a VM.\nCode Samples:\nAdd NSX-T Security TAG to a VM. Remove NSX-T Security TAG from a VM. Show All VMs assigned to a NSX-T Security TAG Show All Security TAGs assigned to a VM Hope you find these snippets of code useful.\nClick to expand code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 # Connect to vCenter $vCenterName = \u0026#39;vCenter.vCrocs.info\u0026#39; Connect-VIServer $vCenterName -Credential $cred Disconnect-VIServer * -Force -Confirm:$false Start NSX-T # ----- [ Start Add a Single NSX-T TAG to VM ] -------------------------------------------------- # Add code to allow untrusted SSL certs # Use when connecting to NSX-T Server and running from a Windows Computer Add-Type @\u0026#34; using System; using System.Net; using System.Net.Security; using System.Security.Cryptography.X509Certificates; public class ServerCertificateValidationCallback { public static void Ignore() { ServicePointManager.ServerCertificateValidationCallback += delegate ( Object obj, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors ) { return true; }; } } \u0026#34;@ [ServerCertificateValidationCallback]::Ignore(); # ----- [ This section connects you to vCenter ] ------------------------------------------------------------------ $vCenterName = \u0026#39;vCenter.vCROCS.info\u0026#39; Connect-VIServer $vCenterName -Credential $cred # Connect to vCenter and fetch virtual machine info. $vmInfo = Get-VM -Name DBH-213 | Get-View # ----- [ This section defines the API header ] ------------------------------------------------------------------ # Set Username/Password info for API $user = \u0026#39;srv_vRA_NSXT@vCROCS.info\u0026#39; $nsxpassword = \u0026#39;VMware!1\u0026#39; $pair = \u0026#34;$($user):$($nsxpassword)\u0026#34; $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($Pair)) $headers = @{ Authorization = \u0026#34;Basic $encodedCredentials\u0026#34; } $vmid = $vm.Config.InstanceUuid $newtag = \u0026#39;UST.SM.UBUNTU_SERVER\u0026#39; $JSON = @\u0026#34; { \u0026#34;external_id\u0026#34;: \u0026#34;$vmid\u0026#34;, \u0026#34;tags\u0026#34;: [ {\u0026#34;scope\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;$newtag\u0026#34;} ] } \u0026#34;@ $posturl = \u0026#34;https://$nsxmanager/api/v1/fabric/virtual-machines?action=add_tags\u0026#34; Invoke-RestMethod -Uri $posturl -Headers $headers -Method Post -Body $JSON -ContentType \u0026#34;application/json\u0026#34; # ----- [ End Add a Single TAG ] -------------------------------------------------- # ----- [ Start Get NSX-T TAGs assigned to VM ] -------------------------------------------------- $vmid = $vm.Config.InstanceUuid $geturl = \u0026#34;https://$nsxmanager/api/v1/fabric/virtual-machines?external_id=$vmid\u0026amp;included_fields=tags\u0026#34; $getrequest = Invoke-RestMethod -Uri $geturl -Headers $headers -Method Get -ContentType \u0026#34;application/json\u0026#34; $currenttags = $getrequest.results.tags.Tag $currenttags # ----- [ End Get NSX-T TAGs assigned to VM ] -------------------------------------------------- # ----- [ Start remove NSX-T TAG from VM ] -------------------------------------------------- $vmid = $vm.Config.InstanceUuid $newtag = \u0026#39;UST.SM.UBUNTU_SERVER\u0026#39; $JSON = @\u0026#34; { \u0026#34;external_id\u0026#34;: \u0026#34;$vmid\u0026#34;, \u0026#34;tags\u0026#34;: [ {\u0026#34;scope\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;$newtag\u0026#34;} ] } \u0026#34;@ $posturl = \u0026#34;https://$nsxmanager/api/v1/fabric/virtual-machines?action=remove_tags\u0026#34; Invoke-RestMethod -Uri $posturl -Headers $headers -Method Post -Body $JSON -ContentType \u0026#34;application/json\u0026#34; # ----- [ End remove NSX-T TAG from VM ] -------------------------------------------------- # ----- [ Start Get VMs assigned to a TAG NSX-T ] -------------------------------------------------- $geturl = \u0026#34;https://$nsxmanager/policy/api/v1/infra/tags/effective-resources?scope=\u0026amp;tag=UST.SM.UBUNTU_SERVER\u0026#34; $result = Invoke-RestMethod -Uri $geturl -Headers $headers -Method Get -Body $JSON -ContentType \u0026#34;application/json\u0026#34; Write-Host $result.results.target_display_name # ----- [ End Get VMs assigned to a TAG NSX-T ] -------------------------------------------------- Lessons Learned: Very easy to automate NSX-T Security TAG processes after you learn the urls. NSX-T API documentation is easily accessed and well documented. Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-12-31T00:00:00Z","image":"https://vcrocs.info/nsx-t-security-tags-and-powershell/featured-image_hu_bc81da4a3d95680e.png","permalink":"https://vcrocs.info/nsx-t-security-tags-and-powershell/","title":"NSX-T security Tags and PowerShell"},{"content":"Part 6: How to use SaltStack Config with Windows Server and PowerShell\nThe latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin is going to be a lot PowerShell. I use PowerShell for a lot of Automation, Windows Server and Linux Server. When working with VMware vRealize SaltStack Config I constantly found myself going to the CLI to test and learn how the salt functions work. In the Part 5 Blog of this series I showed how I am using the PowerShell module POSH-SSH to connect to the VMware vRealize SaltStack Config Server to run salt commands remotely. So I started writing some PowerShell functions to run remote salt commands on the Salt Master. The end goal might be to turn this script into a Salt PowerShell Module. To start it will only have the functions that I find myself using the most. I could turn this into a community Github Project and see if there would be any interest. If anyone reading this blog post has any interest please reach out to me. (Dale.Hassinger@vCROCS.info)\nMy goal is to make all these PowerShell Salt functions work with VMware vRealize SaltStack Config like PowerCLI works with VMware vCenter. Use same verb/noun terminology. I use PowerCLI for all my VMware Automation. Works awesome! So to create these PowerShell Functions to work with my existing automation scripts is a win win in my book.\nNormally I will use a Products APIs to do all these types of processes. I looked at VMware vRealize SaltStack Config APIs and to the best of my knowledge I can not use them like I can the PS functions that I created. That may change in a future release of VMware vRealize SaltStack Config. Fingers crossed.\nSalt PowerShell Functions: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 # ----- [ Start of Functions ] -------------------------------------------------------------------------------------------------------------- # The POSH-SSH PS module MUST be installed to use these functions. # Function to Connect to SSC Server function Connect-SSCServer { param( [parameter(mandatory = $true)] [string]$Server, [parameter(mandatory = $true)] [string]$userName, [parameter(mandatory = $true)] [string]$Password ) # End Parameters # The next line is how to create the encrypted password $psPassword = ConvertTo-SecureString -String $global:HashiPW -AsPlainText -Force $creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $psPassword $Params = @{ \u0026#34;ComputerName\u0026#34; = $Server \u0026#34;Credential\u0026#34; = $creds } # End Params # SSH Connection to SaltStack Server New-SSHSession @Params } # End Function # Function to Disconnect from SSC Server function Disconnect-SSCServer { Remove-SSHSession -SessionId 0 } # End Function # Sync Minion grains function invoke-SSC.sync.grains { param( [parameter(mandatory = $true)] [string]$minion ) # Sync Grains after adding new grain information $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; saltutil.sync_grains --output=json\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params $results = Invoke-SSHCommand @Params return $results.Output } # End Function # Minion Grain Append function set-SSC.grains.append { param( [parameter(mandatory = $true)] [string]$minion, [parameter(mandatory = $true)] [string]$grainkey, [parameter(mandatory = $true)] [string]$grainval ) # End Parameters # Grains Append $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#34;\u0026#39; + $grainkey + \u0026#39;\u0026#34; \u0026#34;\u0026#39; + $grainval + \u0026#39;\u0026#34;\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params $results = Invoke-SSHCommand @Params } # End Function # Minion Grain DelKey function set-SSC.grains.delkey { param( [parameter(mandatory = $true)] [string]$minion, [parameter(mandatory = $true)] [string]$grainkey ) # End Parameters $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.delkey \u0026#34;\u0026#39; + $grainkey + \u0026#39;\u0026#34; force=True\u0026#39; #$sshCommand $Params = @{ \u0026#34;SessionId\u0026#34; = 0 \u0026#34;Command\u0026#34; = $sshCommand } # End Params $results = Invoke-SSHCommand @Params } # End Function # Minion Test Ping function invoke-SSC.test.ping { param( [parameter(mandatory = $true)] [string]$minion ) # End Parameters $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; test.ping --output=json\u0026#39; #$sshCommand $results = Invoke-SSHCommand -SessionId 0 -Command $sshCommand return $results.Output[1].Trim() } # End Function # ----- [ End of Functions ] -------------------------------------------------------------------------------------------------------------- Examples to show how to use the Salt PowerShell Functions above: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 # ----- [ Connect to SSC Server ] -------------------------------------------------- # DO NOT use plain text PW\u0026#39;s in your Code. I am only showing PW to make it easier to understand the code. # Set Parameter Values $Server = \u0026#39;SaltMaster.vCROCS.local\u0026#39; $User = \u0026#39;root\u0026#39; $Password = \u0026#39;VMware1!\u0026#39; # Define Parameters (Splatting) $Params = @{ \u0026#34;Server\u0026#34; = $Server \u0026#34;User\u0026#34; = $User \u0026#34;Password\u0026#34; = $Password } # Connect to SSC Connect-SSCServer @Params # ----- [ Disconnect to SSC Server ] ----------------------------------------------- Disconnect-SSCServer # ----- [ Sync Minion grains ] ------------------------------------------------------- # Set Parameter Values $minion = \u0026#39;DBH-211\u0026#39; # Define Parameters (Splatting) $Params = @{ \u0026#34;minion\u0026#34; = $minion } # Run Function invoke-SSC.sync.grains @Params # ----- [ Minion grain append ] ---------------------------------------------------- # Set Parameter Values $minion = \u0026#39;DBH-211\u0026#39; $grainkey = \u0026#39;PS_Module\u0026#39; $grainval = \u0026#39;Works great for Windows Server\u0026#39; # Define Parameters (Splatting) $Params = @{ \u0026#34;minion\u0026#34; = $minion \u0026#34;grainkey\u0026#34; = $grainkey \u0026#34;grainval\u0026#34; = $grainval } # Run Function set-SSC.grains.append @Params # Define Parameters (Splatting) $Params = @{ \u0026#34;minion\u0026#34; = $minion } # Run Function invoke-SSC.sync.grains @Params # ----- [ Minion grain DelKey ] ---------------------------------------------------- # Set Parameter Values $minion = \u0026#39;DBH-211\u0026#39; $grainkey = \u0026#39;PS_Module\u0026#39; # Define Parameters (Splatting) $Params = @{ minion = $minion grainkey = $grainkey } # Run Function set-SSC.grains.delkey @Params # Define Parameters (Splatting) $Params = @{ \u0026#34;minion\u0026#34; = $minion } # Run Function invoke-SSC.sync.grains @Params # ----- [ Minion test.ping ] ---------------------------------------------------- # Set Paramter Values $minion = \u0026#39;DBH-211\u0026#39; # Define Parameters (Splatting) $Params = @{ \u0026#34;minion\u0026#34; = $minion } # Run Function invoke-SSC.test.ping @Params Lessons Learned: Adding the POSH-SSH PowerShell module so you can create a SSH connection to the salt master opens up a lot of possibilities for your PowerShell Automation as a Windows Server Admin. Using the PowerShell Functions above as a Windows admin makes it very easy to add this code to existing scripts and use the Power of SaltStack without completely changing your processes. Creating a SSH Connection to a remote Salt Master and running commands works well in a \u0026ldquo;Zero Trust\u0026rdquo; environment. With NSX-T all you need to do is setup allow rules between the minions and the master on ports 4505,4506. Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-10-09T00:00:00Z","image":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-6/featured-image_hu_58172bdfb729f141.png","permalink":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-6/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 6"},{"content":"SaltConf 2021 | SaltStack Config Session\nI will be doing a SaltConf presentation for the first time at SaltConf 2021. I attended SaltConf 2020 for the first time after VMware purchased SaltStack Config. This past year I have spent a lot of time reviewing SaltStack Config as a Windows Server Admin and I am excited to share what I have learned, to hopefully help some Windows Server Admins get started.\nI wanted to learn one of the configuration Management products for a couple of years and after VMware purchased SaltStack Config, the decision became obvious to me which one I should learn since I live in VMware vRealize Products all day, every day.\nSo register today for SaltConf 2021 and attend my session.\n- Link to SaltConf21 - Session Details: Date: November 4th. Time: 10:00 am - 10:50 am Details: Track 1 - Managing Windows with SaltStack Config Presenters: Vincent Riccio and Dale Hassinger - Link to SaltConf21 Agenda - In our Presentation we will show you how to use SaltStack Config to manage Microsoft Windows Servers. How to use Salt to install software, work with Windows Services, make Registry changes, configuration management, how to quickly respond to Zero-Day Security patching, how to add vCenter TAGs/NSX-T TAGS/ Active Directory OUs as minion grain information, how to target minions, minion beacons, salt reactors and other normal day to day Windows Server administration.\nLink to watch SaltConf21 Presentation If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-10-02T00:00:00Z","image":"https://vcrocs.info/saltconf-2021-saltstack-config-session/featured-image_hu_dba29be0893388b1.png","permalink":"https://vcrocs.info/saltconf-2021-saltstack-config-session/","title":"SaltConf 2021 | SaltStack Config Session"},{"content":"Part 5: How to use SaltStack Config with Windows Server and PowerShell\nThe latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin will be an update to some items that I have talked about in previous posts. I have been spending more time with VMware vRealize SaltStack Config and I have learned some better ways to do some of the processes that I have talked about already. My goal to to learn and use the built-in functions that are already in the product. I found that using the salt functions require less coding and better logging.\nFirst example of changing how I am going to use VMware vRealize SaltStack Config. When I first started looking at grains I thought I would edit the grains file with PowerShell and add the grains content to the file. What I did worked but I think I learned a better way. There is a function grains.append that will append grains data to the grains file on the minion. This works much better and when I run a job to add grains information it is listed in Activity Completed within VMware vRealize SaltStack Config. I like to be able to see when changes are made by the jobs that are run.\nThe code that I have listed below to get vCenter TAGs assigned to a VM and add the information to the minion is using PowerShell. To use this script you MUST install the PowerShell Module POSH-SSH. The process I am showing connects to a vCenter, creates a SSH Connection to the Salt Server, gets all assigned vCenter TAGs for a VM, , runs salt commands to add grain information to the grains file of a minion, and then runs a minion grains sync. This concept can be used for a lot of different systems. If you want to add NSX-T Security TAGs as grain information (Thanks Karl Hauck for this idea), AD (Active Directory) OU of the Windows Server, or anything you think would be useful to Target minions within VMware vRealize SaltStack Config.\nI really like the idea of using POSH-SSH to make the SSH connection to the Salt Master Server and running commands. I do a lot of Automation within vRA (vRealize Automation) with PowerShell and I can use this same concept to use VMware vRealize SaltStack Config to complete the processes that need run. I can also create Catalog items within vRA that you can make available to APP Teams to use. The Catalog item could be running salt jobs in VMware vRealize SaltStack Config. Cool Stuff!\nGrains File: This is what I learned about salt grains when using with a Windows OS.\nThe default location of the grains file is in directory \u0026ldquo;C:\\salt\\conf\u0026quot;. The grains file is named grains with no extension. Example grains file: 1 2 3 4 5 6 NSXSecurityTAGs: - vCROCS.Apps.VMware.SaltStack.Minion vCenterTAGs: - TAG-VM-WebServer - TAG-VM-vCROCS - TAG-App-Hugo \u0026ldquo;Grain Name\u0026rdquo;: \u0026ldquo;The value of the grain\u0026rdquo;. In my example I wanted the grain to be named \u0026ldquo;vCenterTags\u0026rdquo; and the values will be the vCenter TAG names \u0026ldquo;TAG-VM-vCROCS, TAG-VM-WebServer, TAG-App-Hugo\u0026rdquo;. I have (3) vCenter TAGs assigned to this VM. I will be able to create a SaltStack Config Target based on any of the TAGs. I like the formatting that is used for the grains file by using the function grains.append. SaltStack Config Targets: When I add the vCenter TAG information to the grains file I am then able to create SaltStack Config Targets based on the grain \u0026ldquo;vCenterTags\u0026rdquo;.\nSaltStack Config Targets: SaltStack Config Target Definition: How to add the vCenter TAGs to the grains file on all your VMs in SaltStack Config:\nGet the VM Names and All Assigned vCenter TAGs\nPowerShell Script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # ----- [ SSH SaltStack Config Server - Add vCenter TAGs to Minion Grains ] -------------------------- # Connect to vCenter before running this code # Define your Credentials # SSH to SaltStack Server - MUST HAVE POSH-SSH PowerShell Module Installed New-SSHSession -ComputerName \u0026#39;SaltServer.vCROCS.info\u0026#39; # Test SSH Connection $CheckSSHConnection = Get-SSHSession -SessionId 0 $CheckSSHConnection.Connected $vmNames = Get-VM -Name vCROCS-VM-* $vmNames = $vmNames | Sort-Object Name foreach($vmName in $VMNames){ $vmName.Name #Get VM Tag(s) $VMTags = Get-TagAssignment -Entity $vmName.Name $VMTags.Tag.Name foreach($vmTAG in $VMTags.Tag.Name){ $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $vmName.Name + \u0026#39;\u0026#34; grains.append vCenterTAGs \u0026#34;\u0026#39; + $vmTAG + \u0026#39;\u0026#34;\u0026#39; $results = Invoke-SSHCommand -SessionId 0 -Command $sshCommand } # End Foreach # Sync Grains after adding new grain information $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $vmName.Name + \u0026#39;\u0026#34; saltutil.sync_grains\u0026#39; $results = Invoke-SSHCommand -SessionId 0 -Command $sshCommand } # End Foreach # ----- [ Terminate SSH Session ] ----------------------------- Remove-SSHSession -SessionId 0 Lessons Learned: Adding the POSH-SSH PowerShell module so you can create a SSH connection to the salt master opens up a lot of possibilities for your PowerShell Automation as a Windows Server Admin. Grains are a good way to create SaltStack Config Targets. Allows you to group VMs together the same way you can in vCenter. The Grains file is basically a Database that can be any information that you want to show about your VMs. In this Blog post I am adding vCenter TAGs to the minions but the information could be anything that helps you target VMs. If the default list of grains OOTB doesn\u0026rsquo;t show the information you want to see, you can easily add your own gains with a little bit of code. Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-10-01T00:00:00Z","image":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-5/featured-image_hu_58172bdfb729f141.png","permalink":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-5/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 5"},{"content":"Part 4: How to use SaltStack Config with Windows Server and PowerShell\nThe latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin will be salt grains. I have a specific use case that made me start looking at grains. In VMware vCenter I use vCenter TAGs to organize VMs. I also use vCenter TAGs to organize VMs in vRealize Operations. I want to use the same logic of using vCenter TAGs in SaltStack Config. SaltStack Config does not use vCenter TAGs OOTB (Out of the Box) for VMs.\nAt the end of this Blog Post I also have an SaltStack Config Orchestration example. Instead of running multiple Jobs one at a time I have (4) steps in a SLS file that I run using a salt-run job and the function state.orchestrate.\nGrains File: This is what I learned about salt grains when using with a Windows OS.\nThe default location of the grains file is in directory \u0026ldquo;C:\\salt\\conf\u0026quot;. The grains file is named grains with no extension. Example grains file: 1 vCenterTags: TAG-VM-vCROCS|TAG-VM-WebServer|TAG-App-Hugo \u0026ldquo;Grain Name\u0026rdquo;: \u0026ldquo;The value of the grain\u0026rdquo;. In my example I wanted the grain to be named \u0026ldquo;vCenterTags\u0026rdquo; and the values will be the vCenter TAG names \u0026ldquo;TAG-VM-vCROCS|TAG-VM-WebServer|TAG-App-Hugo\u0026rdquo;. I have (3) vCenter TAGs assigned to this VM. I will be able to create a SaltStack Config Target based on any of the TAGs. SaltStack Config Targets: When I add the vCenter TAG information to the grains file I am then able to create SaltStack Config Targets based on the grain \u0026ldquo;vCenterTags\u0026rdquo;.\nSaltStack Config Targets: SaltStack Config Target Definition: How to add the vCenter TAGs to the grains file on all your VMs in SaltStack Config: Step 1: Get the VM Names and All Assigned vCenter TAGs into a csv file Example PowerShell Code to get all vCenter VM Names and all vCenter TAGs assigned to the VMs\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # ----- [ Start Create CSV File with all VMs/TAGs Assigned ] ---------------------------- # I did not include code to connect to the vCenter. There are many ways to do this step. # Make sure you are connected to the vCenter BEFORE running this code. $allvmstaginfoFile = \u0026#34;C:\\Salt\\allvmstaginfo.csv\u0026#34; # Create Array $allVMsTagInfo = @(\u0026#34;\u0026#34;) # Add Headers to Array $VMTagInfo = \u0026#39;VM,TAGs\u0026#39; $allVMsTagInfo += $VMTagInfo # Get All VMs in you vCenter $vmNames = Get-VM $vmNames = $vmNames | Sort-Object Name foreach($vmName in $VMNames){ # Get VM Tag(s) $VMTags = Get-TagAssignment -Entity $vmName.Name # If more than (1) TAG I will join them as a string with a \u0026#39;|\u0026#39; separating the values. $VMtags = $VMTags.Tag.Name -join \u0026#39;|\u0026#39; # Create a string with the VMname and all the vCenter TAGs assigned separated by a comma $VMTagInfo = $vmName.Name + \u0026#39;,\u0026#39; + $VMTags # Add Info to array $allVMsTagInfo += $VMTagInfo } # End Foreach # Delete existing all VMs Tag csv File Remove-Item -Path $allvmstaginfoFile # Create new all VMs Tag csv File New-Item $allvmstaginfoFile -ItemType File # Add array Data to CSV file $allVMsTagInfo | Select-Object -Skip 1 | Set-Content $allvmstaginfoFile # ----- [ End Create CSV File with all VMs/TAGs Assigned ] ---------------------------- Step 2: Copy the csv file to the salt master After I create the csv file I copy to the StackStack Config Server (Salt Master) in the folder /var/srv/salt. This is where all files need to be saved when you use function cp.get_file.\nStep 3: Copy the csv file to the salt minions You may be wondering why I copy the file to the minion and not copy to a central share. My environment has NSX-T with zero trust. Most of my automation I do not open ports to servers that are not needed permanently. So the concept of using salt to copy files to minions, use the files to make changes and then delete the files when processes are complete works well in a zero trust environment.\nJob to copy csv file to minions: Step 4: Run Script on minion After I copy the csv file to the minion I run a script to create/update the grains files.\nJob to run a PowerShell Script to create/update the grains file: Example PowerShell Code to create/update grains file on a minion:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # ----- [ Start Create Grain File with TAGs Assigned ] ---------------------------- $allvmstaginfoFile = \u0026#34;C:\\vCROCS\\allvmstaginfo.csv\u0026#34; $grainTagInfo = Import-Csv $allvmstaginfoFile $vmName = hostname $grainsFile = \u0026#34;C:\\salt\\conf\\grains\u0026#34; if (Test-Path $grainsFile) { # Remove existing vCenter Tags $grainsContent = Get-Content $grainsFile $grainsContent = $grainsContent | Where-Object {$_ -notmatch \u0026#34;vCenterTags:\u0026#34;} # If Only grain is vCenter Tags then Delete the grains file and re-create if(!$grainsContent){ Remove-Item -Path $grainsFile New-Item $grainsFile -ItemType File } # End If else{ $grainsContent | Set-Content $grainsFile -Force } # End Else #Get VM Tag(s) $grainfileinfo = $grainTagInfo | Where-Object {$_.VM -eq $vmName} $VMTagInfo = \u0026#39;vCenterTags: \u0026#39; + $grainfileinfo.TAGs Add-Content $grainsFile $VMTagInfo -Force } # End If else{ # Create grains file New-Item $grainsFile -ItemType File #Get VM Tag(s) $grainfileinfo = $grainTagInfo | Where-Object {$_.VM -eq $vmName} # Define Tags String $VMTagInfo = \u0026#39;vCenterTags: \u0026#39; + $grainfileinfo.TAGs # Add Tags to grains file Add-Content $grainsFile $VMTagInfo -Force } # End else # ----- [ End Create Grain File with TAGs Assigned ] ---------------------------- Step 5: Run job to do a sync_grains Anytime you make any changes to the grains file you should run the function saltutil.sync_grains to update the SaltStack Config Server immediately.\nJob to run sync of the minion grains information: SaltStack Config Orchestration: Job to Orchestrate all the steps: Copy file to minion. Run script to create/update grains file Run a sync_grains. Delete the files from the minions when processes are complete. Example Orchestration SLS file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 copy_tags: salt.function: - name: cp.get_file - tgt: \u0026#39;os:Windows\u0026#39; - tgt_type: grain - arg: - \u0026#39;salt://allvmstaginfo.csv\u0026#39; - \u0026#39;C:\\vCROCS\\allvmstaginfo.csv\u0026#39; create_grain_file: salt.function: - name: cmd.script - tgt: \u0026#39;os:Windows\u0026#39; - tgt_type: grain - arg: - source=\u0026#34;salt://SEM/grains-vCenter-tags.ps1\u0026#34; - shell=powershell grain_sync: salt.function: - name: saltutil.sync_grains - tgt: \u0026#39;os:Windows\u0026#39; - tgt_type: grain Cleanup_Tag_File: salt.function: - name: file.remove - tgt: \u0026#39;os:Windows\u0026#39; - tgt_type: grain - arg: - \u0026#39;C:\\vCROCS\\allvmstaginfo.csv\u0026#39; Salt-Run Job to Orchestrate Copy File/Run Script/Run Sync/Delete File: Lessons Learned: Grains are a good way to create SaltStack Config Targets. Allows you to group VMs together the same way you can in vCenter. The Grains file is basically a Database that can be any information that you want to show about your VMs. In this Blog post I am adding vCenter TAGs to the minions but the information could be anything that helps you target VMs. If the default list of grains OOTB doesn\u0026rsquo;t show the information you want to see, you can easily add your own gains with a little bit of code. Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-09-05T00:00:00Z","image":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-4/featured-image_hu_58172bdfb729f141.png","permalink":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-4/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 4"},{"content":"Part 3: How to use SaltStack Config with Windows Server and PowerShell\nThe next steps on my journey with VMware vRealize SaltStack Config as a Windows Server Admin will be beacons and reactors. Working with Jobs helped me understand how to make changes Ad-Hoc. I have a Job to quickly stop the Print Spooler but what if I always want the state of the Print Spooler Service to be stopped. How do I NOT allow a Server Admin to login into the server and manually start the service?\nThis is where beacons and reactors work with minion configurations that you want to make permanent. This is the configuration Management Part of Salt Stack. To always make sure a Windows Service is stopped I created a beacon.conf file. On a Windows Server the Beacon.conf needs to be in the \u0026lsquo;C:\\salt\\conf\\minion.d' folder. Anytime a beacon.conf file is added to a minion or modified the salt-minion service needs restarted. I have a salt Job to restart the salt-minion service.\nBeacons: Beacon File: Sends events to the event bus on the salt master from a minion This beacon.conf example is for service state changes. The Beacon sends an event to the salt master if a Windows Service is started/stopped.\n1 2 3 4 5 beacons: service: - services: Spooler: onchangeonly: true This is what the event will look like in the events if you are monitoring.\n1 2 3 4 5 6 7 8 salt/beacon/DBH-211/service/Spooler { \u0026#34;Spooler\u0026#34;: { \u0026#34;running\u0026#34;: true }, \u0026#34;_stamp\u0026#34;: \u0026#34;2021-08-06T11:53:57.212810\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;DBH-211\u0026#34;, \u0026#34;service_name\u0026#34;: \u0026#34;Spooler\u0026#34; } Reactors: Reactor File: Monitors the event bus for events specified. IE: salt/beacon/*/service/Spooler 1 2 3 4 5 reactor: - \u0026#39;salt/auth\u0026#39;: # React to a new minion - salt://reactor/accept-key.sls # Run this state to auto accept new minion - \u0026#39;salt/beacon/*/service/Spooler\u0026#39;: # React to Spooler Service Change - salt://vCROCS/spooler_auto_stop.sls # Run this state How the beacons and reactors work together: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # What this line is doing in the reactor is watching for an beacon event from any minion # The * means all minions. You could specify a minion name. # Looking for service events. # The service event that is specified is the Spooler event. - \u0026#39;salt/beacon/*/service/Spooler\u0026#39; # This is the event sent from the beacon to the event bus salt/beacon/DBH-211/service/Spooler # What the reactor is looking for and what the beacon sent matches. # The state specified in the reactor will now run # This is the state specified in my example - salt://vCROCS/spooler_auto_stop.sls State File: State File: Stops the Spooler Service if it was started 1 2 3 4 5 6 7 {% if data[\u0026#39;Spooler\u0026#39;][\u0026#39;running\u0026#39;] == true %} stop_service: local.service.stop: - tgt: {{ data[\u0026#39;id\u0026#39;] }} - arg: - Spooler {% endif %} State File: Starts the Spooler Service if it was stopped 1 2 3 4 5 6 7 {% if data[\u0026#39;Spooler\u0026#39;][\u0026#39;running\u0026#39;] == False %} start_service: local.service.start: - tgt: {{ data[\u0026#39;id\u0026#39;] }} - arg: - Spooler {% endif %} Beacons: To copy the beacon file to the minions I created a Job that I can manually run.\nJob to copy a file to a minion: After the beacon file is copied to the minion you MUST restart the minion service.\nJob to restart minion service: Lessons Learned: Beacons are a good way to make sure the configuration you want is not altered. Beacons can monitor more than just services that I am showing in this blog post. I will cover more use cases in future blog posts. Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-08-27T00:00:00Z","image":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-3/featured-image_hu_58172bdfb729f141.png","permalink":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-3/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 3"},{"content":"Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895]\nI will be doing a VMworld presentation for the first time at VMworld 2021. I have attended VMworld since 2012 and it has been a goal of mine to do a presentation at a VMworld since the first year I attended. There are always so many good sessions to attend. We are putting many hours into this presentation so that the people attending feel it was worth their time and learn a lot about the topic. We have a awesome topic and some great presentations to show.\nSo register today for VMworld 2021 and attend my session.\nSession Name: Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895]\nDescription: This session will include an overview of vRealize SaltStack Config and see how a customer in the healthcare vertical is managing their fleet of Windows systems using vRealize Automation SaltStack Config (SSC).\nPresenters: Vincent Riccio, TMM, VMware\nDale Hassinger, Lead Systems Engineer - SME\nTopic: Manage \u0026amp; Operate Multiple Clouds\nTrack : Multi-Cloud\nPrimary Product: VMware vRealize Automation / vRealize Automation Cloud\nPrimary Audience: Infrastructure Engineer\nSession Type: Breakout Session\nLevel: Technical 200\nPass Type: General and Tech+ Passes\nVMworld online conference: 10/05/2021-10/07/2021\nLink to session in VMworld Content Catalog: Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895]\nIn our Presentation we wil show how to use SaltStack Config to manage Microsoft Windows Servers. How to use Salt to install software, work with Windows Services, make Registry changes, configuration management, and other normal day to day Windows Server administration.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-08-12T00:00:00Z","image":"https://vcrocs.info/vmworld-2021-saltstack-config-session/featured-image_hu_7eeb9949c2ee9398.png","permalink":"https://vcrocs.info/vmworld-2021-saltstack-config-session/","title":"VMworld 2021 - SaltStack Config Session"},{"content":"Part 1: How to use SaltStack Config with Windows Server and PowerShell\nI have recently started looking at using VMware vRealize SaltStack Config. This blog is a work in progress on my journey with Salt. I started at zero and let\u0026rsquo;s see what I discover as I work towards getting to PROD. So if this topic is interesting to you, check back often.\nI wanted to learn one of the server configuration products that are available like Salt, Puppet, Chef, Ansible, etc\u0026hellip; but I wasn\u0026rsquo;t sure which would be the best choice long term. When VMware purchased SaltStack Config the product to choose became a lot easier for me. SaltStack Config is included with vRealize Suite for licensing and I can call VMware support for help, SaltStack Config became the obvious product to pick.\nI like to show how to use VMware vRealize Products from a Windows Server Admin point of view. I do work with both Windows Servers and Linux Servers but most information you see online with Salt is using Linux Servers. I also do most of my current automation with PowerShell scripts. I do not want to lose all the time invested into the logic with my current PowerShell scripts.\nI am not going to go thru the process to install SaltStack Config. There is already some very good blogs written on installing SaltStack Config. One item I would recommend with installing Salt-Stack Config is to use VMware vRealize Life Cycle Manager (\u0026ldquo;LCM\u0026rdquo;). LCM makes the process to install SaltStack Config a lot easier. This Blog is assuming you already installed SaltStack Config, now how do I use salt and what do I use salt for.\nInstalling and Configuring SaltStack Config The first step (minions): After you get a working SaltStack Config Server setup, the first item you need to do is add the salt agent to some \u0026ldquo;Test\u0026rdquo; servers. Servers that have the salt agent installed are called minions. There is the option to not add the salt agent to servers but then you need to use SSH to connect. Windows Servers do not have SSH available as default so you would need to install an SSH server like OpenSSH on your servers. My thoughts are I need to add something for the minions to communicate with the salt-master. Instead of adding OpenSSH to every Windows Server I chose to install and use the salt agent.\nFor testing you can manually install the minion agent on a server to become familiar with how the salt commands work. During the install there are two values you need to enter. The name of the master and the name you want to use for the minion. I did that on my first couple test servers but then I created some PowerShell code to install the salt minion agent. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # ----- [ Install minion ] ----------------------------------------------- # Define Username/Password $username = \u0026#39;username@vCROCS.info\u0026#39; # The next line is how to create the encrypted password # Read-Host -Prompt \u0026#34;Enter your password - username\u0026#34; -AsSecureString | ConvertFrom-SecureString | Out-File \u0026#34;C:\\PWkey\\username.key\u0026#34; $password = Get-Content \u0026#34;C:\\PWkey\\username.key\u0026#34; | ConvertTo-SecureString $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password # ----- [ This section connects you to vCenter where VM is located ] ----- # Connect to vCenter vCenterName = \u0026#39;vCenter.vCROCS.info\u0026#39; Connect-VIServer $vCenterName -Credential $cred # ----- [ Install Salt Agent ] ------------------------------------------- # Name of Server to install the salt minion agent $vmName = \u0026#39;DBH-217\u0026#39; # Copy the minion agent file to your windows server Copy-VMGuestFile -Source G:\\Salt-Minion-2019.2.4-Py3-AMD64-Setup.exe -Destination \u0026#39;C:\\vCROCS\u0026#39; -VM $vmName -LocalToGuest -GuestCredential $cred # command string to install the Salt Minion Agent $PSText = \u0026#39;C:\\vCROCS\\Salt-Minion-2019.2.4-Py3-AMD64-Setup.exe /S /master=salt /minion-name=\u0026#39; + $vmName # Run the command on remote Server Invoke-VMScript -VM $VMName -ScriptType bat -ScriptText $PSText -GuestCredential $cred After the minion agent is installed on your server you need to accept the key on the salt master. From the CLI you can run these commands.\nList all keys. You should see you new minion listed in the Unaccepted Keys: 1 salt-key -L Accept the new minion key on the salt master: 1 salt-key --accept=\u0026#34;DBH-217\u0026#34; If you list all keys again you should see you new minion listed in the Accepted Keys: 1 salt-key -L My next update will include information on how to auto accept new minions.\nHere are some basic salt commands from CLI that I have been using: Show all events:\n1 salt-run state.event Click Here to see Larger Image of Screen Shot\nShow all events with a \u0026ldquo;Pretty\u0026rdquo; view:\n1 salt-run state.event pretty=true Click Here to see Larger Image of Screen Shot\nList keys:\n1 salt-key -L Accept Key: 1 salt-key --accept=\u0026#34;DBH-214\u0026#34; Delete Key: 1 salt-key -d \u0026#34;DBH-211,DBH-212\u0026#34; Run a function on one minion: 1 salt \u0026#34;DBH-217\u0026#34; disk.usage Run a function on multiple minions: 1 salt \u0026#34;DBH-217,DBH-218\u0026#34; test.ping Run a function on all minions: 1 salt \u0026#34;*\u0026#34; test.ping Create a file: 1 salt \u0026#34;DBH-214\u0026#34; file.touch C:\\vCROCS\\salt.tst Copy a file: 1 salt \u0026#34;DBH-214\u0026#34; cp.get_file salt://vCROCS/vCROCSTEST.ps1 \u0026#34;C:\\vCROCS\\vCROCSTEST.ps1\u0026#34; Delete a file: 1 salt \u0026#34;DBH-214\u0026#34; file.remove \u0026#34;C:\\vCROCS\\vCROCSTEST.ps1\u0026#34; Run a PowerShell Script: 1 salt \u0026#34;DBH-214\u0026#34; cmd.script source=\u0026#34;salt://vCROCS/vCROCSTEST.ps1\u0026#34; shell=powershell Restart the Salt Master Service: 1 service salt-master restart Show the status of the raas and salt-master services: 1 2 systemctl status raas systemctl status salt-master Stop and start the salt-master service: 1 2 systemctl stop salt-master systemctl start salt-master Get IP address of all minions: 1 salt \u0026#39;*\u0026#39; network.ip_addrs Ping All Minions: 1 salt \u0026#34;*\u0026#34; test.ping Disk Space Usage on all Minions: 1 salt \u0026#34;*\u0026#34; disk.usage Lessons Learned: Anything you can do in the SaltStack Config GUI you can do in CLI. I find myself using the CLI for most testing. After I have the commands correct I will then add into the GUI. DO NOT have the minion agent version newer than the Salt-Master. I am going to try and keep the salt-master and minions always at the same version. The minion can be at an older version than the salt-master. During my upgrade from SaltStack Config 8.3 to 8.4 the Salt API did not upgrade. I didn\u0026rsquo;t remember seeing any errors in LCM after the upgrade. The raas service was at version 8.4 and the salt API was at 8.3. I had authentication issues, I could not accept keys, etc\u0026hellip; I opened an SR with VMware and they helped me fix the issue. The support I received from VMware with Salt was probably the best support I received on any VMware product. Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-07-16T00:00:00Z","image":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-1/featured-image_hu_58172bdfb729f141.png","permalink":"https://vcrocs.info/vmware-vrealize-saltstack-config-as-a-windows-server-admin-part-1/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 1"},{"content":"Using vROPS Data to help show APP Owners Proper VM Sizing: vRealize Operations does a good job to show you what the correct number for vCPU/Memory settings should be based on monitoring history. But instead of showing APP owners a screen that just shows what the current VM vCPU/Memory settings are and what the new settings \u0026ldquo;Should\u0026rdquo; be, I wanted to show the real data that proves why these changes should be made. It can still be hard for people to understand that taking away a VM resources can make performance better. If a mechanic told you to replace a v-8 engine in a vehicle with a 4 cylinder to get more performance, would you believe them? Probably not!\nvROPS Right Sizing does not just show you what vCPU to remove to make a VM performance better. If a VM requires more vCPU resources there is a Metric CPU|Add that can be very useful.\nvROPS Right Size Screen: VM Names were removed from screen Shot In vCenter if you look at the performance of a VM one of the options is to show CPU Ready|State (ms). I think this is a metric that you can show to an APP Owner and they can understand why this is important.\nCPU Ready|State (ms): \"Time that the virtual machine was ready, but could not get scheduled to run on the physical CPU during last measurement interval\" vCenter VM Advanced Performance: vCenter VM Advanced Performance Settings: When I looked at vROPS OOTB (Out of the Box) the VM CPU Metric CPU|Ready (ms) was not being collected. I wanted to be able to show the CPU Metric CPU|Ready (ms) in a Right-Size/Performance Dashboard to show APP Owners this value.\nSteps to add Metric CPU|Ready (ms) to vROPS: Administration: Policies. Select your Default Policy. Edit Policy. Select Object Type: Virtual Machine Filter for the word Ready. Expand the metrics/CPU. You will see Ready (ms) Disabled. Change State and Instanced State to Enabled. Save See the (2) screen shots below. Here is a vROPS Dashboard that I created to show APP Owners Performance information and Right Sizing information in a \"Single Pane of Glass\". A question the APP Owners always ask is WHY should we take resources away from a VM to make the performance better. If you look at the Column CPU|Remove and then look at the column CPU|Ready (ms), the CPU|Ready (ms) is much higher on VMs that are NOT Right Sized. In one Dashboard I am showing several CPU performance metrics, vSAN performance metrics, CPU configuration (Counts/Hot ADD) and Right Sizing. I like to be able to look at all these metrics at the same time. Nice to be able to see if there is a relationship between performance, latency and Right Sizing. Does CPU performance affect the vSAN performance? Here is a VM that CPU|Remove is 0 and the CPU|Ready (ms) is much lower. Why is that? Dashboard Screen Shot:\nVM Names were removed from screen Shot\nClick here to Download Dashboard and Views from VMware Code Web Site\nCPU | Ready (ms) metric after using vROPS Right Size recommendation: This metric chart is showing a VM that had 12 CPU. vROPS recommended that the CPU count be 10. Before VM CPU count was changed to 10 you can see the CPU|Ready (ms) was running between 1500 - 2000 (ms). After the VM CPU count was changed to 10 you can see the CPU|Ready (ms) was running between 500 - 600 (ms). If you would do this across 100s of VMs in a cluster you would see even more performance gains because then the \u0026ldquo;Noisy Neighbors\u0026rdquo; would not be as Noisy.\nPerformance Values: CPU|Ready (ms) should be 1000 or less for best performance CPU|Remove - I like to keep this at 2 or less. For some applications this can be trial and error. CPU|Add - I like to keep this at 0. Make sure the VM is sized with enough resources. Don\u0026rsquo;t under size VMs. This will keep the APP Owners Happy! The next section was in an IBM KB article that I found helpful: CPU ready time is a vSphere metric that records the amount of time a VM is ready to use CPU but was unable to schedule physical CPU time because all the vSphere ESXi host CPU resources are busy. CPU ready time is dependent on the number of VMs on the host and their CPU loads. It is normal for a VM to average between 0–50 ms of CPU ready time; anything over 1000 ms is considered to lead to VM performance problems.\nVMs that are configured with multiple vCPUs will suffer from an increased amount of ready time than compared to VMs with fewer vCPUs configured. Ready time increases as the VM needs more vCPU resources to be made available at the same time and, therefore, may have to wait for extended times for all the required vCPUS to be free to be made available to the VM with more vCPUs.\nIn Addition to Right Sizing, I also think that Optimizing a VM is important. VMware has a Fling available that I like to use VMware OS Optimization Tool that helps you optimize CPU Settings. Dashboard Tips: Add Color to the list data to make poor performance values catch your eye. (I used Red) Use Donut Charts to show some of the metrics that you feel are more important. To add color to List View values, use Show advanced settings for a metric:\n![](right-size-09.png) Enter the metric values when you want the color to change:\nI like using Donut Charts in Dashboards. You can show a lot of data in a small amount of screen space. Using colors also catches your eye quickly when there are issues:\nWhen I write about Automation I always say there are many ways to accomplish the same task. Monitoring is the same way. I am showing what I felt was important to see but every organization will be different. Add/Remove columns in the Dashboard to suite you needs. There is no right or wrong way to monitor. Maybe other metrics make more sense to you. What is important with monitoring is don\u0026rsquo;t install vRealize Operation and not use it. Don\u0026rsquo;t make vROPS Shelfware! This is a GREAT Tool that shows you so much information about your virtual environment. And it keeps getting better\u0026hellip;\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-05-15T00:00:00Z","image":"https://vcrocs.info/how-vrealize-operations-can-help-with-right-sizing-vms/featured-image_hu_9f9a93d48f7f1389.png","permalink":"https://vcrocs.info/how-vrealize-operations-can-help-with-right-sizing-vms/","title":"How vRealize Operations can help with Right Sizing VMs"},{"content":"Using vRO REST API. - (Updated for vRA 8.4)\nI recently had a use case where I wanted to execute a vRealize Orchestrator Workflow by using REST API. There is some documentation available but not a lot of details on how to get and use variables, sdk-objects and bearer token for permission. Here is how I made the vRO REST API calls with PowerShell using vRealize Orchestrator built-into vRA.\nSteps:\nPermission: Need to get a Bearer Token from vRO to make REST API Call to execute Workflow. To get a Bearer Token you need to make an REST API Call with username/password. See example code. Workflow Information: Get Workflow ID. Get Workflow variable inputs. Get sdk-object names from a successful Workflow run. See Screen Shots and sample code. Run the Workflow you want to use REST API with manually at least one time successfully. When you look at the variables of a successful Workflow run it shows you what the Workflow is expecting for variables and sdk-objects. See Screen Shots. Code to get bearer Token (PowerShell): You can\u0026rsquo;t use vRO REST API without getting bearer token first.\n(Note: When vRealize Automation 8.4 was released there was a small change to api to get Bearer Token. See the changes in the code area. Everything else has stayed the same for my processes.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # Get Bearer Token from vRA REST API Call # Some of the commented lines are in the code for testing. I use to check variable # values when building the Automation. # I am showing password in this example. In Production I get the Password from a Hashi # Secret Server and DO NOT have the password Hard Coded. # --- [ Variables ] --- $password = \u0026#39;VMware1\u0026#39; # --- [ Headers ] --- $headers = New-Object \u0026#34;System.Collections.Generic.Dictionary[[String],[String]]\u0026#34; $headers.Add(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) $headers.Add(\u0026#34;Accept\u0026#34;, \u0026#34;application/json\u0026#34;) # --- [ Body ] --- $body = \u0026#34;{ `n `\u0026#34;password`\u0026#34;: `\u0026#34;passwordString`\u0026#34;, `n `\u0026#34;username`\u0026#34;: `\u0026#34;administrator`\u0026#34; `n}\u0026#34; $body = $body -Replace(\u0026#34;passwordString\u0026#34;,$password) #$body # --- [ Invoke REST API ] --- # vRA 8.3 Use next line $response = Invoke-RestMethod -SkipCertificateCheck \u0026#39;https://vRA-FQDN.domain.name/csp/gateway/am/api/login?access_token\u0026#39; -Method \u0026#39;POST\u0026#39; -Headers $headers -Body $body # vRA 8.4 Use next line $response = Invoke-RestMethod -SkipCertificateCheck \u0026#39;https://vRA-FQDN.domain.name/csp/gateway/am/api/login?cspAuthToken\u0026#39; -Method \u0026#39;POST\u0026#39; -Headers $headers -Body $body $response | ConvertTo-Json #$response # vRA 8.3 Use next line #$response.access_token # vRA 8.4 Use next line #$response.cspAuthToken # vRA 8.3 Use next line $bearer_token = \u0026#34;Bearer \u0026#34; + $response.access_token # vRA 8.4 Use next line $bearer_token = \u0026#34;Bearer \u0026#34; + $response.cspAuthToken # $bearer_token Code to get execute a vRO Workflow using API Call (PowerShell): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # Run vRA Workflow using API Call # --- [ Variables ] --- $vmName = \u0026#39;DBH-1234\u0026#39; $emailAddress = Dale.Hassinger@vCROCS.info\u0026#39; $OSVersion = \u0026#39;Ubuntu18044\u0026#39; $PSText = \u0026#39;G:\\Scripts\\Create-Linux-Server-Step-1-v01-PROD.ps1 -vmNAME $vmName -emailAddress $emailAddress -OSVersion $OSVersion\u0026#39; # --- [ Headers ] --- $headers = New-Object \u0026#34;System.Collections.Generic.Dictionary[[String],[String]]\u0026#34; $headers.Add(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/xml\u0026#34;) $headers.Add(\u0026#34;Authorization\u0026#34;, $bearer_token) # --- [ Body ] --- $body = \u0026#39; \u0026lt;execution-context xmlns=\u0026#34;http://www.vmware.com/vco\u0026#34;\u0026gt; \u0026lt;parameters\u0026gt; \u0026lt;parameter name=\u0026#34;vm\u0026#34; type=\u0026#34;VC:VirtualMachine\u0026#34; scope=\u0026#34;local\u0026#34;\u0026gt; \u0026lt;sdk-object type=\u0026#34;VC:VirtualMachine\u0026#34; id=\u0026#34;vCenter.FQDN,id:vm-12345\u0026#34;/\u0026gt; \u0026lt;/parameter\u0026gt; \u0026lt;parameter name=\u0026#34;vmUsername\u0026#34; type=\u0026#34;string\u0026#34; scope=\u0026#34;local\u0026#34;\u0026gt; \u0026lt;string\u0026gt;username@domain.name\u0026lt;/string\u0026gt; \u0026lt;/parameter\u0026gt; \u0026lt;parameter name=\u0026#34;vmPassword\u0026#34; type=\u0026#34;SecureString\u0026#34; scope=\u0026#34;local\u0026#34;\u0026gt; \u0026lt;string\u0026gt;vmPassword_string\u0026lt;/string\u0026gt; \u0026lt;/parameter\u0026gt; \u0026lt;parameter name=\u0026#34;programPath\u0026#34; type=\u0026#34;string\u0026#34; scope=\u0026#34;local\u0026#34;\u0026gt; \u0026lt;string\u0026gt;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\u0026lt;/string\u0026gt; \u0026lt;/parameter\u0026gt; \u0026lt;parameter name=\u0026#34;arguments\u0026#34; type=\u0026#34;string\u0026#34; scope=\u0026#34;local\u0026#34;\u0026gt; \u0026lt;string\u0026gt;arguments_string\u0026lt;/string\u0026gt; \u0026lt;/parameter\u0026gt; \u0026lt;parameter name=\u0026#34;workingDirectory\u0026#34; type=\u0026#34;string\u0026#34; scope=\u0026#34;local\u0026#34;\u0026gt; \u0026lt;string\u0026gt;G:\\Scripts\u0026lt;/string\u0026gt; \u0026lt;/parameter\u0026gt; \u0026lt;/parameters\u0026gt; \u0026lt;/execution-context\u0026gt; \u0026#39; # $body # I define the Body format and then replace strings of text that I define with variables # in the code. $body = $body -Replace(\u0026#34;vmPassword_string\u0026#34;,$password) $body = $body -Replace(\u0026#34;arguments_string\u0026#34;,$PSText) # --- [ Invoke REST API ] --- $response = Invoke-RestMethod -SkipCertificateCheck \u0026#39;https://vRA-FQDN.domain.name/vco/api/workflows/9cc3ac9d-062b-4e98-aa9d-e781e47f1234/executions\u0026#39; -Method \u0026#39;POST\u0026#39; -Headers $headers -Body $body $response | ConvertTo-Json #$response Orchestrator Workflow: This is where you get the Workflow ID value. See highlighted area.:\nSample Code to use Workflow ID:\n1 $response = Invoke-RestMethod -SkipCertificateCheck \u0026#39;https://vRA-FQDN.domain.name/vco/api/workflows/7452cce6-c715-482d-9127-1f3aa11523ba/executions\u0026#39; -Method \u0026#39;POST\u0026#39; -Headers $headers -Body $body This is where you get the input variable values. See highlighted area.:\nThis is where you get the sdk-object variable values. See highlighted area.:\nThis is where you get the sdk-object/input variable values. See highlighted area.:\nSample Code to specify \u0026ldquo;VC:HostSystem\u0026rdquo; and ID value:\n1 2 3 \u0026lt;parameter name=\u0026#34;vm\u0026#34; type=\u0026#34;VC:HostSystem\u0026#34; scope=\u0026#34;local\u0026#34;\u0026gt; \u0026lt;sdk-object type=\u0026#34;VC:VirtualMachine\u0026#34; id=\u0026#34;192.168.86.200,id:host-14\u0026#34;/\u0026gt; \u0026lt;/parameter\u0026gt; Click Here to see Larger Image of Screen Shot Sample Code to specify \u0026ldquo;VC:VirtualMachine\u0026rdquo; and ID value (VM.ExtensionData.MoRef.Value):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;parameter name=\u0026#34;vm\u0026#34; type=\u0026#34;VC:VirtualMachine\u0026#34; scope=\u0026#34;local\u0026#34;\u0026gt; \u0026lt;sdk-object type=\u0026#34;VC:VirtualMachine\u0026#34; id=\u0026#34;192.168.86.200,id:vm-3006\u0026#34;/\u0026gt; \u0026lt;/parameter\u0026gt; # Example of how to build the body. $vCenter = \u0026#39;192.168.86.200\u0026#39; $vmInfo = Get-VM -Name \u0026#39;administrator-904\u0026#39; $vmMoref = $vmInfo.ExtensionData.MoRef.Value # --- [ Body ] --- $body = \u0026#39; \u0026lt;execution-context xmlns=\u0026#34;http://www.vmware.com/vco\u0026#34;\u0026gt; \u0026lt;parameters\u0026gt; \u0026lt;parameter name=\u0026#34;vm\u0026#34; type=\u0026#34;VC:VirtualMachine\u0026#34; scope=\u0026#34;local\u0026#34;\u0026gt; \u0026lt;sdk-object type=\u0026#34;VC:VirtualMachine\u0026#34; id=\u0026#34;vCenterString,id:vmString\u0026#34;/\u0026gt; \u0026lt;/parameter\u0026gt; \u0026lt;/parameters\u0026gt; \u0026lt;/execution-context\u0026gt; \u0026#39; $body # I define the Body format and then replace strings of text that I define with variables # in the code. $body = $body -Replace(\u0026#34;vmstring\u0026#34;,$vmMoref) $body = $body -Replace(\u0026#34;vCenterstring\u0026#34;,$vCenter) $body I hope this helps you understand how to automate running vRO Workflows using REST API with PowerShell.\nHappy Automating\u0026hellip;\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-04-29T00:00:00Z","image":"https://vcrocs.info/automating-automation-updated/featured-image_hu_ce71ce58d68ad8d.png","permalink":"https://vcrocs.info/automating-automation-updated/","title":"Automating Automation (Updated)"},{"content":"How to check if ports are open to a remote server\nPowerShell Code Use PowerShell to see if ports are open to a remote server.\nLiving in a zero trust environment can be challenging. Here is some code that I have been using to test for open ports from a Windows server to any type of destination. Just change PortNumber and Destination for your use case.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $PortNumber = \u0026#39;443\u0026#39; $Destination = \u0026#39;Server.vCrocs.info\u0026#39; $socket = New-Object Net.Sockets.TcpClient $socket.Connect($Destination,$PortNumber) if($socket.Connected){ $PortOpened = \u0026#39;Port: \u0026#39; + $PortNumber + \u0026#39; to \u0026#39; + $Destination +\u0026#39; is Open! :)\u0026#39; $socket.Close() } # end if else{ $PortOpened = \u0026#39;Port: \u0026#39; + $PortNumber + \u0026#39; to \u0026#39; + $Destination +\u0026#39; IS NOT Open! :(\u0026#39; } # end else Write-Output $PortOpened Linux Commands If you work with VMware vRealize Suite of appliances here are some commands (curl and Netcat) that can be used with Linux OS to test if ports are open to destination servers.\n1 2 curl -v telnet://server01.vCROCS.info:443 nc -ztv server01.vCROCS.info 443 -w 3 If you found this Blog article useful and it helped you, Buy me a coffee to start my day. Article Updated: 2021-04-24\n","date":"2021-04-24T00:00:00Z","image":"https://vcrocs.info/open-ports-zero-trust/featured-image_hu_ce71ce58d68ad8d.png","permalink":"https://vcrocs.info/open-ports-zero-trust/","title":"Open Ports | Zero Trust"},{"content":"The New Features I use the most.\nDonut Charts. This is one of my favorite new features. The donut chart allows you to show a lot of information in a smaller space and makes the Dashboards look more modern and clean looking. I have been replacing the Heat Map Widgets on some of my custom Dashboards with Donut Charts. If you click on the colors of the Donut charts you will then get a list of the data that makes up that color. Top-N Chart and Color Method. Adding color to the Top-N makes it so much more usable. With the previous version where is was just blue it didn\u0026rsquo;t grab your eye like adding the color. Using the Top-N chart and the Donut chart together makes a GREAT looking Dashboard. See my example below. Ping Monitoring. This feature always us to monitor non VMware devices. In a short period of time I learned a lot about latency and packet drops in our environment. Troubleshooting Workbench. In previous versions of vROPS I would create Dashboards to help with trouble shooting. With Trouble Shooting work bench I don\u0026rsquo;t need to create those custom Dashboards anymore. The included Trouble Shooting workbench is like what I did on steroids. Donut Chart and Top-N Example: This single Dashboard has a lot of info that would has taken several Dashboards to show same amount of data using Heat Maps. This would be a good example of a Dashboard that managers may want to see.\nDonut Chart Config: Create a Distribution View. Make the visualization a Donut Chart. Use Manual distribution. Create Buckets and set the values/colors for the Buckets. Add the View to a Dashboard. Top-N Chart Config: Add Top-N Widget to Dashboard Define configuration and Input Transformation. Output Data:Color Method:Custom is where you define the color values. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-02-20T00:00:00Z","image":"https://vcrocs.info/vrealize-operations-8.x-new-features/featured-image_hu_9f9a93d48f7f1389.png","permalink":"https://vcrocs.info/vrealize-operations-8.x-new-features/","title":"vRealize Operations 8.x - New Features"},{"content":"Options to use PowerShell Modules\nI like to review VMware vRA (vRealize Automation) 8.2 as a Microsoft Windows Server Admin. Most of the reviews you see are creating Linux VMs and customizing the OS using tools for Linux. I create Windows/Linux VMs and customize the OS using a new feature added to vRA 8.x, Action Based Extensibility (ABX) with PowerShell.\nIn my vRA 7.6 environment, I use a PowerShell Host to run processes and on the PowerShell Host is where I install all the PS Modules that I use. When I started looking at how to use PowerShell with vRA 8.2 the one item that I needed to understand was how to use PowerShell Modules. VMware does have a Blog Post on how to include PowerShell modules with ABX Actions/vRO Work Flows - Click Here to see the Blog Post. After doing some testing and reviewing my options I decided to continue to use a PowerShell Host with vRA 8.2. What this allows me to do is use the same exact PowerShell Host for 7.6 and 8.2. The existing PS scripts that I have also work with both 7.6 and 8.2. No changes to any scripts and the PS Host. I like how VMware included PS as an options for all scripts within vRA 8.2. Hopefully in the future VMware will allow you to install your own PS Modules directly in the vRA Appliance. The one item that some people may not like about this setup is it does require an additional Windows Server that a standard vRA setup does not require. But to be able to use an existing Windows PS Host that can be shared between vRA 7.6 and 8.2 until I get my environment to 100% vRA 8.2 also has it positives. With Automation there is always many ways to complete the same task.\nI wrote a Blog Post previously that describes how to pass Cloud Template inputs/properties to ABX Actions. This Post is really using that same technique but instead of only running an ABX Action, this ABX Action Script is passing the inputs/customproperties onto a PowerShell Host. Here is link to previous post: VREALIZE AUTOMATION 8.2 - POWERSHELL ABX. By passing the custom properties as parameters to a PS Host I can also use PS Modules to connect to SQL servers and many other options. Basically any PS Module that is available can be used.\nDetails on how to use a ABX Script with a PowerShell Host: Step 1: Create a Cloud Template. (See included yaml code and screen shot). Create inputs for the parameters you need to send to a PS script that will run on the PS Host. The inputs are the values that are used for the resource/properties. (See included yaml code) Create Properties in the resources section of the yaml for the inputs you just created. These properties will be the parameters that get passed to the PS Script. The properties get passed to the ABX script using $payload. (See included PS code) Step 2: Create a PowerShell ABX Action. (See included PS code and screen shot) To get the custom properties from the Cloud Template you need to use $payload. $payload.customProperties.\"Properties Name\" is how you get the values from the $payload. You can assign the custom properties to a variable within the ABX PS code. I use Invoke-VMScript to run the PS Script on the PS Host because my environment is also a Zero Trust Environment. Invoke-VMScript allows me to run PS scripts on remote servers without opening ports to the remote servers. Step 3: Create a Subscription. See Screenshot. The subscription is want runs the ABX scripts. A subscription can be Fired before or after a compute resource gets provisioned. I create a subscription for both in my environment. Within the subscription is where you define which ABX script is run. If you would want to string several ABX scripts together, the subscription could also run a ABX Flow. Sample Code and Screen Shots: Cloud Template: The properties under resources in the yaml code will be used like parameters in a PS Script. Since I have a background in PowerShell that is how I am using the properties. When you deploy the Cloud Template, the values entered that I defined will not be used until the ABX script runs. The ABX Script will run after the subscription is triggered. The values will be passed from the Cloud Template to the ABX Script using $payload. Just like passing parameters to a PS script.\nClick to expand code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 # Created by Dale Hassinger - vCrocs.info # Date: 01/14/2021 # Send Property Values to ABX Script that runs script on PS Host with all Zero Trust Permissions and Modules # Version: 1 formatVersion: 1 # ---------- [ Inputs ] ---------- # inputs: cpu: type: integer description: CPUs default: 2 mem: type: integer description: Memory(MB) default: 8192 VMName: type: string title: Enter VM Name minLength: 1 maxLength: 15 default: DBH-001 TemplateName: type: string description: \u0026lt;b\u0026gt; Select Windows or Ubuntu.\u0026lt;/b\u0026gt; \u0026lt;br\u0026gt; default: vRA_Ubuntu_18.04.4 title: OS oneOf: - title: Ubuntu const: vRA_Ubuntu_18.04.4 - title: Windows 2016 const: vRA_TEMPLATE_2016 - title: Windows 2019 const: vRA_TEMPLATE_2019 CustomizationSpec: type: string default: vRA_Ubuntu description: type: string default: vRA 8.2 TEST VM environment: type: string description: \u0026#39;\u0026lt;b\u0026gt; Select Environment.\u0026lt;/b\u0026gt; \u0026lt;br\u0026gt;\u0026#39; default: \u0026#39;environment:Management\u0026#39; title: Environment oneOf: - title: Compute const: \u0026#39;environment:Compute\u0026#39; - title: Management const: \u0026#39;environment:Management\u0026#39; - title: DevTest const: \u0026#39;environment:DevTest\u0026#39; department: type: string description: \u0026lt;b\u0026gt; Select Application Team.\u0026lt;/b\u0026gt; \u0026lt;br\u0026gt; default: \u0026#39;department:APP Team 1\u0026#39; title: Application Team oneOf: - title: APP Team 1 const: \u0026#39;department:APP Team 1\u0026#39; - title: APP Team 2 const: \u0026#39;department:APP Team 2\u0026#39; - title: APP Team 3 const: \u0026#39;department:APP Team 3\u0026#39; IP: type: string default: 192.168.86.200 emailAddress: type: string default: Dale.Hassinger@vCROCS.info RootPartition: type: integer default: 20 BuildBY: type: string default: DaleHassinger BuildRequestor: type: string default: KirkShaffer OSVersion: type: string default: Ubuntu18044 # ---------- [ Resources ] ---------- # resources: Cloud_Network_1: type: Cloud.Network properties: networkType: existing address: \u0026#39;${input.IP}\u0026#39; constraints: - tag: \u0026#39;${input.environment}\u0026#39; - tag: \u0026#39;${input.department}\u0026#39; Cloud_vSphere_Machine_1: type: Cloud.vSphere.Machine properties: image: \u0026#39;${input.TemplateName}\u0026#39; flavor: std cpu: \u0026#39;${input.cpu}\u0026#39; mem: \u0026#39;${input.mem}\u0026#39; customizationSpec: \u0026#39;${input.CustomizationSpec}\u0026#39; emailAddress: \u0026#39;${input.emailAddress}\u0026#39; RootPartition: \u0026#39;${input.RootPartition}\u0026#39; BuildBY: \u0026#39;${input.BuildBY}\u0026#39; BuildRequestor: \u0026#39;${input.BuildRequestor}\u0026#39; OSVersion: \u0026#39;${input.OSVersion}\u0026#39; constraints: - tag: \u0026#39;${input.environment}\u0026#39; networks: - network: \u0026#39;${resource.Cloud_Network_1.id}\u0026#39; assignment: static address: \u0026#39;${input.IP}\u0026#39; name: \u0026#39;${input.VMName}\u0026#39; description: \u0026#39;${input.description}\u0026#39; ABX Action Script: In my PowerShell code I am using Write-Host to help show how the Cloud Template passes values to the ABX Action using the $payload. I use the code to troubleshoot and understand how it is working. I am able to take values from the payload customProperties and assign to variables. The customProperties are defined in the Cloud Template yaml code as resources/properties. I can then make decisions in the code based on these values. For production the write-host lines could be removed.\nClick to expand code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 function handler($context, $payload) { # Build PowerShell variables $VMName = $payload.resourceNames $cpu = $payload.customProperties.cpu $mem = $payload.customProperties.mem $description = $payload.customProperties.description $IPaddress = $payload.addresses $emailAddress = $payload.customProperties.emailAddress $RootPartition = $payload.customProperties.RootPartition $BuildBY = $payload.customProperties.BuildBY $BuildRequestor = $payload.customProperties.BuildRequestor $OSVersion = $payload.customProperties.OSVersion # Show PS variables Write-Host \u0026#39;VMName:\u0026#39; $VMName Write-Host \u0026#39;CPU:\u0026#39; $cpu Write-Host \u0026#39;Memory:\u0026#39; $mem Write-Host \u0026#39;Description:\u0026#39; $description Write-Host \u0026#39;IPaddress:\u0026#39; $IPaddress Write-Host \u0026#39;Email:\u0026#39; $emailAddress Write-Host \u0026#39;Root:\u0026#39; $RootPartition Write-Host \u0026#39;Build By:\u0026#39; $BuildBY Write-Host \u0026#39;Build BuildRequestor:\u0026#39; $BuildRequestor Write-Host \u0026#39;OS Version:\u0026#39; $OSVersion # ----- [ Define Username/ Get Password ] ------------------------------------------------------------------ $HashiVaultPW = \u0026#39;vCROCS#1\u0026#39; Write-Host $HashiVaultPW $username = \u0026#39;administrator@vsphere.local\u0026#39; Write-Host $username # ----- [ Connect vCenter and run PS Script on PS Host ] ------------------------------------------------------------------ # Connect to vCenter to be able to connect to PS Host Connect-VIServer -Server vCenter01.vCROCS.info -User $username -Password $HashiVaultPW -Protocol https -Force # PS Host Name $PSHost = \u0026#39;vCROCSPSHost\u0026#39; Write-Host \u0026#39;PS Host:\u0026#39;$PSHost # PS Script text $PSParameters = \u0026#34;-VMNAME \u0026#39;\u0026#34; + $VMName + \u0026#34;\u0026#39; -emailAddress \u0026#39;\u0026#34; + $emailAddress + \u0026#34;\u0026#39; -RootPartition \u0026#39;\u0026#34; + $RootPartition + \u0026#34;\u0026#39;\u0026#34; Write-Host \u0026#39;PS Parameters:\u0026#39;$PSParameters $PSScript = \u0026#39;G:\\Scripts\\Create-Linux-Server-Step-3-v01.ps1\u0026#39; Write-Host \u0026#39;PS Script:\u0026#39;$PSScript $PSText = \u0026#39;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe \u0026#34;\u0026#39; + $PSScript + \u0026#39;\u0026#34; \u0026#39; + $PSParameters Write-Host \u0026#39;Complete PS String:\u0026#39;$PSText # Run PS Script on PS Host $result = Invoke-VMScript -VM $PSHost -ScriptType Bat -ScriptText $PSText -GuestUser $username -GuestPassword $HashiVaultPW Write-Host $result.ScriptOutput return $LASTEXITCODE } Subscription: Lessons Learned: vRA 7.6 and 8.2 can share the same PS Host and Scripts. A lot of the PowerShell code and logic I use in vRA 7.6 will be able to be reused/shared. Using a PS Host does require an additional VM. Within ABX scripts I have always changed the default \"Custom limits and retry options\". I set the \"Memory Limit\" to 1024 and \"Timeouts\" to 900. Anytime I speak to others about Automation the one item I stress is there is no right way or wrong way to accomplish your tasks. Build on the skills that your Team already has. The environment I work in is 90% Windows Servers so we use PowerShell a lot. That is why I needed to be able to use all the PS Modules that I have installed on the PS Host. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-01-18T00:00:00Z","image":"https://vcrocs.info/how-to-use-powershell-modules-with-vra-8.2/featured-image_hu_ce71ce58d68ad8d.png","permalink":"https://vcrocs.info/how-to-use-powershell-modules-with-vra-8.2/","title":"How to use PowerShell Modules with vRA 8.2"},{"content":"How to be successful with VMware vRealize Products in your environment\nI often get asked to speak to different organizations about what I have accomplished with the VMware vRealize Suite of products. The one question that almost always gets asked is, how are you able to do everything that you have setup in your environment. After being asked this question a lot I thought I would give my thoughts in a Blog Post. Here is my “Recipe for Success”:\nIngredients: Enjoy what you do. Give Back. Be involved in the vCommunity Enjoy where you work. Enjoy who you work with. Work at a place where management supports you. Don’t be afraid of change. Always keep track of what the industry is doing. Use Social Media like Twitter. Setup a Home Lab Learn, Learn, Learn! Think outside of the box Directions: The most important ingredient is to enjoy what you do. I have worked in the IT industry for 25+ years and I still have a Passion for it. I feel that I get paid to do my hobby. I am fascinated every day when I see some of the new technology that get released. There are some very smart people in the IT industry. I can truly say that I love what do for a job! When I create Automation that makes processes consistent and faster for the Team that I work with, I get a feeling that I have accomplished something. “Feel Good”/’Proud” feeling inside.\nAttend and Participate in user groups. VMUG, “Little Hacks”, SQL, HVC, PowerBlocks, Under The Hoods, etc\u0026hellip; I started out by just attending and learning. I met a lot of people at the user groups. I now consider some of those people friends. After several years of being an attendee, I felt like I wanted to Give Back and start sharing some of the ideas that I have done. So, I started doing presentations myself. Everyone has something to share.\nWork for a Team that isn’t afraid of change. I say tear down the “Silos” and have everyone work together more. I have heard people say that Automation will eliminate my job. If you are an engineer, Automation will get the mundane items off your list. Let you focus more on Engineering type of tasks. The Cool Stuff!\nvRA: Start simple. Don\u0026rsquo;t try and have a 100 processes in your first Catalog item. Keep adding additional steps to the Catalog item until you cross off everything that needs to be done. Prove to management that the simple Automation is working and being used every day. My Automation is in a constant state of change. Always trying to make it better. Constantly including new processes.\nvROPS: Start my making some simple Dashboards with Heat Maps that show the Health of Items. Show your Hosts, VMs, Clusters. Start simple just like I said with Automation. You can then keep adding widgets to the Dashboards to give more information and make them more useful. Look at the \u0026ldquo;Text Display\u0026rdquo; widget to let you show information not included within vROPS. Have a goal of using vROPS as your \u0026ldquo;Single Pane of Glass\u0026rdquo;.\nGo to conferences. In 2020 since almost all conferences were online and free, I attended at least 6. Even if there was only one or two sessions that I wanted to attend, I took the time.\nTwitter is an awesome place to keep up. Use Twitter Lists to keep the “Garbage” out of you feed. I follow a lot of Technology businesses and Bloggers. Find people that have similar interests. Tech Companies are always giving updates about their products on Twitter. They post information about webinars that I find very useful. My Twitter Lists are public if you want to get started.\nSetup a Lab area of some type to be able to learn all the vRealize Products. One way to get a Home Lab started is to use VMware Fusion on Macs or VMware Workstation on PC’s. You can install nested ESXi on Fusion/Workstation.\nI have a Packt subscription that gives me access to a lot of Technology Books on a lot of topics. Well worth the money.\nStarting a Blog is a great way to start #GivingBack. Hugo is a great static site generator. You can use Github at no cost to store and host the web pages generated from Hugo.\n“9 – 5 pays the Bills. 5 – 10 advances your career.”\n#VMware | #vRealizeAuto | #saltstack | #vRealizeOPS | #vmloginsight\n2022 Update: I had to make some changes in 2022. I was starting to miss some of the ingredients that I listed in this Blog post when I originally wrote it so I made a change in my career to get all the ingredients back. When you have a passion for what you do, don\u0026rsquo;t let other people take that drive to keep being successful away. A word that is very important to me is Respect. In my Blog posts I will list people that have helped me in my career. I respect and look up to all those names listed. Life is to short to not have Respect for what you do and have accomplished\u0026hellip;\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-01-15T00:00:00Z","image":"https://vcrocs.info/how-to-be-successful-with-vmware-vrealize-products-in-your-environment/featured-image_hu_6adc25b2401bb9a.png","permalink":"https://vcrocs.info/how-to-be-successful-with-vmware-vrealize-products-in-your-environment/","title":"How to be successful with VMware vRealize Products in your environment"},{"content":"Creating Charts with ChartJS and displaying in vRealize Operations\nI like the idea of using VMware vRealize Operations as the “Single Pane of Glass” for all monitoring. The Citrix Team recently asked me if I could show license usage within vRealize Operations. They wanted to see the highest usage in the last 30 days, 10 days and 24 hours. Citrix license usage is not built into vROPS but I have used the “Text Display Widget” to show other information within vROPS.\nI wanted to create a half donut chart to show the highest license usage in the last 30 days, a horizontal bar chart to show the last 10 days and a table to show the last 24 hours. I reviewed to see what “Open Source” Javascript options were available and I found ChartJS. After reviewing how to program the files to create charts with ChartJS I liked the solution.\nChartJS Displayed in vRealize Operations using the \u0026ldquo;Text Display Widget\u0026rdquo; ChartJS Half Donut. When you hold the mouse over the chart you will see the values.\nChartJS Half Donut code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Citrix Licensing Count\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;width:95%\u0026#34;\u0026gt; \u0026lt;canvas id=\u0026#34;doughnut-chart\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Chart(document.getElementById(\u0026#34;doughnut-chart\u0026#34;), { type: \u0026#39;doughnut\u0026#39;, data: { labels: [\u0026#34;Used\u0026#34;,\u0026#34;Total\u0026#34;], datasets: [ { label: \u0026#34;Peak Usage\u0026#34;, backgroundColor: [\u0026#34;#28B463\u0026#34;,\u0026#34;#808B96\u0026#34;], data: [1682,8000] } ] }, options: { title: { display: true, text: \u0026#39;Citrix License Usage (MPS_PLT_CCU)\u0026#39;, }, rotation: 1 * Math.PI, circumference: 1 * Math.PI } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ChartJS Horizintal Bar Chart. ChartJS Horizintal Bar Chart code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Citrix Licensing Count\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;width:95%\u0026#34;\u0026gt; \u0026lt;canvas id=\u0026#34;bar-chart-horizontal\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Chart(document.getElementById(\u0026#34;bar-chart-horizontal\u0026#34;), { type: \u0026#34;horizontalBar\u0026#34;, data: { labels: [\u0026#34;01/03/2021\u0026#34;,\u0026#34;01/02/2021\u0026#34;,\u0026#34;01/01/2021\u0026#34;,\u0026#34;12/31/2020\u0026#34;,\u0026#34;12/30/2020\u0026#34;,\u0026#34;12/29/2020\u0026#34;,\u0026#34;12/28/2020\u0026#34;,\u0026#34;12/27/2020\u0026#34;,\u0026#34;12/26/2020\u0026#34;,\u0026#34;12/25/2020\u0026#34;,\u0026#34;Total Licences\u0026#34;], datasets: [ { label: \u0026#34;Peak Usage\u0026#34;, backgroundColor: [\u0026#34;#28B463\u0026#34;, \u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#808B96\u0026#34;], data: [249,318,302,1402,1535,1498,1516,271,273,269,8000] } ] }, options: { legend: { display: false }, title: { display: true, text: \u0026#34;Citrix License Usage (MPS_PLT_CCU)\u0026#34; } } });\t\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Read all the documentation on how to create ChartJS files. Very important steps need to be followed. All the Web pages to show Citrix Licence counts are updated very hour. The process to update the Web Pages is scheduled with vRealize Automation Orchestrator. The code to get the license information and create the web pages is all done with PowerShell. The License values collected every hour are saved in a Microsoft SQL Database. The process to save the data and create the web pages can be done many different ways. I outlined how I do it in my environment. What I feel was important to show was the finished HTML code to create the ChartJS Web Pages that I display in vRealize Operations. The data could be from any source that makes sense in your environment. This makes a great way to graphically show data within vROPS from data that is saved outside of vROPS.\nLink to my blog post that shows how to use the \u0026ldquo;Test Display Widget\nLink to ChartJS\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2021-01-03T00:00:00Z","image":"https://vcrocs.info/creating-charts-with-chartjs-and-displaying-in-vrealize-operations/featured-image_hu_1c996b8cd23749d1.png","permalink":"https://vcrocs.info/creating-charts-with-chartjs-and-displaying-in-vrealize-operations/","title":"Creating Charts with ChartJS and displaying in vRealize Operations"},{"content":"ESXi on Raspberry PI\nI have always be fascinated with everything that you can do with a Raspberry PI. When VMware released their Fling to install ESXi on the Raspberry PI I have become even more fascinated. An ESXi Host for the Home Lab for $50. Sign me up.\nDuring VMworld 2020, VMware announced that they would be releasing a Fling to install ESXi on the Raspberry PI. Before the VMworld session was over I had a new Raspberry PI ordered and it was delivered the next day, ahead of the Fling release, so that I would be ready.\nI downloaded the ESXi Arm Edition Fling as soon as I seen it was available.\nLessons Learned:\nRead all the documentation on how to install ESXi on Raspberry PI. Very important steps need to be followed. If you want to use more than one USB drive for storage use this ESXi Host advanced setting - USB.arbitratorAutoStartDisabled Set to 1 Use a minimum size of 256 GB for the USB drive. Read the Fling Documentation for preferred USB drive to use. The ARM version of Ubuntu server installed without any issues. I installed the Apache Web Server and Samba on the ARM Ubuntu Server and had no issues. Hugo Blog files run GREAT on ARM version of Ubuntu Server, with Apache web server, running on ESXi, installed on Raspberry PI. I am going to be adding information to this Blog post as I discover more cool information with running ESXi on Raspberry PI. Check back often.\nLink to ESXi Arm Edition - VMware Fling\nESXi 7.0 on RAspberry PI - Cool Host Name :) ESXi 7.0 on RAspberry PI Login Screen: ESXi Managemnet Screen: ESXi on Raspberry PI added to vCenter: ESXi on Raspbeery PI added to vRealize Operations 8.2: If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-10-11T00:00:00Z","image":"https://vcrocs.info/esxi-on-raspberry-pi/featured-image_hu_a0a6835c8677f47d.png","permalink":"https://vcrocs.info/esxi-on-raspberry-pi/","title":"ESXi on Raspberry PI"},{"content":"How to use vRealize Operations as your monitoring \u0026ldquo;Single Pane of Glass\u0026rdquo;\nFor the 2020 VMware VMworld my presentation for the vBrownbag TechTalks was selected.\nLearn how to use the \u0026ldquo;Text Display\u0026rdquo; Widget on Dashboards to display data that is not within vRealize Operations. Display Weather Forecasts, Radar Maps, Data from SQL DBs on your next NOC Dashboard.\nSocials: Twitter: https://twitter.com/vBrownBag Facebook: https://facebook.com/vBrownBag iTunes: http://bit.ly/vbrownbagitunes https://vBrownBag.com is a community of people who believe in helping other people. Specifically we work in IT infrastructure and we help other people in the IT industry to better their carreers by educating. Most frequent activity is producing the vBrownBag podcast. vBrownBag also attends global conferences to produce TechTalks and theater sessions.\nAbout vBrownBag Podcasts The vBrownBag crew host podcasts where community members present on topics that will help others in the community. Some podcast series are aimed at helping people achieve certifications. Other podcasts help community members learn an entirely new subject area. We also cover areas like storage or automation. The podcast has been running weekly since 2010.\nvBrownBag TechTalks The vBrownBag crew love IT conferences, the only place where we actually see each other, the awesome people who are our presenters and the community members who follow the podcast. The conferences are also a great place to generate some more community learning content.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-10-01T00:00:00Z","image":"https://vcrocs.info/vbrownbag-vmworld-presentation/featured-image_hu_46f970bba3550691.png","permalink":"https://vcrocs.info/vbrownbag-vmworld-presentation/","title":"vBrownbag VMworld Presentation"},{"content":"vRealize Operations - Dashboards:\nI was recently reviewing some sample custom vRealize Operations Dashboards and I seen where some of the Dashboards had custom text and images. I reviewed how they included the text and images and in some of the sample Dashboards they used the “Text Display” Widget and used a url for the content. They would display images saved on a web server. I thought this was interesting and started reviewing what else could be displayed by using a url with the \u0026ldquo;Text Display\u0026rdquo; Widget.\nThe first thought I had was to display the weather for both the data center locations where I work. This could be used with a NOC type Dashboard. I looked online for a weather widget site and got the code to display the weather for the specific locations. If you go to Administration/Configuration/Metric Configurations/TxtWidgetContent you can create html files to save the widget code. See examples in images below. You can display any Widget data from any web site that provides widgets using the \u0026ldquo;Text Display\u0026rdquo; Widget.\nAfter I successfully added weather widgets I wanted to get more serious and show data from a SQL Database. I use a SQL database to store data from some vRealize Automation Day 2 BluePrints that I created. Some example BluePrints where I store data in a SQL DB are Server Builds and Server Decomissions. I created a web page that displayed the SQL Data and added another “Text Display” widget to the Dashboard. I used the url of the web page and assigned it to the widget and now I am also able to show SQL Data on a Dashboard.\nThe reason I wanted to show Weather and SQL data is to use vRealize Operations Dashboards as the “Single Pane of Glass” for all monitoring. I have never seen a demo from VMware to use the “Text Display” Widget this way but I think this is awesome. This could completely change the way I use vRealize Operations Dashboards. There are not always vRealize Operations Management Packs available and this provides a cool way to show any data on a Dashboard. The data will be for reference only but it does allow the \u0026ldquo;Single Pane of Glass\u0026rdquo;.\nvRealize Operations Dashboard: Here is a closeup of the Dashboard so you can see the details.\nWidget Code: Administration/Configuration/Metric Configurations/TxtWidgetContent\nHere is a closeup. Create a html file and paste the Widget Code.\nSelect the html file created to show the widget data\nurl Page: The url web page could be a static or dynamic page. Use whatever works best for you. I think this opens up so many possibilities of what you can display on a Custom Dashboard. If you want to take it a step further you could publish the Custom vRealize Operations Dashboard with Workspace One and provide the data to anyone in your organization even if they are not a vRealize Operations user. Cool Shit!\nThe \u0026ldquo;Text Display\u0026rdquo; Widget should be renamed to the \u0026ldquo;Cool Shit\u0026rdquo; Widget!\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-07-17T00:00:00Z","image":"https://vcrocs.info/text-display-widget-more-powerful-than-just-displaying-text-on-a-dashboard.../featured-image_hu_9f9a93d48f7f1389.png","permalink":"https://vcrocs.info/text-display-widget-more-powerful-than-just-displaying-text-on-a-dashboard.../","title":"Text Display Widget - More Powerful than just displaying text on a Dashboard..."},{"content":"Working from Home | My New Homelab.\nSmart Desk: Like most people that work in the Technology Field, I have been \u0026ldquo;WFH\u0026rdquo; (Working From Home) since the beginning of March. I already had a dedicated office area but it wasn’t setup for full time employment. I always liked a L-Shaped desk and I had this layout by pushing to straight desks together. Worked OK but could use improvement.\nSo I started looking at new desks. I had two requirements, L-Shaped and I also wanted my next desk to be a standup Desk. I reviewed a lot of desks online and I decided to go with the L-Shaped Smart Desk from Autonomous. I am the type of person that usually likes to “touch and feel” this type of purchase to make sure the quality is good but after reviewing what other people were saying about Autonomous I decided to make the purchase. My biggest concern was damage during shipping.\nWhen the desk was delivered I was impressed by how well the desk was packaged. Autonomous does a great job making sure nothing gets damaged. Everything arrived OK and there was no damage or missing pieces. The desk is heavy to put together by yourself. I took my time so I wouldn’t damage anything and the process to assemble was very easy. The directions were good. All the holes in the top are pre-drilled, which make it very nice to align all the pieces. The corners on the top are all slightly rounded and the edges are all eased. That really adds to the look and feel. I was impressed. I’m sure this also helps in shipping so that the top doesn’t get damaged. The quality of the top is so nice that a mouse does not work without a mouse pad. I did have to purchase a mouse pad to use with this desk. A black mouse pad on a black top looks good. I like the wire management included with the desk. I think I will be ordering a couple of the Autonomous Desk Clamp Power Outlets to make wire management even better. All my Apple Space Grey items look good on the Black top. I am anxious to see how often I will use the desk while standing and if I will like to be standing while programming. There is enough room on the L-Shaped desk to hold (3) monitors, (2) Mac Mini’s, external drives, iPad, iPhone, MacBook Pro, AirPods, HomePod, Microsoft Surface Pro, Dell Work Laptop, Shure Mic and a Google Home (Yes I am an Apple Fanboy). Happy with my Smart Desk decision.\nVMware Home Lab: In addition to upgrading my Home Office Desk, it was time to upgrade my VMware Home Lab. My HPE GEN 6 DL380 was not on the VMware supported hardware list anymore and generated a lot of heat and noise in the Home Office.\nI already had an Apple Mac Mini with VMware Fusion installed but it didn’t have a lot of memory installed. I used it to run some small VMs but mainly used the DL380 for my Homelab. So I upgraded the memory on the Mac mini to 64 GB. I also purchased a second Mac Mini and upgraded the memory to 64 GB. So now my Homelab consists of (2) Mac Mini’s with a total of 128 GB memory. I have multiple nested ESXi 7.0 Hosts installed on each Mac Mini using VMware Fusion. The setup has worked well for me so far. No noise and heat like I had with the DL380. Plus I can use the Mac Mini’s for more than just a Homelab. Turn on the ESXi Hosts when needed and then just power off to do my normal everyday computing. If I don’t want to run the VMs on ESXi, I can also just run VMs directly on Fusion.\nSo a month after making my Home Lab work with Apple Mac Mini’s, Apple decides to make all new Apple computers with ARM processors. I guess my next Home Lab upgrade will not be Apple Computers. I will probably look at using Intel NUCs or something like the NUC for my next Home Lab.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-07-11T00:00:00Z","image":"https://vcrocs.info/smart-desk-and-homelab./featured-image_hu_47eca9da8bf6c622.png","permalink":"https://vcrocs.info/smart-desk-and-homelab./","title":"Smart Desk and Homelab."},{"content":"Infoblox 1.1 plugin for vRA 8.1\nI recently setup the Infoblox 1.1 plugin for vRA 8.1 and ran into an interesting challenge that I thought I would share. The setup of the plugin is straight forward; follow the documentation and you’ll likely be set. However, if you use custom DNS views in Infoblox (internal, external, etc.) then some additional configuration is required that’s not easily identified. Out of the box, the Infoblox IPAM integration comes with only a few default properties. I left these values in place when creating my first VM build blueprint but the Infoblox_AllocateIP action would always fail. Action Run logs under the Extensibility tab are a great way to troubleshoot. They were displaying the following error:\nThe fix for this issue is to add a custom property called Infoblox.IPAM.Network.dnsView and set the appropriate value. This property needs to be added in both the integration settings as well as in the blueprint.\nIntegration Settings: Blueprint: Once you complete these steps, you’ll find that the Infoblox_AllocateIP action will successfully complete.\nFor the record, the ability to test deployments without actually kicking off a build is fantastic. I confirmed that the test was accurate by running a deployment and verifying that an IP was assigned and a DNS record was registered.\nHope this helps.\nDan Grove\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-06-14T00:00:00Z","image":"https://vcrocs.info/infoblox-1.1-plugin-for-vra-8.1/featured-image_hu_72541c703efebffa.png","permalink":"https://vcrocs.info/infoblox-1.1-plugin-for-vra-8.1/","title":"Infoblox 1.1 plugin for vRA 8.1"},{"content":"IT Reality Podcast\nPodcasts I have been listening to Podcasts for many years. Everyday while driving to and from work I would listen to a Podcast. Anytime I traveled to a conference I would download hours worth of Podcasts to listen to while flying. Most of the Podcasts I listen to are Technology related. Here are some of my favorites:\nIT Reality Virtual Speaking Podcast Develop Great Managers vBrown Bag Automators Mac Power Users Twit Network of Podcasts I have had an interest to be a guest on a Podcast for several years. I always thought to myself, when I get to a point in my career that I could share my knowledge, I would try and be a guest on a Podcast. After doing several presentations about VMware vRealize Automation, I wanted the next step to be a guest spot on a Podcast to reach a larger audience. When I saw a post on Twitter that the IT Reality Podcast was looking for everyday Technology people passionate about a topic and willing to share the knowledge, I reached out to them to show my interest in appearing on their Podcast. We had a meeting and the Hosts felt I had a good story to tell, so we scheduled a time to record the Podcast. The hosts, Vince Wood and Sam Larch, were awesome to work with. They also invited Nathan Bennett to be on the episode as a guest and he was also great to talk with. The experience to talk with these guys was a good way for me to appear on a Podcast. While recording the Podcast I learned some knowledge from Nathan that I will use in my current Automation environment.\nIf it wasn’t for other people sharing knowledge by creating Blogging web sites or appearing on Podcasts, I wouldn’t have the knowledge that I do today. I hope that I can give back to the vCommunity like they have done for me. I would encourage anyone who wants to share their knowledge to Just Do It! Create a Blogging Web Site or start attending local User Groups and “Little Hacks”. It can be very rewarding.\nLink to Episode What is vRealize Automation - Episode 21\nEnjoy!\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-05-29T00:00:00Z","image":"https://vcrocs.info/what-is-vrealize-automation-episode-21/featured-image_hu_e2fc09471410f5e9.png","permalink":"https://vcrocs.info/what-is-vrealize-automation-episode-21/","title":"What is vRealize Automation - Episode 21"},{"content":"Options to use PowerShell Modules\nI wanted to review VMware vRA (vRealize Automation) 8.x as a Microsoft Windows Server Admin. Most of the reviews you see are creating Linux VMs and customizing the OS using tools for Linux. I am going to create Windows Server VMs and customize the OS using a new feature added to vRA 8.1, Action Based Extensibility (ABX) with PowerShell. No vRO (Orchestrator) Workflows will be used. This is completely different compared to how I create Windows Servers with vRA 7.6.\nThe enterprise organizations that I have worked for are 90%+ Microsoft Windows Servers. It is important for me to have vRA be able to create Windows Servers and make all configuration changes using PowerShell.\nYou could also use this technique to make changes to a Linux VM using the PowerCLI commands Invoke-VMscript and Copy-VMGuestFile. I did create a Blog Post on this topic.\nBluePrint Requirements: I want to manually enter the VM Name. I don’t want an auto generated name. After the Windows Server VM is created I want to to able to add vCenter TAGS to VM, make some OS changes, and install software based on values entered on the BluePrint.\nWhat I created to accomplish the requirements: Created a BluePrint. See included code and screen shot.\nCreated a PowerShell Action. See included code and screen shot.\nCreated a Subscription. See Screenshot.\nSample Code and Screen Shots:\u0026mdash; BluePrint: The properties under resources in the yaml code can be used like parameters in a PowerShell script. Since I have a background in PowerShell that is how I am using the properties. When you deploy the BluePrint the values entered that I defined will not be used until the Action runs. The Action will run after the “Compute post provision” event is triggered with the subscription. Those values will be passed from the BluePrint to the Action. Just like passing parameters to a PS script.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 # This is the yaml code for the BluePrint # Created by vCrocs.info formatVersion: 1 inputs: cpuCount: type: integer description: Number of virtual processors default: 2 totalMemoryMB: type: integer description: Machine virtual memory size in Megabytes default: 2048 VMname: type: string default: DBH00 SQL: type: boolean description: Is this a SQL Server? default: false D-Drive-Size: type: integer description: \u0026#39;Enter D:\\ Size in GB\u0026#39; default: 10 minimum: 5 maximum: 50 TEST: type: string enum: - \u0026#39;Yes\u0026#39; - \u0026#39;No\u0026#39; resources: Cloud_vSphere_Machine_1: type: Cloud.vSphere.Machine properties: name: \u0026#39;${input.VMname}\u0026#39; SQL: \u0026#39;${input.SQL}\u0026#39; DDRive: \u0026#39;${input.D-Drive-Size}\u0026#39; imageRef: 2019-TEMPLATE cpuCount: \u0026#39;${input.cpuCount}\u0026#39; totalMemoryMB: \u0026#39;${input.totalMemoryMB}\u0026#39; TEST: \u0026#39;${input.TEST}\u0026#39; constraints: - tag: \u0026#39;quick_start_run:1\u0026#39; \u0026mdash;Using the Inputs Screen helps you build the BluePrint yaml code. I found this very useful since I am still learning the proper yaml formatting.\nAction: In my PowerShell code I am using Write-Host to help me understand how the BluePrint passes values to the Action. I use to troubleshoot and understand how it is working. I am able to take values from the payload customProperties and assign to variables. The customProperties are defined in the BluePrint yaml code as resources/properties. I can then make decisions in the code based on these values.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # This is the PowerShell code for the Action function handler($context, $payload) { Write-Host \u0026#34;VM Name Created: \u0026#34; $payload.resourceNames[0] Write-Host \u0026#34;D-DRive Size: \u0026#34; $payload.customProperties.DDRive Write-Host \u0026#34;SQL: \u0026#34; $payload.customProperties.SQL $VMname = $payload.resourceNames[0] Write-Host \u0026#34;VM Name Variable: \u0026#34; $VMname $SQL = $payload.customProperties.SQL $DDrive = $payload.customProperties.DDRive #Connect to vCenter Connect-VIServer -server 192.168.1.1 -User \u0026#34;administrator@vsphere.local\u0026#34; -Password \u0026#34;VMware#1\u0026#34; -Protocol https -Force #Assign Tag to new VM New-TagAssignment -Tag \u0026#39;TAG-vRA-Built\u0026#39; -Entity $VMname if($SQL -eq \u0026#39;true\u0026#39;){ New-TagAssignment -Tag \u0026#39;TAG-SQL-Server\u0026#39; -Entity $VMname } # End if return $payload } Subscription: Lets compare vRA 7.6 vs 8.1 vRA 7.6:\nI would create a BluePrint with a custom form in vRA 7.6. I would pass the field values from the custom form as parameters to a PowerShell script on a PowerShell Host.\nvRA 8.1:\nUsing ABX and a subscription in vRA 8.1 eliminates the need to have a Windows PowerShell host and the PowerShell script has no parameters. The vRA 8.x appliance is the PowerShell Host. Less moving parts to complete a Windows Server Build in vRA 8.1.\nLessons Learned: I will need to learn yaml. The process to Create BluePrints will be much different in vRA 8.x. A lot of the PowerShell code and logic I use in vRA 7.6 will be able to be reused. I will not need as many VMs for the installation and administration of vRA 8.x. If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-05-17T00:00:00Z","image":"https://vcrocs.info/vrealize-automation-8.1-powershell-abx/featured-image_hu_ce71ce58d68ad8d.png","permalink":"https://vcrocs.info/vrealize-automation-8.1-powershell-abx/","title":"vRealize Automation 8.1 - PowerShell ABX"},{"content":"Static Site Generator\nI have reviewed and tried a lot of different ways to create a personal Blog so that I can share Code, Knowledge, Pictures and do Reviews. After spending some time with Hugo it has become the framework that I have liked the most. The Theme \u0026ldquo;Hugo Future Imperfect\u0026rdquo; is also the Hugo Theme that I have liked the most.\nSome of the ways I have reviewed creating a Blog require a monthly fee to host the web site for you. I am using Github to host the web site where there is no monthly cost. I like how you can add Google Analytics code to all the pages within a Hugo Site. To add Google Analytics all you have to do is edit one line within the config.toml file.\nTo create the content for the Blog I use Visual Studio Code to edit the files. I have been reviewing Forestry CMS to edit and create the pages.\nTo create the web pages Hugo is so FAST! It is the fastest file creation framework that I reviewed. Is is also very easy to use.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # To create the static web pages you just run the hugo command. Mac-mini:hugo dalehassinger$ hugo | EN -------------------+----- Pages | 61 Paginator pages | 0 Non-page files | 0 Static files | 25 Processed images | 0 Aliases | 16 Sitemaps | 1 Cleaned | 0 # To run the Hugo Web Server and see real-time changes you are making # to your web site you just run hugo server and open the web page # http://localhost:1313/ Mac-mini:hugo dalehassinger$ hugo server Building sites … | EN -------------------+----- Pages | 61 Paginator pages | 0 Non-page files | 0 Static files | 25 Processed images | 0 Aliases | 16 Sitemaps | 1 Cleaned | 0 Built in 43 ms Watching for changes in /Users/dalehassinger/hugo/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Users/dalehassinger/hugo/config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop One of the main items I wanted a Blog site for, is to share code I create. I could just create a Public Github repository, but that just isn\u0026rsquo;t as pleasing to the eyes as a personal Blog can be.\nThe first person I know that created a Hugo site is AdminWillie. I met him at the Central PA VMUG meetings and I also started attending the Blair County Little Hacks that he organizes. A great example of the vCommunity sharing ideas.\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-04-26T00:00:00Z","image":"https://vcrocs.info/hugo-static-site-generator/featured-image_hu_e02c5cccd0a6351c.png","permalink":"https://vcrocs.info/hugo-static-site-generator/","title":"Hugo | Static Site Generator"},{"content":"Add disk to a Remote Windows Server | VMware VM\nPowerShell Code Powershell code to add disk to a Remote Windows Server | VMware VM:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #The Following code shows how to add a New Drive, bring drive online, initialize and format: #Connect to vCenter Connect-VIServer vCenter.vCROCS.info #Add new drive to VM New-HardDisk -VM $VMNAME -CapacityGB $DISKSIZEGB -StorageFormat Thin -Controller ‘SCSI Controller 1’ #Make disk online invoke-command -computername $VMNAME -scriptblock {Set-Disk 2 -isOffline $false} #Initialize disk invoke-command -computername $VMNAME -scriptblock {Initialize-Disk 2 -PartitionStyle GPT} #Create Partition invoke-command -computername $VMNAME -scriptblock {New-Partition -DiskNumber 2 -UseMaximumSize -DriveLetter E} #Format drive invoke-command -computername $VMNAME -scriptblock {Format-Volume -DriveLetter E -FileSystem NTFS -NewFileSystemLabel ‘Data’ -AllocationUnitSize 16384 -Confirm:$false} #------------------------------------------------------------------------- #The Following Code will show disk “Allocation Unit Size” on a remote Windows Server: $C = Invoke-Command -ComputerName $VMname {Get-WmiObject -Class Win32_Volume -Filter “DriveLetter = ‘C:\u0026#39;” | Select-Object BLOCKSIZE} $C_AllocationUnitSize = ($C.BLOCKSIZE/1024) $C_AllocationUnitSize = ‘Disk Allocation Unit Size: ‘ + $C_AllocationUnitSize + ‘k’ $C_AllocationUnitSize If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-04-19T00:00:00Z","image":"https://vcrocs.info/add-disk-to-a-remote-windows-server-vmware-vm/featured-image_hu_ce71ce58d68ad8d.png","permalink":"https://vcrocs.info/add-disk-to-a-remote-windows-server-vmware-vm/","title":"Add disk to a Remote Windows Server | VMware VM"},{"content":"Clay Thrower | Powered By: Raspberry PI\nLink to my Raspberry PI powered Clay Thrower.\nThe first project I ever did with a Raspberry PI.\nAlso my first project using Python and PHP.\nYouTube Video If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-04-19T00:00:00Z","image":"https://vcrocs.info/clay-thrower-powered-by-raspberry-pi/featured-image_hu_a0a6835c8677f47d.png","permalink":"https://vcrocs.info/clay-thrower-powered-by-raspberry-pi/","title":"Clay Thrower | Powered By: Raspberry PI"},{"content":"Automation with Zero Trust\nPowerShell Code There are two PowerCLI commands that have become my best friends in a Zero Trust Environment.\nInvoke-VMScript - Use to run scripts on VMs. Copy-VMGuestFile - Use to copy files to/from VMs. In this example you can use Invoke-VMScript to run commands on a VM to install Trend Deep Security. All commands run with VM in a zero trust state.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $VMName = \u0026#39;VM Name\u0026#39; #Copy file to the VM $PSText = \u0026#39;wget https://server01.vCrocs.info/software/agent/Ubuntu_18.04/x86_64/agent.deb\u0026#39; Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run the install of the agent that was copied. $PSText = \u0026#39;sudo -S \u0026lt;\u0026lt;\u0026lt; \u0026#34;Password1\u0026#34; sudo apt install ./agent.deb\u0026#39; Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to reset the agent $PSText = \u0026#39;sudo -S \u0026lt;\u0026lt;\u0026lt; \u0026#34;Password1\u0026#34; sudo /opt/ds_agent/dsa_control -r\u0026#39; Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to config the agent $PSText = \u0026#39;sudo -S \u0026lt;\u0026lt;\u0026lt; \u0026#34;Password1\u0026#34; sudo /opt/ds_agent/dsa_control -a dsm://server01.vCrocs.info:4120/\u0026#39; Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to get service staus. $PSText = \u0026#39;service ds_agent status\u0026#39; $DeepSecurityServiceStatus = Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput In this example you can use Copy-VMGuestFile to copy a file to a VM and use invoke-VMScript to run commands on a VM to install agent. All commands run with VM in a zero trust state.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $VMName = \u0026#39;VM Name\u0026#39; Copy-VMGuestFile -Source G:\\splunkforwarder-8.0.1-6db836e2fb9e-linux-2.6-amd64.deb -Destination /home/vcrocsadmin -VM $VMNAME -LocalToGuest -GuestCredential $SSHcredsmadmin #Run the install of the agent that was copied. $PSText = \u0026#39;sudo -S \u0026lt;\u0026lt;\u0026lt; \u0026#34;Password1\u0026#34; sudo apt install ./splunkforwarder-8.0.1-6db836e2fb9e-linux-2.6-amd64.deb\u0026#39; Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to config the agent $PSText = \u0026#39;sudo -S \u0026lt;\u0026lt;\u0026lt; \u0026#34;Password1\u0026#34; sudo /opt/splunkforwarder/bin/splunk enable boot-start --accept-license --answer-yes --no-prompt --seed-passwd Password1\u0026#39; Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to config the agent $PSText = \u0026#39;sudo -S \u0026lt;\u0026lt;\u0026lt; \u0026#34;Password1\u0026#34; sudo /opt/splunkforwarder/bin/splunk set deploy-poll server01.vCrocs.info:8089\u0026#39; Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to get service staus. $PSText = \u0026#39;sudo -S \u0026lt;\u0026lt;\u0026lt; \u0026#34;Password1\u0026#34; service splunkd status\u0026#39; Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-04-19T00:00:00Z","image":"https://vcrocs.info/one-way-to-do-automation-in-a-zero-trust-environment/featured-image_hu_ce71ce58d68ad8d.png","permalink":"https://vcrocs.info/one-way-to-do-automation-in-a-zero-trust-environment/","title":"One way to do Automation in a Zero Trust Environment"},{"content":"PowerCLI Basics\nPowerCLI Code Some basic PowerCLI commands to get started. I have some simple scripts in production that are 10 lines of code and I have some scripts that do a lot that are 2500 lines of code. Take the time to learn all the commands that are available and you will be amazed at what you can automate.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #Here are some basic commands that you can keep adding additional code #and get more precise on what you want to see. #Connect to a vCenter Connect-VIServer vcsa.domain.org #Disconnect from vCenter and not be prompted Disconnect-VIServer vcsa.domain.org -confirm:$false #Get VM Listing #Shows all VMs Get-VM #Shows all VMs sorted by Name Get-VM | Sort-Object Name #Shows all VMs sorted by Name that are Powered On Get-VM | Where-Object {$_.Powerstate -eq \u0026#39;PoweredOn\u0026#39;} | Sort-Object Name #Shows all VMs sorted by Name, that are Powered On and only shows #Name,MemoryGB,NumCpu Get-VM | Where-Object {$_.Powerstate -eq \u0026#39;PoweredOn\u0026#39;} | Sort-Object Name | Select-Object Name,MemoryGB,NumCpu Why use PowerCLI Picking a scripting language for automation can be a hard decision. My #1 reason to use PowerShell was because of the PowerCLI PowerShell module that VMware maintains. You can use the PowerCLI module to automate almost all of the VMware Products.\nThere hasn\u0026rsquo;t been any automation process that I have not been able to use PowerShell to automate. PowerShell has a great collection of modules available to use with different products. PowerShell is also easy to use with Products that make APIs available.\nHappy Scripting!\nIf you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-04-19T00:00:00Z","image":"https://vcrocs.info/powercli-getting-started/featured-image_hu_ce71ce58d68ad8d.png","permalink":"https://vcrocs.info/powercli-getting-started/","title":"PowerCLI Getting Started"},{"content":"Add Windows Server Registry Values\nPowerShell Code Add Registry Values to Windows Server\n1 2 3 4 5 6 #vCrocs Registry Changes invoke-command -computername $FQDNVMname -ScriptBlock {new-Item HKLM:\\SOFTWARE\\vCrocs -f } invoke-command -computername $FQDNVMname -ScriptBlock {param ($SG) Set-ItemProperty hklm:\\software\\vCrocs -Name SupportGroup -Value \u0026#34;$SG\u0026#34; -Force} -ArgumentList $SG invoke-command -computername $FQDNVMname -ScriptBlock {param ($APP) Set-ItemProperty hklm:\\software\\vCrocs -Name Application -Value \u0026#34;$APP\u0026#34; -Force} -ArgumentList $APP invoke-command -computername $FQDNVMname -ScriptBlock {param ($LOC) Set-ItemProperty hklm:\\software\\vCrocs -Name Location -Value \u0026#34;$LOC\u0026#34; -Force} -ArgumentList $LOC invoke-command -computername $FQDNVMname -ScriptBlock {param ($SL) Set-ItemProperty hklm:\\software\\vCrocs -Name ServiceLevel -Value \u0026#34;$SL\u0026#34; -Force} -ArgumentList $SL If you found this Blog article useful and it helped you, Buy me a coffee to start my day. ","date":"2020-04-19T00:00:00Z","image":"https://vcrocs.info/powershell-code-to-add-custom-registry-values/featured-image_hu_ce71ce58d68ad8d.png","permalink":"https://vcrocs.info/powershell-code-to-add-custom-registry-values/","title":"Powershell code to add custom Registry values"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://vcrocs.info/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://vcrocs.info/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]