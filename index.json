



























































































































































































































































































































































































































































































[{"categories":["PowerBlock"],"contents":" VMware PowerBlock | August 2022     The August PowerBlock is absolutely going to be a well attended event. We are gong to have an all-star lineup, of highly qualified automation engineers, including Ariel Sanchez, Tom Gillaspy, Chris McClanahan, Dale Hassinger and our powerblock discussing a variety of topics.\nHere is the general outline for the conversation:\n How do you get started with automation? What does success look like? What are some of the common mistakes / misperceptions when getting started with automation? What are some examples of customer success using vRealize Automation?         Why Automate? How to get started? What does success look like? What are some common mistakes / misperception\u0026rsquo;s Examples of customer success  ","date":"August 19, 2022","image":"https://www.vcrocs.info/images/post/vra01_hu42c36f05f52c15c332de45598136fdda_24307_650x0_resize_box_3.png","permalink":"/blog/vmware-powerblock-08-2022/","title":"VMware PowerBlock | August 2022"},{"categories":["SaltStack Config"],"contents":" Using SaltStack Config api for Automation from vRA Catalog or cmd    A personal goal of mine for 2022 was to start doing more with Python when working with VMware SaltStack Config. As a Windows Admin most of my automation was done with PowerShell. All the examples you see in the salt documentation are written in Python, so to use Python for some processes makes sense.\nI had a use case that made sense to use Python. I want to schedule reboots of AWS EC2 instances using SaltStack Config. For Servers that are on-prem I would always automate the process to create a server reboot scheduled task in vCenter. With AWS I want to use VMware SaltStack Config to schedule the Server Reboot.\nManual Steps:\n Create a SaltStack Config Job to do the reboot.\nI create a job named \u0026ldquo;vRA | Server Reboot\u0026rdquo;. This job will be used for all scheduled server reboots. Copy the Python Code below and create a ScheduleServerReboot.py file that will be copied to the SSC server.  The Python Code completes the following steps:\n Creates a Target that uses the grain \u0026ldquo;id\u0026rdquo; and will only target the Server that you want to reboot. Creates a Run Once Schedule to use the job and new target that was created. Sends an email to show that the run once schedule to reboot server was created.   SaltStack Config Server:  My SaltStack Config Server (SSC) is what VMware provides when using Life Cycle Manager (LCM) running Photon OS.     Python Code: # --- Python Code --- # --- In my code I show the Password. In Production DO NOT DO THIS. # --- There are so many different ways to include encrypted PWs in the code.  # --- Use what works best in your environment.  # example to run the script # python3 /scripts/ScheduleServerReboot.py -name \u0026#39;2019DC\u0026#39; -dateTime \u0026#39;2022-06-25T23:00\u0026#39;  import argparse import pprint import json from datetime import datetime from datetime import timedelta import random import smtplib, ssl from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart  # --- Generate a random ID number randomNumber = random.randint(0,1000) randomNumber = \u0026#39;0000\u0026#39; + str(randomNumber) randomNumber = randomNumber[-4:]  print(\u0026#39;ID:\u0026#39;,randomNumber)  # --- parse arguments parser = argparse.ArgumentParser(description=\u0026#34;Create Targets\u0026#34;, formatter_class=argparse.ArgumentDefaultsHelpFormatter) parser.add_argument(\u0026#34;-name\u0026#34;, help=\u0026#34;Target Name\u0026#34;) parser.add_argument(\u0026#34;-dateTime\u0026#34;, help=\u0026#34;Schedule Date | Time\u0026#34;)  args = vars(parser.parse_args())  # --- Set up variables argName = args[\u0026#34;name\u0026#34;] argDateTime = args[\u0026#34;dateTime\u0026#34;] argDate = argDateTime[0:10]  # --- Print the variables print(\u0026#39;Server Name: \u0026#39;,argName) print(\u0026#39;Date | Time: \u0026#39;,argDateTime)  # --- Connect to SSC Server host = \u0026#39;https://192.168.86.110\u0026#39; user = \u0026#39;root\u0026#39; password = \u0026#39;HackMe!\u0026#39;  from sseapiclient.tornado import SyncClient client = SyncClient.connect(host, user, password, ssl_validate_cert=False)  # --- Check to make sure minion exists minionName = \u0026#39;\u0026#39; minionReturn = client.api.minions.get_minion_presence(minion_id = argName) #print(targetReturn)  for x in minionReturn.ret[\u0026#39;results\u0026#39;]:  #print(x)  minionName = x[\u0026#39;minion\u0026#39;]  print(\u0026#39;minionName:\u0026#39;, minionName)  if minionName == \u0026#39;\u0026#39;:  print(\u0026#39;Minion not found!\u0026#39;)  minionExists = \u0026#39;false\u0026#39; else:  print(\u0026#39;Minion found!\u0026#39;)  minionExists = \u0026#39;true\u0026#39;   # --- Create Target ID | Name  targetID = \u0026#39;id:\u0026#39; + argName  targetName = \u0026#34;vRA | Reboot | \u0026#34; + argName + \u0026#39; | \u0026#39; + argDate + \u0026#39; | ID:\u0026#39; + randomNumber  print(\u0026#39;Target ID:\u0026#39;,targetID)  print(\u0026#39;Target Name:\u0026#39;,targetName)   # --- Create New SSC Target  client.api.tgt.save_target_group(tgt={\u0026#39;*\u0026#39;: {\u0026#39;tgt_type\u0026#39;: \u0026#39;grain\u0026#39;, \u0026#39;tgt\u0026#39;:targetID}}, name=targetName)   # --- Get UUID of new Target Created  targetReturn = client.api.tgt.get_target_group(name=targetName)  for x in targetReturn.ret[\u0026#39;results\u0026#39;]:  #print(x)  targetUUID = x[\u0026#39;uuid\u0026#39;]  print(\u0026#39;Target UUID:\u0026#39;, targetUUID)    # --- Get UUID of Job to run in Schedule  #jobReturn=client.api.job.get_jobs()  jobName = \u0026#39;vRA | Server Reboot\u0026#39;  print(\u0026#39;Job Name: \u0026#39;,jobName)  jobReturn = client.api.job.get_jobs(name=jobName)   for x in jobReturn.ret[\u0026#39;results\u0026#39;]:  #print(x)  jobUUID = x[\u0026#39;uuid\u0026#39;]  print(\u0026#39;Job UUID:\u0026#39;, jobUUID)    # -- Create a run once Schedule  # 2022-06-21T13:21 - Date|Time format from vRA  print(\u0026#39;Schedule Time:\u0026#39;,argDateTime)   # --- Create Schedule Name  scheduleName = \u0026#39;vRA | Reboot | \u0026#39; + argName + \u0026#39; | \u0026#39; + argDate + \u0026#39; | ID:\u0026#39; + randomNumber  print(\u0026#39;Schedule Name:\u0026#39;, scheduleName)   # --- Create Run Once Schedule  scheduleReturn = client.api.schedule.save(  name=scheduleName,  schedule={\u0026#39;once\u0026#39;: argDateTime, \u0026#39;timezone\u0026#39;: \u0026#39;America/New_York\u0026#39;},  cmd=\u0026#34;local\u0026#34;,  tgt_uuid=targetUUID,  job_uuid=jobUUID  )  # --- Send Email about vRA Request using gmail. sender_email = \u0026#34;dale.hassinger@gmail.com\u0026#34; receiver_email = \u0026#34;dale.hassinger@vcrocs.info\u0026#34; password = \u0026#34;HackMe!\u0026#34;  message = MIMEMultipart(\u0026#34;alternative\u0026#34;) message[\u0026#34;Subject\u0026#34;] = \u0026#34;vRA Scheduled EC2 Reboot | \u0026#34; + argName message[\u0026#34;From\u0026#34;] = sender_email message[\u0026#34;To\u0026#34;] = receiver_email  # --- Create HTML Body if minionExists == \u0026#39;true\u0026#39;:  html = \u0026#34;\u0026#34;\u0026#34; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;A Request to reboot a AWS EC2 was run from vRA.\u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;EC2 Information:\u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;ul style=\u0026#34;list-style-type:disc\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 12px;\u0026#34;\u0026gt;\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;EC2 Name: \u0026#34;\u0026#34;\u0026#34; + argName + \u0026#34;\u0026#34;\u0026#34;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 12px;\u0026#34;\u0026gt;\u0026lt;li\u0026gt;Target Created: \u0026#34;\u0026#34;\u0026#34; + targetName + \u0026#34;\u0026#34;\u0026#34;\u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 12px;\u0026#34;\u0026gt;\u0026lt;li\u0026gt;Schedule Created: \u0026#34;\u0026#34;\u0026#34; + scheduleName + \u0026#34;\u0026#34;\u0026#34;\u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 12px;\u0026#34;\u0026gt;\u0026lt;li\u0026gt;Reboot Date | Time: \u0026#34;\u0026#34;\u0026#34; + argDateTime + \u0026#34;\u0026#34;\u0026#34;\u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 11px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;vCROCS - Automated IT \u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 10px;\u0026#34;\u0026gt;#VMware #vRealize #SaltStackConfig\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;\u0026#34;\u0026#34; elif minionExists == \u0026#39;false\u0026#39;:  html = \u0026#34;\u0026#34;\u0026#34; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;A Request to reboot a AWS EC2 was run from vRA.\u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;EC2 Information:\u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;ul style=\u0026#34;list-style-type:disc\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 12px;\u0026#34;\u0026gt;\u0026lt;li\u0026gt;\u0026lt;b\u0026gt;EC2 Name: \u0026#34;\u0026#34;\u0026#34; + argName + \u0026#34;\u0026#34;\u0026#34;\u0026lt;/b\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;The Server Name was not found in Salt! Please double check name and try again!\u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 14px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 11px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;vCROCS - Automated IT \u0026lt;/b\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;font-family: Arial, sans-serif; font-size: 10px;\u0026#34;\u0026gt;#VMware #vRealize #SaltStackConfig\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;\u0026#34;\u0026#34;  # --- HTML MIMEText objects emailHTML = MIMEText(html, \u0026#34;html\u0026#34;)  # --- Add the HTML part to MIMEMultipart message message.attach(emailHTML)  # --- Create secure connection and send HTML email context = ssl.create_default_context() with smtplib.SMTP_SSL(\u0026#34;smtp.gmail.com\u0026#34;, 465, context=context) as server:  server.login(sender_email, password)  server.sendmail(  sender_email, receiver_email, message.as_string()  )  Example of email that is sent when process completes.\n Click Here to see Larger Image of Screen Shot\n Screen Shots of the SaltStack Config Job, Target and Schedule:\nSSC Job:\n Click Here to see Larger Image of Screen Shot\n Click Here to see Larger Image of Screen Shot\nSSC Target:\n Click Here to see Larger Image of Screen Shot\n Click Here to see Larger Image of Screen Shot\nSSC Schedule:\n Click Here to see Larger Image of Screen Shot\n Click Here to see Larger Image of Screen Shot\n To run this process to reboot an AWS EC2 from the vRA catalog for Day 2 operations I used the OOTB (Out of The Box) orchestrator workflow named \u0026ldquo;Run SSH command\u0026rdquo;. I never modify the OOTB workflows. I cloned this Workflow and named it \u0026ldquo;Schedule EC2 Reboot\u0026rdquo;.\nOriginal OOTB Workflow from vRO:\n Click Here to see Larger Image of Screen Shot\nCloned Worked in vRO:\nClick Here to see Larger Image of Screen Shot\nvRA Catalog Item:\nClick Here to see Larger Image of Screen Shot\nvRA Custom Form:\nClick Here to see Larger Image of Screen Shot\nVery simple form to fill out. Enter EC2 name and Date|Time.\nThe Workflow takes the data from the vRA custom form and does an SSH Connection to the SSC server and runs a single line command using the data from the form as arguments:\npython3 /scripts/ScheduleServerReboot.py -name \u0026lsquo;2019DC\u0026rsquo; -dateTime 2022-06-25T23:00\u0026rsquo;\n  I hope the provided code and screenshots were helpful to get you started.   Lessons Learned:  If you are a Windows Server Admin that knows PowerShell, to start using Python will take some time but the languages are similar. SaltStack Config api is a great way to create Day 2 automation processes in vRA. SaltStack Config - RaaS API Documentation   Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config  When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"June 26, 2022","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-config-api/","title":"VMware vRealize SaltStack Config API"},{"categories":["SaltStack Config"],"contents":" Part 9: Using salt-api with PowerShell for Windows Server Automation    This post is to show how to use PowerShell to make RESTful API calls to SaltStack Config. This is something that I have wanted to do for awhile. I could never find any examples in my Google searches, so I took the time to learn how the examples that use curl work and translated that into PowerShell Code. I hope some Windows Server Admins will find this post helpful. I like using salt to do Windows Server Configuration Management more than remote PowerShell. You can run changes against many servers at the exact same time instead of looping thru a list of servers names.\nI am also going to look at use salt-api with vRealize Automation ABX action scripts.\nIn some previous posts I used the POSH-SSH module but when you use the salt-api, the PowerShell Module POSH-SSH is no longer needed.\n Configuration Changes to the SaltStack Config Server:  My SaltStack Config Server (SSC) is what VMware provides when using Life Cycle Manager (LCM) running Photon OS.   The following steps are what I needed to do in my Lab environment from the SSC CLI to enable salt-api:      * Always make sure you have a good snap | backup before making any changes to SSC Server     Install CherryPy:  pip3 install cherrypy  Install the PyOpenSSL package:  pip3 install pyopenssl  Generate a self-signed certificate:  salt-call --local tls.create_self_signed_cert  open firewall port 8000:  iptables -A INPUT -i eth0 -p tcp --dport 8000 -j ACCEPT  Edit /etc/salt/master file:  vi /etc/salt/master Add these lines to the /etc/salt/master file:\nexternal_auth:  pam:  root:  - .*  rest_cherrypy:  port: 8000  ssl_crt: /etc/pki/tls/certs/localhost.crt  ssl_key: /etc/pki/tls/certs/localhost.key  Restart salt-master and check service status for any errors:  systemctl restart salt-master systemctl status salt-master  Enable | Start salt-api and check service status for any errors:  systemctl enable salt-api systemctl start salt-api systemctl status salt-api  Tests to make sure SaltStack Config Changes are working:  I did all this PowerShell code from my mac. To use self-signed certs I use -SkipCertificateCheck. On a Windows OS the code is different.  # --- PowerShell Code --- Invoke-WebRequest -Uri \u0026#39;https://192.168.86.141:8000\u0026#39; -SkipCertificateCheck  Results:  StatusCode : 200 StatusDescription : OK Content : {\u0026#34;return\u0026#34;: \u0026#34;Welcome\u0026#34;, \u0026#34;clients\u0026#34;: [\u0026#34;local\u0026#34;, \u0026#34;local_async\u0026#34;, \u0026#34;local_batch\u0026#34;, \u0026#34;local_subset\u0026#34;, \u0026#34;runner\u0026#34;, \u0026#34;runner_async\u0026#34;, \u0026#34;ssh\u0026#34;, \u0026#34;wheel\u0026#34;, \u0026#34;wheel_async\u0026#34;]} RawContent : HTTP/1.1 200 OK  Server: CherryPy/8.9.1  Date: Sat, 11 Jun 2022 20:57:46 GMT  Access-Control-Allow-Origin: *  Access-Control-Expose-Headers: GET, POST  Access-Control-Allow-Credentials: true  Vary: Accept-E… Headers : {[Server, System.String[]], [Date, System.String[]], [Access-Control-Allow-Origin, System.String[]], [Access-Control-Expose-Headers,  System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 146 RelationLink : {}   Make sure you see StatusCode: 200\n  Next step is to make sure you get a token:\n  # --- PowerShell Code --- # --- In my code I show the PassWord. In Production DO NOT DO THIS. # --- There are so many different ways to include encrypted PWs in the code.  # --- Use what works best in your environment.  $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39;  # --- Set the json body $body = \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;root\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;HackMe!\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;}\u0026#39;  # --- Fetch New Token from salt master $url = \u0026#34;$saltServerAddress/login\u0026#34;  $Params = @{  Method = \u0026#34;Post\u0026#34;  Uri = $url  Body = $Body  ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck  $fetch $fetch.return.token  Results:  return ------ {@{token=6696846c802f78d5326a69b79d36e95015d37f5a; expire=1655025071.22838; start=1654981871.22838; user=root; eauth=pam; perms=System.Object[]}} 6696846c802f78d5326a69b79d36e95015d37f5a  You will see \u0026ldquo;token=\u0026rdquo; in the return data   PowerShell API Code Examples:  Run a test.ping  # --- PowerShell Code --- $minionName = \u0026#39;2019DC\u0026#39; $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; $userName = \u0026#39;root\u0026#39; $password = \u0026#39;HackMe!\u0026#39; $fun = \u0026#39;test.ping\u0026#39; $fetch = \u0026#39;\u0026#39;  # --- Set the json body $body = \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;\u0026#39; + $userName + \u0026#39;\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;\u0026#39; + $password + \u0026#39;\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;,\u0026#34;tgt\u0026#34;: \u0026#34;\u0026#39; + $minionName + \u0026#39;\u0026#34;,\u0026#34;fun\u0026#34;: \u0026#34;\u0026#39; + $fun + \u0026#39;\u0026#34;,\u0026#34;client\u0026#34;: \u0026#34;local\u0026#34;}\u0026#39;  # --- Create RESTful API Request $url = \u0026#34;$saltServerAddress/run\u0026#34;  $Params = @{  Method = \u0026#34;Post\u0026#34;  Uri = $url  Body = $Body  ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck  # --- Showing different ways to show the return data #$fetch $fetch.return $fetch.return.$minionName  Check disk.usage  # --- PowerShell Code --- $minionName = \u0026#39;2019DC\u0026#39; $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; $userName = \u0026#39;root\u0026#39; $password = \u0026#39;HackMe!\u0026#39; $fun = \u0026#39;disk.usage\u0026#39; # -salt function $fetch = \u0026#39;\u0026#39;  # --- Set the json body $body = \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;\u0026#39; + $userName + \u0026#39;\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;\u0026#39; + $password + \u0026#39;\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;,\u0026#34;tgt\u0026#34;: \u0026#34;\u0026#39; + $minionName + \u0026#39;\u0026#34;,\u0026#34;fun\u0026#34;: \u0026#34;\u0026#39; + $fun + \u0026#39;\u0026#34;,\u0026#34;client\u0026#34;: \u0026#34;local\u0026#34;}\u0026#39;  # --- Create RESTful API Request $url = \u0026#34;$saltServerAddress/run\u0026#34;  $Params = @{  Method = \u0026#34;Post\u0026#34;  Uri = $url  Body = $Body  ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck  # --- Showing different ways to show the return data $fetch.return $fetch.return.$minionName $fetch.return.$minionName.\u0026#39;C:\\\u0026#39; $fetch.return.$minionName.\u0026#39;C:\\\u0026#39;.capacity  Check Service Status  # --- PowerShell Code --- $minionName = \u0026#39;2019DC\u0026#39; $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; $userName = \u0026#39;root\u0026#39; $password = \u0026#39;HackMe!\u0026#39; $fun = \u0026#39;service.status\u0026#39; # -salt function $arg = \u0026#39;spooler\u0026#39; # -Service Name $fetch = \u0026#39;\u0026#39;  # --- Set the json body $body = \u0026#39;{\u0026#34;username\u0026#34;: \u0026#34;\u0026#39; + $userName + \u0026#39;\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;\u0026#39; + $password + \u0026#39;\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;,\u0026#34;tgt\u0026#34;: \u0026#34;\u0026#39; + $minionName + \u0026#39;\u0026#34;,\u0026#34;fun\u0026#34;: \u0026#34;\u0026#39; + $fun + \u0026#39;\u0026#34;,\u0026#34;arg\u0026#34;: \u0026#34;\u0026#39; + $arg + \u0026#39;\u0026#34;,\u0026#34;client\u0026#34;: \u0026#34;local\u0026#34;}\u0026#39;  # --- Create RESTful API Request $url = \u0026#34;$saltServerAddress/run\u0026#34;  $Params = @{  Method = \u0026#34;Post\u0026#34;  Uri = $url  Body = $Body  ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck  # --- Service Status | True = Running | False = Stopped $fetch.return.$minionName  Stop Service  # --- PowerShell Code --- $minionName = \u0026#39;2019DC\u0026#39; $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; $userName = \u0026#39;root\u0026#39; $password = \u0026#39;HackMe!\u0026#39; $fun = \u0026#39;service.stop\u0026#39; # -salt function $arg = \u0026#39;spooler\u0026#39; # -Service Name $fetch = \u0026#39;\u0026#39;  # --- Set the json body $body = \u0026#39;{\u0026#34;username\u0026#34;: \u0026#34;\u0026#39; + $userName + \u0026#39;\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;\u0026#39; + $password + \u0026#39;\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;,\u0026#34;tgt\u0026#34;: \u0026#34;\u0026#39; + $minionName + \u0026#39;\u0026#34;,\u0026#34;fun\u0026#34;: \u0026#34;\u0026#39; + $fun + \u0026#39;\u0026#34;,\u0026#34;arg\u0026#34;: \u0026#34;\u0026#39; + $arg + \u0026#39;\u0026#34;,\u0026#34;client\u0026#34;: \u0026#34;local\u0026#34;}\u0026#39;  # --- Create RESTful API Request $url = \u0026#34;$saltServerAddress/run\u0026#34;  $Params = @{  Method = \u0026#34;Post\u0026#34;  Uri = $url  Body = $Body  ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck  # --- Service Stopped | True = Stopped | False = Not Stopped $fetch.return.$minionName  Disable Service  # --- PowerShell Code --- $minionName = \u0026#39;2019DC\u0026#39; $saltServerAddress = \u0026#39;https://192.168.86.110:8000\u0026#39; $userName = \u0026#39;root\u0026#39; $password = \u0026#39;HackMe!\u0026#39; $fun = \u0026#39;service.disable\u0026#39; # -salt function $arg = \u0026#39;spooler\u0026#39; # -Service Name $fetch = \u0026#39;\u0026#39;  # --- Set the json body $body = \u0026#39;{\u0026#34;username\u0026#34;: \u0026#34;\u0026#39; + $userName + \u0026#39;\u0026#34;,\u0026#34;password\u0026#34;: \u0026#34;\u0026#39; + $password + \u0026#39;\u0026#34;,\u0026#34;eauth\u0026#34;: \u0026#34;pam\u0026#34;,\u0026#34;tgt\u0026#34;: \u0026#34;\u0026#39; + $minionName + \u0026#39;\u0026#34;,\u0026#34;fun\u0026#34;: \u0026#34;\u0026#39; + $fun + \u0026#39;\u0026#34;,\u0026#34;arg\u0026#34;: \u0026#34;\u0026#39; + $arg + \u0026#39;\u0026#34;,\u0026#34;client\u0026#34;: \u0026#34;local\u0026#34;}\u0026#39;  # --- Create RESTful API Request $url = \u0026#34;$saltServerAddress/run\u0026#34;  $Params = @{  Method = \u0026#34;Post\u0026#34;  Uri = $url  Body = $Body  ContentType = \u0026#34;application/json\u0026#34; } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck  # --- Service Disabled | True = Disabled | False = Not Disabled $fetch.return.$minionName  I hope the code was helpful to get started.   Lessons Learned:  OOTB (Out of the Box) a SaltStack Config Server is NOT setup to use CherryPY to use api calls. Using PowerShell Invoke-RestMethod is a great way to automate SaltStack Config. The more I use salt with Windows Servers the more I like how it works. So fast. Many different ways to do automation | configuration Management. To get the proper args for a salt function I always test from the CLI. SaltStack REST_CHERRYPY Documentation SaltStack EXTERNAL AUTHENTICATION SYSTEM Documentation   Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config  When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"June 10, 2022","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-config-part-09/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 9"},{"categories":["SaltStack Config"],"contents":" Salt functions that I find myself using the most.    I have been using VMware vRealize SaltStack Config for several months and I thought I would share and create my own cheat sheet to show which functions I use the most as a Windows Server admin and how to format the syntax. I still feel that I barely use all the capabilities that salt has to offer. SaltStack Config is a very Powerful tool to have available for anyone that has a vRealize Suite License. As a Windows Server admin don\u0026rsquo;t be afraid of salt because you feel it was made for Linux admins. That is NOT the case. I will be managing all Windows Server in my environment with salt. That includes VMs in vCenter and cloud native Azure VMs.\nThis cheat sheet will be updated often to show examples as my journey into the salt world continues. Check back often.\nLink to salt module Documentation\n Ping - Make sure server responds:  \u0026gt; Command: salt \u0026#34;vCROCS01\u0026#34; test.ping OR salt \u0026#34;*\u0026#34; test.ping OR salt \u0026#34;vC*\u0026#34; test.ping  \u0026gt; Results: vCROCS01:  True  \u0026gt; Command using --output=json: salt \u0026#34;vCROCS01\u0026#34; test.ping --output=json  \u0026gt; Results: {  \u0026#34;vCROCS01\u0026#34;: true }   Windows Disk Usage:  \u0026gt; Command: salt \u0026#34;vCROCS01\u0026#34; disk.usage  \u0026gt; Results: vCROCS01:  ----------  C:\\:  ----------  1K-blocks:  67642364.0  available:  15229492.0  capacity:  77%  filesystem:  C:\\  used:  52412872.0  E:\\:  ----------  1K-blocks:  41809856.0  available:  38486208.0  capacity:  8%  filesystem:  E:\\  used:  3323648.0  \u0026gt; Command: salt \u0026#34;vCROCS01\u0026#34; disk.usage --output=json  \u0026gt; Results: {  \u0026#34;vCROCS01\u0026#34;: {  \u0026#34;C:\\\\\u0026#34;: {  \u0026#34;filesystem\u0026#34;: \u0026#34;C:\\\\\u0026#34;,  \u0026#34;1K-blocks\u0026#34;: 67642364.0,  \u0026#34;used\u0026#34;: 52424392.0,  \u0026#34;available\u0026#34;: 15217972.0,  \u0026#34;capacity\u0026#34;: \u0026#34;78%\u0026#34;  },  \u0026#34;E:\\\\\u0026#34;: {  \u0026#34;filesystem\u0026#34;: \u0026#34;E:\\\\\u0026#34;,  \u0026#34;1K-blocks\u0026#34;: 41809856.0,  \u0026#34;used\u0026#34;: 3323648.0,  \u0026#34;available\u0026#34;: 38486208.0,  \u0026#34;capacity\u0026#34;: \u0026#34;8%\u0026#34;  }  } }   Windows Services:  \u0026gt; Command stop a Windows Service: salt \u0026#34;vCROCS01\u0026#34; service.stop \u0026#34;spooler\u0026#34;  \u0026gt; Results: vCROCS01:  True  \u0026gt; Command disable a Windows Service: salt \u0026#34;vCROCS01\u0026#34; service.disable \u0026#34;spooler\u0026#34;  \u0026gt; Results: vCROCS01:  True  \u0026gt; Command get status of a Windows Service: salt \u0026#34;vCROCS01\u0026#34; service.status \u0026#34;spooler\u0026#34;  \u0026gt; Results: vCROCS01:  False  \u0026gt; Command see if a Windows Service is enabled: salt \u0026#34;vCROCS01\u0026#34; service.enabled \u0026#34;spooler\u0026#34;  \u0026gt; Results: vCROCS01:  False Copy files to | Delete files from | Windows Server:  \u0026gt; Command Copy a file to a Windows Service - Source File | Destination File: salt \u0026#34;vCROCS01\u0026#34; cp.get_file \u0026#34;salt://installer_file.msi\u0026#34; \u0026#34;C:\\install_files\\installer_file.msi\u0026#34;  \u0026gt; Results: vCROCS01:  C:\\install_files\\installer_file.msi  \u0026gt; Command Delete a file from a Windows Service: salt \u0026#34;vCROCS01\u0026#34; file.remove \u0026#39;C:\\install_files\\installer_file.msi\u0026#39;  \u0026gt; Results: vCROCS01:  True   minion grain data:  \u0026gt; Command add grain data to a minion: salt \u0026#34;vCROCS01\u0026#34; grains.append azure_vm \u0026#34;True\u0026#34; vCROCS01:  ----------  azure_vm:  - True  \u0026gt; Command get grain custom data from a minion: salt \u0026#34;vCROCS01\u0026#34; grains.get azure_vm  \u0026gt; Results: vCROCS01:  - True  \u0026gt; Command get grain os data from a minion: salt \u0026#34;vCROCS01\u0026#34; grains.get os  \u0026gt; Results: vCROCS01:  Windows  \u0026gt; Command get grain os data from a minion: salt \u0026#34;vCROCS01\u0026#34; grains.get osfullname  \u0026gt; Results: vCROCS01:  Microsoft Windows Server 2016 Datacenter  \u0026gt; Command get grain domain data from a minion: salt \u0026#34;vCROCS01\u0026#34; grains.get domain  \u0026gt; Results: vCROCS01:  vcrocs.info  \u0026gt; Command get grain IP data from a minion: salt \u0026#34;vCROCS01\u0026#34; grains.get fqdn_ip4  \u0026gt; Results: vCROCS01:  - 192.168.99.99  \u0026gt; Command sync minion grain data with salt master: salt \u0026#34;vCROCS01\u0026#34; saltutil.sync_grains  \u0026gt; Results: vCROCS01:   PowerShell:  \u0026gt; Command run powershell command: salt \u0026#34;vCROCS01\u0026#34; cmd.run \u0026#39;Get-Service | Where-Object {$_.Status -eq \u0026#34;Running\u0026#34;}\u0026#39; shell=PowerShell  \u0026gt; Results: vCROCS01:   Status Name DisplayName  ------ ---- -----------  Running AppHostSvc Application Host Helper Service  Running BFE Base Filtering Engine  Running BrokerInfrastru... Background Tasks Infrastructure Ser...  Running CbDefense CB Defense  Running CDPSvc Connected Devices Platform Service  Running CertPropSvc Certificate Propagation  Running COMSysApp COM+ System Application  Running CoreMessagingRe... CoreMessaging  \u0026gt; Command run powershell script with script saved on salt master File Server: salt \u0026#34;vCROCS01\u0026#34; cmd.script source=\u0026#34;salt://dev/qualys_install_azure.ps1\u0026#34; shell=powershell  \u0026gt; Results: Runs all line of code in script the same as if script was saved local on minion.   Minion Reboot:  \u0026gt; Command minion reboot: salt \u0026#34;vCROCS01\u0026#34; system.reboot 0  \u0026gt; Results: vCROCS01:  True   Join Domain:  \u0026gt; Command join minion to a Windows Domain. You can also specify OU that computer object will be located: salt \u0026#34;vCROCS01\u0026#34; system.join_domain domain=\u0026#39;vcrocs.info\u0026#39; username=\u0026#39;vcrocs\\administrator\u0026#39; password=\u0026#39;VMware1!\u0026#39; account_ou=\u0026#39;OU=Dev,OU=Servers,DC=vcrocs,DC=info\u0026#39; account_exists=False restart=True   Windows Registry:  \u0026gt; Command add a registry key to minion or change value of an existing registry key: salt \u0026#34;vCROCS01\u0026#34; reg.set_value HKEY_LOCAL_MACHINE \u0026#39;SYSTEM\\vCROCS\u0026#39; \u0026#39;Created_by_User\u0026#39; \u0026#39;dhassinger\u0026#39;  \u0026gt; Results: vCROCS01:  True    Click Here to see Larger Image of Screen Shot\n\n Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config   When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config.  ","date":"March 6, 2022","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-cheatsheet/","title":"VMware vRealize SaltStack Config cheat sheet for a Windows Server Admin"},{"categories":["VMware vExpert"],"contents":"VMware vExpert 2020 - 2022 | VMware vExpert Cloud Management 2021 - 2022   I am very proud to be part of the VMware vExpert program. This is the third year that I was accepted into the program. One part of the vExpert program that I think is great is that the program recognizes people for sharing their knowledge and \u0026ldquo;Giving Back\u0026rdquo;. A person selected into the vExpert programs is someone that likes to share, wants to make themselves and everyone around them smarter.\n2022 is also the 2nd year that I was accepted into the VMware vExpert Cloud Management subprogram.\nI think that 2021 was one of my most productive years and one that I advanced my own personal knowledge the most.\nHighlights of 2021 to get accepted into the vExpert Program:  VMworld 2021 session (Presentation): Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] SaltConf21 session (Presentation): Managing Windows with SaltStack Config (6) of my personal Blogs were shared by the VMware “vExpert Cloud Management Community” on the Vmware Blog Web Site. I did several vRealize Automation Presentations at VMware HVC (Healthcare Virtualization Community) Events. PowerBlock Customer Showcase - VM “Right Sizing” I did a IDC interview for VMware on Automation that will be released in 2022. I did a VMware Customer Reference Interview that will be released in 2022. Link to Customer Reference I shared a vRealize Operations “Right Sizing” Dashboard on the code.vmware.com web site.   What is the VMware vExpert Program? Program Overview The VMware vExpert program is VMware\u0026rsquo;s global evangelism and advocacy program. The program is designed to put VMware\u0026rsquo;s marketing resources towards your advocacy efforts. Promotion of your articles, exposure at our global events, co-op advertising, traffic analysis, and early access to beta programs and VMware\u0026rsquo;s roadmap. The awards are for individuals, not companies, and last for one year. Employees of both customers and partners can receive the awards. In the application, we consider various community activities from the previous year as well as the current year\u0026rsquo;s (only for 2nd half applications) activities in determining who gets awards. We look to see that not only were you active but are still active in the path you chose to apply for.\nCriteria If you are interested in becoming a vExpert the criteria is simple. We are looking for IT Professionals who are sharing their VMware knowledge and contributing that back to the community. The term \u0026ldquo;giving back\u0026rdquo; is defined as going above and beyond your day job. There are several ways to share your knowledge and engage with the community. Some of those activities are blogging, book authoring, magazine articles, CloudCred task writing, active in Facebook groups, forum (VMTN as well as other non VMware) platforms, public speaking, VMUG leadership, videos and so on.\n Thanks: I have worked with a great group of people at VMware, past and present. I would like to thank the following people for all their support in no particular order: Steve Leiberson, Karl Hauck, Cosmin Trif, Brock Peterson, Kevin Holland, Daniel Thomas, Marcus Roberts, Paul Schlosser.\nSpecial Thanks to David Kruse for getting me started with vRA.\nSpecial Thanks to some past co-workers, SEs, TAMs, HVC Members that I learned a lot from: Kirk Shaffer, Robert Mitchell, Dan Grove, Steve Holmes, Steve Pittenger, Anton Wesztergom (Opened my eyes to vRA Day 2).\nList of Bloggers that I follow and have learned a lot by them \u0026ldquo;Giving Back\u0026rdquo;: Cody De Arkland, Luc Dekens, Kyle Ruddy, William Lam, Nathen Bennett, Vince Wood, Alan Renouf.\nSpecial Thanks to the person that gave me my first Job in IT: David Cornelius\nand anyone else that helped me in my journey called my career\u0026hellip;\n I have learned a lot from the vCommunity. I want to use this blog as a way for me to \u0026ldquo;give back\u0026rdquo;. If one person finds anything I post helpful I will consider my efforts successful. I am always open to talking to any person, group or organization about what I do with VMware products. Please reach out to me if you ever want to have a discussion.\nEmail: Dale.Hassinger@vCrocs.info\nLocation: Dillsburg, PA\n\"9 - 5 pays the bills, 5 - 10 advances your career\"  \n ","date":"February 22, 2022","image":"https://www.vcrocs.info/images/post/vexpert-2022-01_huea633dfc62497ad674470427f21ef8c9_70292_650x0_resize_box_3.png","permalink":"/blog/vexpert-2022/","title":"vExpert 2022 | vExpert Cloud Management"},{"categories":["SaltStack Config"],"contents":" Part 8: Pouring the salt grains    My previous posts about grain data were to show how to add minion grain data during the creation of a new server with vRA using PowerShell. This post I want to show how I\u0026rsquo;m going to maintain the grain data that is not default out of the box grain data.\n Windows Server grain data not available out of the of box that I want to add to every minion AND make sure the grain data stays up to date:\n Windows Server Features | Roles Windows Server Installed Software Windows Server Running Services   These are the steps that I use to maintain custom grain data with a Windows Server:\n Create a PowerShell Script that can run locally on a minion. Add the script to the SaltStack Config File Manager. Use salt-call to run salt.functions locally on a minion. See screen shot and my code examples below. Create a SaltStack Config Job to execute the PowerShell Script remotely on the minion. See Screen Shot. Create a SaltStack Config Schedule to run the job that you create. The job can run every day, once a week, every 4 hours. Whatever makes sense for your use case. See Screen Shot.   If you want to run a script locally on a minion and use salt functions that is where you use the salt-call command. After you learn the salt-functions and are logged into a Windows Server locally, you can still use salt commands by using salt-call.\n# --- example code salt-call --version salt-call test.ping  # --- Show Disk Usage salt-call disk.usage  # --- Show Installed Features|Roles salt-call win_servermanager.list_installed  # --- Show Installed Sofwtare salt-call pkg.list_pkgs Link to salt-call Documentation\n Step 1 - Add script to SaltStack Config File Manager: See code examples below to add Windows Server Features|Roles, Installed Software, and Runnings Services as grain data.\nClick Here to see Larger Image of Screen Shot\nStep 2 - Create SaltStack Config Job:  Click Here to see Larger Image of Screen Shot\nStep 3 - Create SaltStack Config Schedule:  Click Here to see Larger Image of Screen Shot\n Code Examples: - Add Windows Features | Roles as grain data: \u0026lt;# .SYNOPSISThis Script is used to Get Windows Servers Features and add as Grain Data .DESCRIPTIONWindows Servers Features .PARAMETERNo Parameters .INPUTSNo inputs .OUTPUTSsalt grain data .NOTESVersion: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLEN/A #\u0026gt;  # ----- [ Start of Code ] ---------------------------------------------------------------------------  # --- Minion Get Windows Server Features Installed  # --- Delete existing grains features data $saltCommand = \u0026#39;salt-call grains.delkey sem_Windows_Feature force=True\u0026#39; #$saltCommand  # --- Run Salt Command Invoke-Expression -Command $saltCommand  $saltCommand = \u0026#39;salt-call win_servermanager.list_installed --output=json\u0026#39; #$saltCommand  # --- Run Salt Command $results =Invoke-Expression -Command $saltCommand #$results $features = $results | ConvertFrom-Json #$features $features = $features.local #$features $features = $features -split(\u0026#34;:\u0026#34;) $features = $features -split(\u0026#34;;\u0026#34;) $features = $features -replace(\u0026#34;@{\u0026#34;,\u0026#34;\u0026#34;) $features = $features -replace(\u0026#34;}\u0026#34;,\u0026#34;\u0026#34;) $features = $features.trim() $features = $features -replace(\u0026#34;=\u0026#34;,\u0026#34; | \u0026#34;) $features = $features | Sort-Object #$features   foreach($feature in $features){  # --- Grains Append  $saltCommand = \u0026#39;salt-call grains.append sem_Windows_Feature \u0026#34;\u0026#39; + $feature + \u0026#39;\u0026#34;\u0026#39;  #$saltCommand   # --- Run Salt Command  Invoke-Expression -Command $saltCommand  } # End Foreach  # --- Delete existing grains last update data $saltCommand = \u0026#39;salt-call grains.delkey sem_last_grains_update force=True\u0026#39; #$saltCommand  # --- Run Salt Command Invoke-Expression -Command $saltCommand  # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy | hh:mm\u0026#34;) #$grainsupdateDate  # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_last_grains_update \u0026#34;\u0026#39; + $grainsupdateDate + \u0026#39;\u0026#34;\u0026#39;  # --- Run Salt Command Invoke-Expression -Command $saltCommand  # --- Grains Sync $saltCommand = \u0026#39;salt-call saltutil.sync_grains\u0026#39;  # --- Run Salt Command Invoke-Expression -Command $saltCommand  # ----- [ End of Code ] ---------------------------------------------------------------------------  - Add Windows Server Installed Packages|Software as grain data: \u0026lt;# .SYNOPSISThis Script is used to Get Windows Installed Packages and add as Grain Data .DESCRIPTIONWindows Servers Installed Packages .PARAMETERNo Parameters .INPUTSNo inputs .OUTPUTSsalt grain data .NOTESVersion: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLEN/A #\u0026gt;  # ----- [ Start of Code ] ---------------------------------------------------------------------------  # --- Minion Get Windows Server Installed Packages|Software  # --- Delete existing grains features data $saltCommand = \u0026#39;salt-call grains.delkey sem_Windows_Installed_Software force=True\u0026#39; #$saltCommand  # --- Run Salt Command Invoke-Expression -Command $saltCommand  $saltCommand = \u0026#39;salt-call pkg.list_pkgs --output=json\u0026#39; #$saltCommand  # --- Run Salt Command $results =Invoke-Expression -Command $saltCommand #$results  $installedPackages = $results | ConvertFrom-Json $installedPackages = $installedPackages.local $installedPackages = $installedPackages -split(\u0026#34;:\u0026#34;) $installedPackages = $installedPackages -split(\u0026#34;;\u0026#34;) $installedPackages = $installedPackages -replace(\u0026#34;@{\u0026#34;,\u0026#34;\u0026#34;) $installedPackages = $installedPackages -replace(\u0026#34;}\u0026#34;,\u0026#34;\u0026#34;) $installedPackages = $installedPackages.trim() $installedPackages = $installedPackages -replace(\u0026#34;=\u0026#34;,\u0026#34; | \u0026#34;) $installedPackages = $installedPackages | Sort-Object #$installedPackages  foreach($installedPackage in $installedPackages){  # --- Grains Append  $saltCommand = \u0026#39;salt-call grains.append sem_Windows_Installed_Software \u0026#34;\u0026#39; + $installedPackage + \u0026#39;\u0026#34;\u0026#39;  #$saltCommand   # --- Run Salt Command  Invoke-Expression -Command $saltCommand } # End Foreach  # --- Delete existing grains last update data $saltCommand = \u0026#39;salt-call grains.delkey sem_last_grains_update force=True\u0026#39; #$saltCommand  # --- Run Salt Command Invoke-Expression -Command $saltCommand  # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy | hh:mm\u0026#34;) #$grainsupdateDate  # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_last_grains_update \u0026#34;\u0026#39; + $grainsupdateDate + \u0026#39;\u0026#34;\u0026#39;  # --- Run Salt Command Invoke-Expression -Command $saltCommand  # --- Grains Sync $saltCommand = \u0026#39;salt-call saltutil.sync_grains\u0026#39;  # --- Run Salt Command Invoke-Expression -Command $saltCommand  # ----- [ End of Code ] ---------------------------------------------------------------------------  - Add Windows Running Services as grain data: \u0026lt;# .SYNOPSISThis Script is used to Get Windows Servers Running Services and add as Grain Data .DESCRIPTIONWindows Servers Running Services .PARAMETERNo Parameters .INPUTSNo inputs .OUTPUTSsalt grain data .NOTESVersion: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLEN/A #\u0026gt;  # ----- [ Start of Code ] ---------------------------------------------------------------------------  # --- Minion Get Windows Server Running Services  # --- Delete existing grains running services data $saltCommand = \u0026#39;salt-call grains.delkey sem_Windows_Services_Running force=True\u0026#39; #$saltCommand  # --- Run Salt Command Invoke-Expression -Command $saltCommand  # --- Get all Running Services $serviceNames = Get-Service | Where-Object {$_.Status -eq \u0026#39;Running\u0026#39;}  # --- Create Array $servicesGrains = @()  # --- Add Service data to the array foreach($serviceName in $serviceNames){  $grainString = $serviceName.Name + \u0026#39; | \u0026#39; + $serviceName.DisplayName  $servicesGrains = $servicesGrains + $grainString } # End Foreach #$servicesGrains  # --- Add Windows Running Services as Grain Data foreach($servicesGrain in $servicesGrains){  # --- Grains Append  $saltCommand = \u0026#39;salt-call grains.append sem_Windows_Services_Running \u0026#34;\u0026#39; + $servicesGrain + \u0026#39;\u0026#34;\u0026#39;  #$saltCommand   # --- Run Salt Command  Invoke-Expression -Command $saltCommand  } # End Foreach  # --- Delete existing grains last update data $saltCommand = \u0026#39;salt-call grains.delkey sem_last_grains_update force=True\u0026#39; #$saltCommand  # --- Run Salt Command Invoke-Expression -Command $saltCommand  # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy | hh:mm\u0026#34;) #$grainsupdateDate  # --- Grains Append $saltCommand = \u0026#39;salt-call grains.append sem_last_grains_update \u0026#34;\u0026#39; + $grainsupdateDate + \u0026#39;\u0026#34;\u0026#39;  # --- Run Salt Command Invoke-Expression -Command $saltCommand  # --- Grains Sync $saltCommand = \u0026#39;salt-call saltutil.sync_grains\u0026#39;  # --- Run Salt Command Invoke-Expression -Command $saltCommand  # ----- [ End of Code ] ---------------------------------------------------------------------------  SaltStack Config Target using Windows Server Running Service (SQL Server):  Click Here to see Larger Image of Screen Shot\n Lessons Learned:  Windows Server Features|Roles make a great way to target minions. Windows Server installed software also makes a great way to target minions. Windows Server Running Services is a good way to target minions. If you add custom grain data when the server is created you also need a way to maintain the grain data so it stays up to date and is current.   Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config  When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"February 12, 2022","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-config-part-08/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 8"},{"categories":["SaltStack Config"],"contents":" Part 7: Windows Server Features|Roles and Installed Software as grain data     The more I use VMware vRealize SaltStack Config as a Windows Server Admin the more I see the importance of having grain information added to the minion to be able to target servers many different ways. During a recent discussion it was suggested to have the ability to target Windows Server minions by the Windows server Features|Roles that were installed on the server and by which software was installed on a server. There are built-in salt functions to get Features|Roles and installed software. Here is the code I used to get the information and add to the minion grain file using PowerShell.  This will allow you to create targets to:\n minions with specific VMware Tools Versions minion with Web Server Feature|Role enabled etc\u0026hellip;   Salt Functions: # The POSH-SSH PowerShell module MUST be installed to use this code.  # Name of Minion that you want to add grain data $minion = \u0026#39;DBH-210\u0026#39;  # ----- [ SSH Connection to SalStack Config Server ] ------------------------------------ Write-Host \u0026#39;Making SSH Connection to SaltStack Config Server...\u0026#39;  $Server = \u0026#39;ssc.vCROCS.local\u0026#39; $userName = \u0026#39;root\u0026#39; $Password = \u0026#39;VMware#1\u0026#39;  # The next line is how to create the encrypted password $psPassword = ConvertTo-SecureString -String $Password -AsPlainText -Force $creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $psPassword  $Params = @{  \u0026#34;ComputerName\u0026#34; = $Server  \u0026#34;Credential\u0026#34; = $creds } # End Params  # SSH Connection to SaltStack Server $sshSession = Get-SSHSession if($sshSession.SessionId -eq 0){  Write-Host \u0026#39;SSH Connection to SSC Server already completed\u0026#39; } # End If else{  Write-Host \u0026#39;Creating new SSH Connection to SSC Server\u0026#39;  New-SSHSession @Params } # End Else  # ----- [ Start Adding Grain Data ] ---------------------------------------------------------------------------  # ----- [ Minion Get Windows Server Features|Roles Installed ] ------------------------------------ Write-Host \u0026#39;Getting Windows Server Features|Roles Installed...\u0026#39;  $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; win_servermanager.list_installed --output=json\u0026#39; #$sshCommand  $Params = @{  \u0026#34;SessionId\u0026#34; = 0  \u0026#34;Command\u0026#34; = $sshCommand } # End Params  $results = Invoke-SSHCommand @Params  $features = $results.Output $features = $results.Output | ConvertFrom-Json $features = $features.PsObject.Properties.Value $features = $features | ConvertTo-Xml  # Append Each Feature|Role information to grains Write-Host \u0026#39;Appending Windows Server Features|Roles Installed to grains...\u0026#39;  $grainsKey = \u0026#39;vCROCS_Windows_Feature\u0026#39;  foreach($feature in $features.Objects.Object.Property){  $grainsValue = $feature.Name + \u0026#39; | \u0026#39; + $feature.\u0026#39;#text\u0026#39;   # Grains Append  $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#39; + $grainsKey + \u0026#39; \u0026#34;\u0026#39; + $grainsValue + \u0026#39;\u0026#34;\u0026#39;  #$sshCommand   $Params = @{  \u0026#34;SessionId\u0026#34; = 0  \u0026#34;Command\u0026#34; = $sshCommand  } # End Params   Invoke-SSHCommand @Params  } # End Foreach    # ----- [ Minion Get Windows Server Installed Software ] ------------------------------------ Write-Host \u0026#39;Getting Windows Server Installed Software...\u0026#39;  # Get Installed Software $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; pkg.list_pkgs --output=json\u0026#39; #$sshCommand  $Params = @{  \u0026#34;SessionId\u0026#34; = 0  \u0026#34;Command\u0026#34; = $sshCommand } # End Params  $results = Invoke-SSHCommand @Params  $installedPackages = $results.Output $installedPackages = $installedPackages | ConvertFrom-Json $installedPackages = $installedPackages.PsObject.Properties.Value $installedPackages = $installedPackages | ConvertTo-Xml  $grainsKey = \u0026#39;vCROCS_Windows_Installed_Software\u0026#39;  # Append Windows Server Installed Software to grains Write-Host \u0026#39;Appending Windows Server Installed Software to grains...\u0026#39;  foreach($installedPackage in $installedPackages.Objects.Object.Property){  $grainsValue = $installedPackage.Name + \u0026#39; | \u0026#39; + $installedPackage.\u0026#39;#text\u0026#39;   # Grains Append  $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#39; + $grainsKey + \u0026#39; \u0026#34;\u0026#39; + $grainsValue + \u0026#39;\u0026#34;\u0026#39;  #$sshCommand   $Params = @{  \u0026#34;SessionId\u0026#34; = 0  \u0026#34;Command\u0026#34; = $sshCommand  } # End Params   Invoke-SSHCommand @Params  } # End Foreach   # ----- [ Add a Date that grains last updated ] ---------------------------------------------------------------- $grainsupdateDate = Get-Date $grainsValue = $grainsupdateDate.ToString(\u0026#34;MM/dd/yyyy\u0026#34;) $grainsKey = \u0026#39;vCROCS_last_grains_update\u0026#39;  # Grains Append $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#39; + $grainsKey + \u0026#39; \u0026#34;\u0026#39; + $grainsValue + \u0026#39;\u0026#34;\u0026#39; #$sshCommand  $Params = @{  \u0026#34;SessionId\u0026#34; = 0  \u0026#34;Command\u0026#34; = $sshCommand } # End Params  Invoke-SSHCommand @Params  # ----- [ End Adding Grain Data ] ---------------------------------------------------------------------------  # ----- [ Sync minion Grain Data ] ------------------------------------------------------------------ Write-Host \u0026#39;Syncing Minion Grain Data...\u0026#39; # Sync Grains Data $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; saltutil.sync_grains\u0026#39; #$sshCommand  $Params = @{  \u0026#34;SessionId\u0026#34; = 0  \u0026#34;Command\u0026#34; = $sshCommand } # End Params  Invoke-SSHCommand @Params  # ----- [ Disconnect from SaltStack Config Server ] ------------------------------------------------------------------ Write-Host \u0026#39;Disconnecting from SaltStack Config Server...\u0026#39; Remove-SSHSession -SessionId 0  # ----- [ End of Code ] ---------------------------------------------------------------------------  Example grains file after running script The default location of the grains file is in directory “C:\\salt\\conf\u0026quot;\nvCROCS_Windows_Feature: - FileAndStorage-Services | File and Storage Services - NET-Framework-45-Core | .NET Framework 4.7 - NET-Framework-45-Features | .NET Framework 4.7 Features - NET-Framework-Core | .NET Framework 3.5 (includes .NET 2.0 and 3.0) - NET-Framework-Features | .NET Framework 3.5 Features - NET-WCF-Services45 | WCF Services - NET-WCF-TCP-PortSharing45 | TCP Port Sharing - PowerShell | Windows PowerShell 5.1 - PowerShell-ISE | Windows PowerShell ISE - PowerShellRoot | Windows PowerShell - PowerShell-V2 | Windows PowerShell 2.0 Engine - RSAT | Remote Server Administration Tools - RSAT-Feature-Tools | Feature Administration Tools - RSAT-SNMP | SNMP Tools - SNMP-Service | SNMP Service - SNMP-WMI-Provider | SNMP WMI Provider - Storage-Services | Storage Services - System-DataArchiver | System Data Archiver - Telnet-Client | Telnet Client - WoW64-Support | WoW64 Support - XPS-Viewer | XPS Viewer vCROCS_Windows_Installed_Software: - Microsoft Silverlight | 5.1.50918.0 - Microsoft Visual C++ 2013 Redistributable (x64) - 12.0.40664 | 12.0.40664.0 - Microsoft Visual C++ 2013 x64 Additional Runtime - 12.0.40664 | 12.0.40664 - Microsoft Visual C++ 2013 x64 Minimum Runtime - 12.0.40664 | 12.0.40664 - Microsoft Visual C++ 2015-2022 Redistributable (x64) - 14.30.30704 | 14.30.30704.0 - Microsoft Visual C++ 2015-2022 Redistributable (x86) - 14.30.30704 | 14.30.30704.0 - Microsoft Visual C++ 2022 X64 Additional Runtime - 14.30.30704 | 14.30.30704 - Microsoft Visual C++ 2022 X64 Minimum Runtime - 14.30.30704 | 14.30.30704 - Microsoft Visual C++ 2022 X86 Additional Runtime - 14.30.30704 | 14.30.30704 - Microsoft Visual C++ 2022 X86 Minimum Runtime - 14.30.30704 | 14.30.30704 - Salt Minion 3003.1 (Python 3) | 3003.1 - UniversalForwarder | 8.2.4.0 - VMware Tools | 11.3.5.18557794 vCROCS_last_grains_update: - 01/14/2022  SaltStack Target using Windows Server Software Installed: Show all minions that have VMware Tools | 11.3.5.18557794 installed\n Click Here to see Larger Image of Screen Shot\n Lessons Learned:  Windows Server Features|Roles make a great way to target minions. Windows Server installed software also makes a great way to target minions.   Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config  When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"January 14, 2022","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-config-part-07/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 7"},{"categories":["Year in Review"],"contents":"Get-Review 2021  2021 was a good year for me with my career. I spent the entire year working from home and I find myself to be more productive when WFH. My wife and I moved into a different home and I now have a dedicated office area on the 2nd floor away from anyone else. I still share my office with Belle (Rescue Dog adopted in 2020 before covid) everyday and she loves the fenced in back yard that she can run around in without a leash.\nIn 2021 I started living the \u0026ldquo;Salt Life\u0026rdquo;. In July I installed SaltStack Config for the first time and started taking a serious look at Salt. I went from zero to doing a presentation about SaltStack at VMworld in October and another presentation at SaltConf21 in November. Getting a session selected for VMworld was a career \u0026ldquo;Bucket List\u0026rdquo; for me.\nAfter creating a vRealize Operations Dashboard on \u0026ldquo;Right Sizing\u0026rdquo; that I use in production, my vRealize Account Executive setup a meeting for me to meet Iwan \u0026rsquo;e1\u0026rsquo; Rahabok who is the co-creator of the book \u0026ldquo;Operationalize Your World\u0026rdquo;. Iwan liked the Dashboard I created and included some details about the Dashboard in his book \u0026ldquo;Operationalize Your World\u0026rdquo;.\nI always say if one person finds anything I post helpful, I will consider my efforts successful. In 2021, between the presentations and blogs posts, I feel I have given back and helped some people. I shared the knowledge. 2021 was a successful year for me.\n Highlights of 2021  VMworld 2021 session (Presentation): Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] SaltConf21 session (Presentation): Managing Windows with SaltStack Config (6) of my personal Blogs were shared by the VMware \u0026ldquo;vExpert Cloud Management Community\u0026rdquo; on the Vmware Blog Web Site. I did several vRealize Automation Presentations at VMware HVC (Healthcare Virtualization Community) Events. PowerBlock Customer Showcase - VM \u0026ldquo;Right Sizing\u0026rdquo; I did a IDC interview for VMware on Automation that will be released in 2022. I did a VMware Customer Reference Interview that will be released in 2022. Link to Customer Reference I shared a vRealize Operations \u0026ldquo;Right Sizing\u0026rdquo; Dashboard on the code.vmware.com web site.   My Top 10 Blog Posts of 2021  How to use PowerShell modules with vRA 8.2 | 978 How vRealize Operations can help with \u0026ldquo;Right sizing\u0026rdquo; VMs | 799 vRA 8.1 ABX PS | 508 Automating Automation | 415 VMware vRealize SaltStack Config as a Windows Server Admin part 1 | 333 VMware vRealize SaltStack Config as a Windows Server Admin part 2 | 280 vRealize automation 8.1 PowerShell abx | 216 VMware vRealize SaltStack Config as a Windows Server Admin part 4 | 195 VMware vRealize SaltStack Config as a Windows Server Admin part 6 | 164 VMworld 2021 SaltStack Config session | 147  What the top 10 list shows me is there is a lot of interest to use PowerShell with the vRealize Products, VMware admins are interested in Right Sizing and since VMware Purchased SaltStack people what to get started with the product.\n*Stats from Google Analytics.\n Set-Goals 2022  I do a lot of posts on PowerShell and I use it everyday. I want to take some time in 2022 and learn Python. I have done a little bit of Python but not enough to call myself a Python Programmer. I think there are some use cases with vRealize Automation and SaltStack Config that knowing Python may help. I want to spend more time with Salt. Salt is a powerful tool and I want to expand my knowledge with Salt. Get a session approved for VMworld 2022 and SaltConf22. Do more VMware PowerBlock Presentations. Create more Blog Posts. Never Stop Learning\u0026hellip;   Thanks for visiting in 2021!  ","date":"January 1, 2022","image":"https://www.vcrocs.info/images/post/2021review_huea633dfc62497ad674470427f21ef8c9_36999_650x0_resize_box_3.png","permalink":"/blog/look-back-2021/","title":"Year in Review - 2021 | 2022 Goals"},{"categories":["SaltStack Config"],"contents":" Part 6: How to use SaltStack Config with Windows Server and PowerShell      The latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin is going to be a lot PowerShell. I use PowerShell for a lot of Automation, Windows Server and Linux Server. When working with VMware vRealize SaltStack Config I constantly found myself going to the CLI to test and learn how the salt functions work. In the Part 5 Blog of this series I showed how I am using the PowerShell module POSH-SSH to connect to the VMware vRealize SaltStack Config Server to run salt commands remotely. So I started writing some PowerShell functions to run remote salt commands on the Salt Master. The end goal might be to turn this script into a Salt PowerShell Module. To start it will only have the functions that I find myself using the most. I could turn this into a community Github Project and see if there would be any interest. If anyone reading this blog post has any interest please reach out to me. (Dale.Hassinger@vCROCS.info)\nMy goal is to make all these PowerShell Salt functions work with VMware vRealize SaltStack Config like PowerCLI works with VMware vCenter. Use same verb/noun terminology. I use PowerCLI for all my VMware Automation. Works awesome! So to create these PowerShell Functions to work with my existing automation scripts is a win win in my book.\nNormally I will use a Products APIs to do all these types of processes. I looked at VMware vRealize SaltStack Config APIs and to the best of my knowledge I can not use them like I can the PS functions that I created. That may change in a future release of VMware vRealize SaltStack Config. Fingers crossed.\n  Salt PowerShell Functions: # ----- [ Start of Functions ] -------------------------------------------------------------------------------------------------------------- # The POSH-SSH PS module MUST be installed to use these functions.  # Function to Connect to SSC Server function Connect-SSCServer {  param(   [parameter(mandatory = $true)]  [string]$Server,  [parameter(mandatory = $true)]  [string]$userName,  [parameter(mandatory = $true)]  [string]$Password   ) # End Parameters   # The next line is how to create the encrypted password  $psPassword = ConvertTo-SecureString -String $global:HashiPW -AsPlainText -Force  $creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $psPassword   $Params = @{  \u0026#34;ComputerName\u0026#34; = $Server  \u0026#34;Credential\u0026#34; = $creds  } # End Params   # SSH Connection to SaltStack Server  New-SSHSession @Params  } # End Function      # Function to Disconnect from SSC Server function Disconnect-SSCServer {  Remove-SSHSession -SessionId 0 } # End Function      # Sync Minion grains function invoke-SSC.sync.grains {  param(  [parameter(mandatory = $true)]  [string]$minion  )   # Sync Grains after adding new grain information  $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; saltutil.sync_grains --output=json\u0026#39;  #$sshCommand    $Params = @{  \u0026#34;SessionId\u0026#34; = 0  \u0026#34;Command\u0026#34; = $sshCommand  } # End Params   $results = Invoke-SSHCommand @Params   return $results.Output  } # End Function      # Minion Grain Append function set-SSC.grains.append {  param(  [parameter(mandatory = $true)]  [string]$minion,  [parameter(mandatory = $true)]  [string]$grainkey,  [parameter(mandatory = $true)]  [string]$grainval  ) # End Parameters   # Grains Append  $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.append \u0026#34;\u0026#39; + $grainkey + \u0026#39;\u0026#34; \u0026#34;\u0026#39; + $grainval + \u0026#39;\u0026#34;\u0026#39;  #$sshCommand   $Params = @{  \u0026#34;SessionId\u0026#34; = 0  \u0026#34;Command\u0026#34; = $sshCommand  } # End Params   $results = Invoke-SSHCommand @Params  } # End Function      # Minion Grain DelKey function set-SSC.grains.delkey {  param(  [parameter(mandatory = $true)]  [string]$minion,  [parameter(mandatory = $true)]  [string]$grainkey  ) # End Parameters   $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; grains.delkey \u0026#34;\u0026#39; + $grainkey + \u0026#39;\u0026#34; force=True\u0026#39;  #$sshCommand   $Params = @{  \u0026#34;SessionId\u0026#34; = 0  \u0026#34;Command\u0026#34; = $sshCommand  } # End Params   $results = Invoke-SSHCommand @Params  } # End Function      # Minion Test Ping function invoke-SSC.test.ping {  param(  [parameter(mandatory = $true)]  [string]$minion  ) # End Parameters   $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $minion + \u0026#39;\u0026#34; test.ping --output=json\u0026#39;  #$sshCommand   $results = Invoke-SSHCommand -SessionId 0 -Command $sshCommand  return $results.Output[1].Trim()  } # End Function     # ----- [ End of Functions ] -------------------------------------------------------------------------------------------------------------- Examples to show how to use the Salt PowerShell Functions above: # ----- [ Connect to SSC Server ] --------------------------------------------------  # DO NOT use plain text PW\u0026#39;s in your Code. I am only showing PW to make it easier to understand the code.   # Set Parameter Values $Server = \u0026#39;SaltMaster.vCROCS.local\u0026#39; $User = \u0026#39;root\u0026#39; $Password = \u0026#39;VMware1!\u0026#39;  # Define Parameters (Splatting) $Params = @{  \u0026#34;Server\u0026#34; = $Server  \u0026#34;User\u0026#34; = $User  \u0026#34;Password\u0026#34; = $Password }  # Connect to SSC Connect-SSCServer @Params    # ----- [ Disconnect to SSC Server ] ----------------------------------------------- Disconnect-SSCServer    # ----- [ Sync Minion grains ] ------------------------------------------------------- # Set Parameter Values $minion = \u0026#39;DBH-211\u0026#39;  # Define Parameters (Splatting) $Params = @{  \u0026#34;minion\u0026#34; = $minion }  # Run Function invoke-SSC.sync.grains @Params    # ----- [ Minion grain append ] ---------------------------------------------------- # Set Parameter Values $minion = \u0026#39;DBH-211\u0026#39; $grainkey = \u0026#39;PS_Module\u0026#39; $grainval = \u0026#39;Works great for Windows Server\u0026#39;  # Define Parameters (Splatting) $Params = @{  \u0026#34;minion\u0026#34; = $minion  \u0026#34;grainkey\u0026#34; = $grainkey  \u0026#34;grainval\u0026#34; = $grainval }  # Run Function set-SSC.grains.append @Params  # Define Parameters (Splatting) $Params = @{  \u0026#34;minion\u0026#34; = $minion }  # Run Function invoke-SSC.sync.grains @Params    # ----- [ Minion grain DelKey ] ---------------------------------------------------- # Set Parameter Values $minion = \u0026#39;DBH-211\u0026#39; $grainkey = \u0026#39;PS_Module\u0026#39;  # Define Parameters (Splatting) $Params = @{  minion = $minion  grainkey = $grainkey }  # Run Function set-SSC.grains.delkey @Params  # Define Parameters (Splatting) $Params = @{  \u0026#34;minion\u0026#34; = $minion }  # Run Function invoke-SSC.sync.grains @Params    # ----- [ Minion test.ping ] ---------------------------------------------------- # Set Paramter Values $minion = \u0026#39;DBH-211\u0026#39;  # Define Parameters (Splatting) $Params = @{  \u0026#34;minion\u0026#34; = $minion }  # Run Function invoke-SSC.test.ping @Params Lessons Learned:  Adding the POSH-SSH PowerShell module so you can create a SSH connection to the salt master opens up a lot of possibilities for your PowerShell Automation as a Windows Server Admin. Using the PowerShell Functions above as a Windows admin makes it very easy to add this code to existing scripts and use the Power of SaltStack without completely changing your processes. Creating a SSH Connection to a remote Salt Master and running commands works well in a \u0026ldquo;Zero Trust\u0026rdquo; environment. With NSX-T all you need to do is setup allow rules between the minions and the master on ports 4505,4506.   Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config  When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"October 9, 2021","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-config-part-06/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 6"},{"categories":["SaltConf"],"contents":"  I will be doing a SaltConf presentation for the first time at SaltConf 2021. I attended SaltConf 2020 for the first time after VMware purchased SaltStack Config. This past year I have spent a lot of time reviewing SaltStack Config as a Windows Server Admin and I am excited to share what I have learned to hopefully help some Windows Server Admins get started.\nI wanted to learn one of the configuration Management products for a couple of years and after VMware purchased SaltStack Config the decision became obvious to me which one I should learn since I live in VMware vRealize Products all day, every day.\nSo register today for SaltConf 2021 and attend my session.\n- Link to SaltConf21 -  Session Details:  Date: November 4th. Time: 10:00 am - 10:50 am Details: Track 1 - Managing Windows with SaltStack Config Presenters: Vincent Riccio and Dale Hassinger  - Link to SaltConf21 Agenda -  In our Presentation we will show you how to use SaltStack Config to manage Microsoft Windows Servers. How to use Salt to install software, work with Windows Services, make Registry changes, configuration management, how to quickly respond to Zero-Day Security patching, how to add vCenter TAGs/NSX-T TAGS/ Active Directory OUs as minion grain information, how to target minions, minion beacons, salt reactors and other normal day to day Windows Server administration.\n ","date":"October 2, 2021","image":"https://www.vcrocs.info/images/post/saltconf21-01_huea633dfc62497ad674470427f21ef8c9_46492_650x0_resize_box_3.png","permalink":"/blog/saltconf-2021/","title":"SaltConf 2021 - SaltStack Config Session"},{"categories":["SaltStack Config"],"contents":" Part 5: How to use SaltStack Config with Windows Server and PowerShell     The latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin will be an update to some items that I have talked about in previous posts. I have been spending more time with VMware vRealize SaltStack Config and I have learned some better ways to do some of the processes that I have talked about already. My goal to to learn and use the built-in functions that are already in the product. I found that using the salt functions require less coding and better logging. First example of changing how I am going to use VMware vRealize SaltStack Config. When I first started looking at grains I thought I would edit the grains file with PowerShell and add the grains content to the file. What I did worked but I think I learned a better way. There is a function grains.append that will append grains data to the grains file on the minion. This works much better and when I run a job to add grains information it is listed in Activity Completed within VMware vRealize SaltStack Config. I like to be able to see when changes are made by the jobs that are run.\nThe code that I have listed below to get vCenter TAGs assigned to a VM and add the information to the minion is using PowerShell. To use this script you MUST install the PowerShell Module POSH-SSH. The process I am showing connects to a vCenter, creates a SSH Connection to the Salt Server, gets all assigned vCenter TAGs for a VM, , runs salt commands to add grain information to the grains file of a minion, and then runs a minion grains sync. This concept can be used for a lot of different systems. If you want to add NSX-T Security TAGs as grain information (Thanks Karl Hauck for this idea), AD (Active Directory) OU of the Windows Server, or anything you think would be useful to Target minions within VMware vRealize SaltStack Config.\nI really like the idea of using POSH-SSH to make the SSH connection to the Salt Master Server and running commands. I do a lot of Automation within vRA (vRealize Automation) with PowerShell and I can use this same concept to use VMware vRealize SaltStack Config to complete the processes that need run. I can also create Catalog items within vRA that you can make available to APP Teams to use. The Catalog item could be running salt jobs in VMware vRealize SaltStack Config. Cool Stuff!\n  Grains File: This is what I learned about salt grains when using with a Windows OS.\n The default location of the grains file is in directory \u0026ldquo;C:\\salt\\conf\u0026quot;. The grains file is named grains with no extension.  Example grains file: NSXSecurityTAGs: - vCROCS.Apps.VMware.SaltStack.Minion vCenterTAGs: - TAG-VM-WebServer - TAG-VM-vCROCS - TAG-App-Hugo  \u0026ldquo;Grain Name\u0026rdquo;: \u0026ldquo;The value of the grain\u0026rdquo;. In my example I wanted the grain to be named \u0026ldquo;vCenterTags\u0026rdquo; and the values will be the vCenter TAG names \u0026ldquo;TAG-VM-vCROCS, TAG-VM-WebServer, TAG-App-Hugo\u0026rdquo;. I have (3) vCenter TAGs assigned to this VM. I will be able to create a SaltStack Config Target based on any of the TAGs. I like the formatting that is used for the grains file by using the function grains.append.   SaltStack Config Targets: When I add the vCenter TAG information to the grains file I am then able to create SaltStack Config Targets based on the grain \u0026ldquo;vCenterTags\u0026rdquo;.\nSaltStack Config Targets:  Click Here to see Larger Image of Screen Shot\nSaltStack Config Target Definition:  Click Here to see Larger Image of Screen Shot\nHow to add the vCenter TAGs to the grains file on all your VMs in SaltStack Config:\nGet the VM Names and All Assigned vCenter TAGs\nPowerShell Script: # ----- [ SSH SaltStack Config Server - Add vCenter TAGs to Minion Grains ] --------------------------  # Connect to vCenter before running this code # Define your Credentials  # SSH to SaltStack Server - MUST HAVE POSH-SSH PowerShell Module Installed  New-SSHSession -ComputerName \u0026#39;SaltServer.vCROCS.info\u0026#39;  # Test SSH Connection $CheckSSHConnection = Get-SSHSession -SessionId 0 $CheckSSHConnection.Connected  $vmNames = Get-VM -Name vCROCS-VM-* $vmNames = $vmNames | Sort-Object Name  foreach($vmName in $VMNames){  $vmName.Name   #Get VM Tag(s)  $VMTags = Get-TagAssignment -Entity $vmName.Name  $VMTags.Tag.Name   foreach($vmTAG in $VMTags.Tag.Name){   $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $vmName.Name + \u0026#39;\u0026#34; grains.append vCenterTAGs \u0026#34;\u0026#39; + $vmTAG + \u0026#39;\u0026#34;\u0026#39;  $results = Invoke-SSHCommand -SessionId 0 -Command $sshCommand  } # End Foreach   # Sync Grains after adding new grain information  $sshCommand = \u0026#39;salt \u0026#34;\u0026#39; + $vmName.Name + \u0026#39;\u0026#34; saltutil.sync_grains\u0026#39;  $results = Invoke-SSHCommand -SessionId 0 -Command $sshCommand } # End Foreach  # ----- [ Terminate SSH Session ] ----------------------------- Remove-SSHSession -SessionId 0\nLessons Learned:  Adding the POSH-SSH PowerShell module so you can create a SSH connection to the salt master opens up a lot of possibilities for your PowerShell Automation as a Windows Server Admin. Grains are a good way to create SaltStack Config Targets. Allows you to group VMs together the same way you can in vCenter. The Grains file is basically a Database that can be any information that you want to show about your VMs. In this Blog post I am adding vCenter TAGs to the minions but the information could be anything that helps you target VMs. If the default list of grains OOTB doesn\u0026rsquo;t show the information you want to see, you can easily add your own gains with a little bit of code.   Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config  When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"October 1, 2021","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-config-part-05/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 5"},{"categories":["SaltStack Config"],"contents":" Part 4: How to use SaltStack Config with Windows Server and PowerShell      The latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin will be salt grains. I have a specific use case that made me start looking at grains. In VMware vCenter I use vCenter TAGs to organize VMs. I also use vCenter TAGs to organize VMs in vRealize Operations. I want to use the same logic of using vCenter TAGs in SaltStack Config. SaltStack Config does not use vCenter TAGs OOTB (Out of the Box) for VMs. At the end of this Blog Post I also have an SaltStack Config Orchestration example. Instead of running multiple Jobs one at a time I have (4) steps in a SLS file that I run using a salt-run job and the function state.orchestrate.\n  Grains File: This is what I learned about salt grains when using with a Windows OS.\n The default location of the grains file is in directory \u0026ldquo;C:\\salt\\conf\u0026quot;. The grains file is named grains with no extension.  Example grains file: vCenterTags: TAG-VM-vCROCS|TAG-VM-WebServer|TAG-App-Hugo  \u0026ldquo;Grain Name\u0026rdquo;: \u0026ldquo;The value of the grain\u0026rdquo;. In my example I wanted the grain to be named \u0026ldquo;vCenterTags\u0026rdquo; and the values will be the vCenter TAG names \u0026ldquo;TAG-VM-vCROCS|TAG-VM-WebServer|TAG-App-Hugo\u0026rdquo;. I have (3) vCenter TAGs assigned to this VM. I will be able to create a SaltStack Config Target based on any of the TAGs.   SaltStack Config Targets: When I add the vCenter TAG information to the grains file I am then able to create SaltStack Config Targets based on the grain \u0026ldquo;vCenterTags\u0026rdquo;.\nSaltStack Config Targets:  Click Here to see Larger Image of Screen Shot\nSaltStack Config Target Definition:  Click Here to see Larger Image of Screen Shot\nHow to add the vCenter TAGs to the grains file on all your VMs in SaltStack Config: Step 1: Get the VM Names and All Assigned vCenter TAGs into a csv file Example PowerShell Code to get all vCenter VM Names and all vCenter TAGs assigned to the VMs\n# ----- [ Start Create CSV File with all VMs/TAGs Assigned ] ----------------------------  # I did not include code to connect to the vCenter. There are many ways to do this step. # Make sure you are connected to the vCenter BEFORE running this code.  $allvmstaginfoFile = \u0026#34;C:\\Salt\\allvmstaginfo.csv\u0026#34;  # Create Array $allVMsTagInfo = @(\u0026#34;\u0026#34;)  # Add Headers to Array $VMTagInfo = \u0026#39;VM,TAGs\u0026#39; $allVMsTagInfo += $VMTagInfo  # Get All VMs in you vCenter $vmNames = Get-VM $vmNames = $vmNames | Sort-Object Name  foreach($vmName in $VMNames){  # Get VM Tag(s)  $VMTags = Get-TagAssignment -Entity $vmName.Name   # If more than (1) TAG I will join them as a string with a \u0026#39;|\u0026#39; separating the values.  $VMtags = $VMTags.Tag.Name -join \u0026#39;|\u0026#39;   # Create a string with the VMname and all the vCenter TAGs assigned separated by a comma  $VMTagInfo = $vmName.Name + \u0026#39;,\u0026#39; + $VMTags   # Add Info to array   $allVMsTagInfo += $VMTagInfo } # End Foreach  # Delete existing all VMs Tag csv File Remove-Item -Path $allvmstaginfoFile  # Create new all VMs Tag csv File New-Item $allvmstaginfoFile -ItemType File  # Add array Data to CSV file $allVMsTagInfo | Select-Object -Skip 1 | Set-Content $allvmstaginfoFile  # ----- [ End Create CSV File with all VMs/TAGs Assigned ] ----------------------------\nStep 2: Copy the csv file to the salt master After I create the csv file I copy to the StackStack Config Server (Salt Master) in the folder /var/srv/salt. This is where all files need to be saved when you use function cp.get_file.\n Step 3: Copy the csv file to the salt minions You may be wondering why I copy the file to the minion and not copy to a central share. My environment has NSX-T with zero trust. Most of my automation I do not open ports to servers that are not needed permanently. So the concept of using salt to copy files to minions, use the files to make changes and then delete the files when processes are complete works well in a zero trust environment.\nJob to copy csv file to minions:  Click Here to see Larger Image of Screen Shot\n Step 4: Run Script on minion After I copy the csv file to the minion I run a script to create/update the grains files.\nJob to run a PowerShell Script to create/update the grains file:  Click Here to see Larger Image of Screen Shot\nExample PowerShell Code to create/update grains file on a minion:\n# ----- [ Start Create Grain File with TAGs Assigned ] ----------------------------  $allvmstaginfoFile = \u0026#34;C:\\vCROCS\\allvmstaginfo.csv\u0026#34;  $grainTagInfo = Import-Csv $allvmstaginfoFile  $vmName = hostname  $grainsFile = \u0026#34;C:\\salt\\conf\\grains\u0026#34;  if (Test-Path $grainsFile) {   # Remove existing vCenter Tags  $grainsContent = Get-Content $grainsFile  $grainsContent = $grainsContent | Where-Object {$_ -notmatch \u0026#34;vCenterTags:\u0026#34;}   # If Only grain is vCenter Tags then Delete the grains file and re-create  if(!$grainsContent){  Remove-Item -Path $grainsFile  New-Item $grainsFile -ItemType File  } # End If  else{  $grainsContent | Set-Content $grainsFile -Force  } # End Else   #Get VM Tag(s)  $grainfileinfo = $grainTagInfo | Where-Object {$_.VM -eq $vmName}   $VMTagInfo = \u0026#39;vCenterTags: \u0026#39; + $grainfileinfo.TAGs   Add-Content $grainsFile $VMTagInfo -Force  } # End If else{  # Create grains file  New-Item $grainsFile -ItemType File   #Get VM Tag(s)  $grainfileinfo = $grainTagInfo | Where-Object {$_.VM -eq $vmName}   # Define Tags String  $VMTagInfo = \u0026#39;vCenterTags: \u0026#39; + $grainfileinfo.TAGs   # Add Tags to grains file  Add-Content $grainsFile $VMTagInfo -Force } # End else  # ----- [ End Create Grain File with TAGs Assigned ] ----------------------------\n Step 5: Run job to do a sync_grains Anytime you make any changes to the grains file you should run the function saltutil.sync_grains to update the SaltStack Config Server immediately.\nJob to run sync of the minion grains information:  Click Here to see Larger Image of Screen Shot\n SaltStack Config Orchestration: Job to Orchestrate all the steps:  Copy file to minion. Run script to create/update grains file Run a sync_grains. Delete the files from the minions when processes are complete.   Click Here to see Larger Image of Screen Shot\nExample Orchestration SLS file: copy_tags:  salt.function:  - name: cp.get_file  - tgt: \u0026#39;os:Windows\u0026#39;  - tgt_type: grain  - arg:  - \u0026#39;salt://allvmstaginfo.csv\u0026#39;  - \u0026#39;C:\\vCROCS\\allvmstaginfo.csv\u0026#39;  create_grain_file:  salt.function:  - name: cmd.script  - tgt: \u0026#39;os:Windows\u0026#39;  - tgt_type: grain  - arg:  - source=\u0026#34;salt://SEM/grains-vCenter-tags.ps1\u0026#34;  - shell=powershell  grain_sync:  salt.function:  - name: saltutil.sync_grains  - tgt: \u0026#39;os:Windows\u0026#39;  - tgt_type: grain  Cleanup_Tag_File:  salt.function:  - name: file.remove  - tgt: \u0026#39;os:Windows\u0026#39;  - tgt_type: grain  - arg:  - \u0026#39;C:\\vCROCS\\allvmstaginfo.csv\u0026#39;\nSalt-Run Job to Orchestrate Copy File/Run Script/Run Sync/Delete File:  Click Here to see Larger Image of Screen Shot\n Lessons Learned:  Grains are a good way to create SaltStack Config Targets. Allows you to group VMs together the same way you can in vCenter. The Grains file is basically a Database that can be any information that you want to show about your VMs. In this Blog post I am adding vCenter TAGs to the minions but the information could be anything that helps you target VMs. If the default list of grains OOTB doesn\u0026rsquo;t show the information you want to see, you can easily add your own gains with a little bit of code.   Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config  When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"September 5, 2021","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-config-part-04/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 4"},{"categories":["SaltStack Config"],"contents":" Part 3: How to use SaltStack Config with Windows Server and PowerShell      The next steps on my journey with **VMware vRealize SaltStack Config** as a **Windows Server Admin** will be beacons and reactors. Working with Jobs helped me understand how to make changes Ad-Hoc. I have a Job to quickly stop the Print Spooler but what if I always want the state of the Print Spooler Service to be stopped. How do I NOT allow a Server Admin to login into the server and manually start the service? This is where beacons and reactors work with minion configurations that you want to make permanent. This is the configuration Management Part of Salt Stack. To always make sure a Windows Service is stopped I created a beacon.conf file. On a Windows Server the Beacon.conf needs to be in the \u0026lsquo;C:\\salt\\conf\\minion.d' folder. Anytime a beacon.conf file is added to a minion or modified the salt-minion service needs restarted. I have a salt Job to restart the salt-minion service.\n Beacons: Beacon File: Sends events to the event bus on the salt master from a minion This beacon.conf example is for service state changes. The Beacon sends an event to the salt master if a Windows Service is started/stopped.\nbeacons:  service:  - services:  Spooler:  onchangeonly: true This is what the event will look like in the events if you are monitoring.\nsalt/beacon/DBH-211/service/Spooler {  \u0026#34;Spooler\u0026#34;: {  \u0026#34;running\u0026#34;: true  },  \u0026#34;_stamp\u0026#34;: \u0026#34;2021-08-06T11:53:57.212810\u0026#34;,  \u0026#34;id\u0026#34;: \u0026#34;DBH-211\u0026#34;,  \u0026#34;service_name\u0026#34;: \u0026#34;Spooler\u0026#34; } Reactors: Reactor File: Monitors the event bus for events specified. IE: salt/beacon/*/service/Spooler reactor:  - \u0026#39;salt/auth\u0026#39;: # React to a new minion  - salt://reactor/accept-key.sls # Run this state to auto accept new minion  - \u0026#39;salt/beacon/*/service/Spooler\u0026#39;: # React to Spooler Service Change  - salt://vCROCS/spooler_auto_stop.sls # Run this state How the beacons and reactors work together: # What this line is doing in the reactor is watching for an beacon event from any minion # The * means all minions. You could specify a minion name. # Looking for service events.  # The service event that is specified is the Spooler event.   - \u0026#39;salt/beacon/*/service/Spooler\u0026#39;   # This is the event sent from the beacon to the event bus  salt/beacon/DBH-211/service/Spooler  # What the reactor is looking for and what the beacon sent matches. # The state specified in the reactor will now run # This is the state specified in my example   - salt://vCROCS/spooler_auto_stop.sls State File: State File: Stops the Spooler Service if it was started {% if data[\u0026#39;Spooler\u0026#39;][\u0026#39;running\u0026#39;] == true %} stop_service:  local.service.stop:  - tgt: {{ data[\u0026#39;id\u0026#39;] }}  - arg:  - Spooler {% endif %} State File: Starts the Spooler Service if it was stopped {% if data[\u0026#39;Spooler\u0026#39;][\u0026#39;running\u0026#39;] == False %} start_service:  local.service.start:  - tgt: {{ data[\u0026#39;id\u0026#39;] }}  - arg:  - Spooler {% endif %}  Beacons: To copy the beacon file to the minions I created a Job that I can manually run.\nJob to copy a file to a minion:  Click Here to see Larger Image of Screen Shot\nAfter the beacon file is copied to the minion you MUST restart the minion service.\nJob to restart minion service:  Click Here to see Larger Image of Screen Shot\n Lessons Learned:  Beacons are a good way to make sure the configuration you want is not altered. Beacons can monitor more than just services that I am showing in this blog post. I will cover more use cases in future blog posts.   Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config  When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"August 27, 2021","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-config-part-03/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 3"},{"categories":["VMworld"],"contents":" Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895]     I will be doing a VMworld presentation for the first time at VMworld 2021. I have attended VMworld since 2012 and it has been a goal of mine to do a presentation at a VMworld since the first year I attended. There are always so many good sessions to attend. We are putting many hours into this presentation so that the people attending feel it was worth their time and learn a lot about the topic. We have a awesome topic and some great presentations to show.\nSo register today for VMworld 2021 and attend my session.\n Session Name: Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895]\nDescription: This session will include an overview of vRealize SaltStack Config and see how a customer in the healthcare vertical is managing their fleet of Windows systems using vRealize Automation SaltStack Config (SSC).\nPresenters: Vincent Riccio, TMM, VMware\nDale Hassinger, Lead Systems Engineer - SME\nTopic: Manage \u0026amp; Operate Multiple Clouds\nTrack : Multi-Cloud\nPrimary Product: VMware vRealize Automation / vRealize Automation Cloud\nPrimary Audience: Infrastructure Engineer\nSession Type: Breakout Session\nLevel: Technical 200\nPass Type: General and Tech+ Passes\nVMworld online conference: 10/05/2021-10/07/2021\n Link to session in VMworld Content Catalog:\nManage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895]   In our Presentation we wil show how to use SaltStack Config to manage Microsoft Windows Servers. How to use Salt to install software, work with Windows Services, make Registry changes, configuration management, and other normal day to day Windows Server administration.\n ","date":"August 12, 2021","image":"https://www.vcrocs.info/images/post/vmworld2021-logo-stacked_huc9c449c472c251bd5b678930e402b2fa_16739_650x0_resize_q100_box.jpg","permalink":"/blog/vmworld-2021-mcl1895/","title":"VMworld 2021 - SaltStack Config Session"},{"categories":["SaltStack Config"],"contents":" Part 2: How to use SaltStack Config with Windows Server and PowerShell      I have been able to spend more time with VMware vRealize SaltStack Config. Here are some updates on my journey with SaltStack as a Windows Server Admin.   Auto-Accept new minions: I wanted new Windows Server builds (minions) to be auto accepted into SaltStack Config instead of someone manually approving new minions. To do this you need to have a reactor.conf file. I created the file in SaltStack Config File Server in base/reactor/reactor.conf (See Code below). You also need to create a reactor.conf file in /etc/salt/master.d on the salt master. I use vi to create and edit the reactor.conf file. Anytime you make changes to the /etc/salt/master.d/reactor.conf file you need to restart the salt-master service.\nIn addition to the reactor file you need to create a state file. I located the file in /reactor/accept-key.sls (See Code below). I specified what the name of the new server starts with so that not all new minions get auto accepted. If the Naming Standard that I use is not what the new Server is named it will not be auto accepted. This is one way to have some rules on which new Servers are auto accepted.\n Reactor File: base/reactor/reactor.conf reactor:  - \u0026#39;salt/auth\u0026#39;: # React to a new minion  - salt://reactor/accept-key.sls # Run this state to auto accept new minion Location of the Reactor File:  Click Here to see Larger Image of Screen Shot\n State File: base/reactor/accept-key.sls {% if \u0026#39;act\u0026#39; in data and data[\u0026#39;act\u0026#39;] == \u0026#39;pend\u0026#39; and data[\u0026#39;id\u0026#39;].startswith(\u0026#39;DBH\u0026#39;) %} minion_add:  wheel.key.accept:  - args:  - match: {{ data[\u0026#39;id\u0026#39;]}} {% elif \u0026#39;act\u0026#39; in data and data[\u0026#39;act\u0026#39;] == \u0026#39;pend\u0026#39; and data[\u0026#39;id\u0026#39;].startswith(\u0026#39;vCROCS\u0026#39;) %} minion_add:  wheel.key.accept:  - args:  - match: {{ data[\u0026#39;id\u0026#39;]}} {% endif %} Location of the State File:  Click Here to see Larger Image of Screen Shot\n To restart the salt-master service run this command from the salt-master cli. service salt-master restart To check the status of the salt-master service run this command from the salt-master cli. systemctl status salt-minion.service  Jobs: I think a good way to get Started with SaltStack Config after you have some minions added is to create some Jobs. You can create Jobs in the SaltStack Config UI. Go to Config/Jobs. You can manually run these Jobs on the minions.\nHere are some screen shots of jobs that can be useful. To run a job on a single minion go to minions and find the minion you want to run the job on, Select the minion, Select Run Job, Select the Job you want to run, select Run Now. If you select multiple minions the Job will run on all minions selected.\nThat is where you start to see the True Power of Salt. If you Select one, ten, a hundred or a thousand minions, the time to complete the selected job is very quick. As a Windows Admin and using PowerShell, it would not be as easy to run a script on a 1,000 Servers at the exact same time.\n List of all the Jobs:  Click Here to see Larger Image of Screen Shot\n Job to stop the Print Spooler Service:  Click Here to see Larger Image of Screen Shot\nThis job I am using a salt function service.stop. Pass the Service name as a argument.\n Job to stop the Print Spooler Service using a PowerShell Command:  Click Here to see Larger Image of Screen Shot\nThis job I am using a salt function cmd.run. Pass the PowerShell code and type of cmd as arguments.\n Job to stop and disable the Print Spooler Service using a PowerShell script:  Click Here to see Larger Image of Screen Shot\nThis job I am using a salt function cmd.script. Pass the PowerShell script path and type of cmd as arguments.\n Job to copy a file to a minion:  Click Here to see Larger Image of Screen Shot\nThis job I am using a salt function cp.get_file. Pass the file source path and destination path as arguments.\n Job to reboot a minion:  Click Here to see Larger Image of Screen Shot\nThis job I am using a salt function system.reboot. Pass the wait time to reboot and wait_for_reboot as arguments.\n If you noticed I have some jobs doing the same process but one is using a salt function and one is using a PowerShell command. I wanted to show you how your existing PowerShell skills as a Windows Server Admin can be used in SaltStack Config. You don\u0026rsquo;t need to re-learn everything. Using PowerShell with a job is also very helpful when there is not a salt function to do what you need to accomplish. I have been trying to use the built-in salt functions whenever possible to get more familiar with the product.\nHere is a saying that someone wrote or said that I seen online about salt. When in doubt, command out.\n Lessons Learned:  Auto Accepting Minions is a nice start to using SaltStack Config with new vRealize Automation Server Builds. The new server will get auto accepted and you can then setup a State to install software like the Carbon Black Agent on every new Server. Running a job on a 1,000 Servers is just as easy as running a job on a single server.   Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config  When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"August 5, 2021","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-config-part-02/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 2"},{"categories":["SaltStack Config"],"contents":" Part 1: How to use SaltStack Config with Windows Server and PowerShell      I have recently started looking at using VMware vRealize SaltStack Config. This blog is a work in progress on my journey with Salt. I started at **zero** and let's see what I discover as I work towards getting to PROD**. So if this topic is interesting to you, check back often. I wanted to learn one of the server configuration products that are available like Salt, Puppet, Chef, Ansible, etc\u0026hellip; but I wasn\u0026rsquo;t sure which would be the best choice long term. When VMware purchased SaltStack Config the product to choose became a lot easier for me. SaltStack Config is included with vRealize Suite for licensing and I can call VMware support for help, SaltStack Config became the obvious product to pick.\nI like to show how to use VMware vRealize Products from a Windows Server Admin point of view. I do work with both Windows Servers and Linux Servers but most information you see online with Salt is using Linux Servers. I also do most of my current automation with PowerShell scripts. I do not want to lose all the time invested into the logic with my current PowerShell scripts.\n  I am not going to go thru the process to install SaltStack Config. There is already some very good blogs written on installing SaltStack Config. One item I would recommend with installing Salt-Stack Config is to use VMware vRealize Life Cycle Manager (\u0026ldquo;LCM\u0026rdquo;). LCM makes the process to install SaltStack Config a lot easier. This Blog is assuming you already installed SaltStack Config, now how do I use salt and what do I use salt for.\nInstalling and Configuring SaltStack Config  The first step (minions): After you get a working SaltStack Config Server setup, the first item you need to do is add the salt agent to some \u0026ldquo;Test\u0026rdquo; servers. Servers that have the salt agent installed are called minions. There is the option to not add the salt agent to servers but then you need to use SSH to connect. Windows Servers do not have SSH available as default so you would need to install an SSH server like OpenSSH on your servers. My thoughts are I need to add something for the minions to communicate with the salt-master. Instead of adding OpenSSH to every Windows Server I chose to install and use the salt agent.\nFor testing you can manually install the minion agent on a server to become familiar with how the salt commands work. During the install there are two values you need to enter. The name of the master and the name you want to use for the minion. I did that on my first couple test servers but then I created some PowerShell code to install the salt minion agent. # ----- [ Install minion ] -----------------------------------------------  # Define Username/Password $username = \u0026#39;username@vCROCS.info\u0026#39;  # The next line is how to create the encrypted password # Read-Host -Prompt \u0026#34;Enter your password - username\u0026#34; -AsSecureString | ConvertFrom-SecureString | Out-File \u0026#34;C:\\PWkey\\username.key\u0026#34; $password = Get-Content \u0026#34;C:\\PWkey\\username.key\u0026#34; | ConvertTo-SecureString $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password  # ----- [ This section connects you to vCenter where VM is located ] -----  # Connect to vCenter vCenterName = \u0026#39;vCenter.vCROCS.info\u0026#39; Connect-VIServer $vCenterName -Credential $cred  # ----- [ Install Salt Agent ] -------------------------------------------  # Name of Server to install the salt minion agent $vmName = \u0026#39;DBH-217\u0026#39;  # Copy the minion agent file to your windows server Copy-VMGuestFile -Source G:\\Salt-Minion-2019.2.4-Py3-AMD64-Setup.exe -Destination \u0026#39;C:\\vCROCS\u0026#39; -VM $vmName -LocalToGuest -GuestCredential $cred  # command string to install the Salt Minion Agent $PSText = \u0026#39;C:\\vCROCS\\Salt-Minion-2019.2.4-Py3-AMD64-Setup.exe /S /master=salt /minion-name=\u0026#39; + $vmName  # Run the command on remote Server Invoke-VMScript -VM $VMName -ScriptType bat -ScriptText $PSText -GuestCredential $cred\nAfter the minion agent is installed on your server you need to accept the key on the salt master. From the CLI you can run these commands.\nList all keys. You should see you new minion listed in the Unaccepted Keys: salt-key -L\nAccept the new minion key on the salt master: salt-key --accept=\u0026#34;DBH-217\u0026#34;\nIf you list all keys again you should see you new minion listed in the Accepted Keys: salt-key -L\nMy next update will include information on how to auto accept new minions.\n Here are some basic salt commands from CLI that I have been using: Show all events:\nsalt-run state.event\n Click Here to see Larger Image of Screen Shot\nShow all events with a \u0026ldquo;Pretty\u0026rdquo; view:\nsalt-run state.event pretty=true\n Click Here to see Larger Image of Screen Shot\nList keys:\nsalt-key -L\nAccept Key: salt-key --accept=\u0026#34;DBH-214\u0026#34;\nDelete Key: salt-key -d \u0026#34;DBH-211,DBH-212\u0026#34;\nRun a function on one minion: salt \u0026#34;DBH-217\u0026#34; disk.usage\nRun a function on multiple minions: salt \u0026#34;DBH-217,DBH-218\u0026#34; test.ping\nRun a function on all minions: salt \u0026#34;*\u0026#34; test.ping\nCreate a file: salt \u0026#34;DBH-214\u0026#34; file.touch C:\\vCROCS\\salt.tst\nCopy a file: salt \u0026#34;DBH-214\u0026#34; cp.get_file salt://vCROCS/vCROCSTEST.ps1 \u0026#34;C:\\vCROCS\\vCROCSTEST.ps1\u0026#34;\nDelete a file: salt \u0026#34;DBH-214\u0026#34; file.remove \u0026#34;C:\\vCROCS\\vCROCSTEST.ps1\u0026#34;\nRun a PowerShell Script: salt \u0026#34;DBH-214\u0026#34; cmd.script source=\u0026#34;salt://vCROCS/vCROCSTEST.ps1\u0026#34; shell=powershell\nRestart the Salt Master Service: service salt-master restart\nShow the status of the raas and salt-master services: systemctl status raas systemctl status salt-master\nStop and start the salt-master service: systemctl stop salt-master systemctl start salt-master\nGet IP address of all minions: salt \u0026#39;*\u0026#39; network.ip_addrs\nPing All Minions: salt \u0026#34;*\u0026#34; test.ping\nDisk Space Usage on all Minions: salt \u0026#34;*\u0026#34; disk.usage\n Lessons Learned:  Anything you can do in the SaltStack Config GUI you can do in CLI. I find myself using the CLI for most testing. After I have the commands correct I will then add into the GUI. DO NOT have the minion agent version newer than the Salt-Master. I am going to try and keep the salt-master and minions always at the same version. The minion can be at an older version than the salt-master. During my upgrade from SaltStack Config 8.3 to 8.4 the Salt API did not upgrade. I didn\u0026rsquo;t remember seeing any errors in LCM after the upgrade. The raas service was at version 8.4 and the salt API was at 8.3. I had authentication issues, I could not accept keys, etc\u0026hellip; I opened an SR with VMware and they helped me fix the issue. The support I received from VMware with Salt was probably the best support I received on any VMware product.   Salt Links I found to be very helpful:  SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config  When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"July 16, 2021","image":"https://www.vcrocs.info/images/post/salt_huea633dfc62497ad674470427f21ef8c9_166891_650x0_resize_box_3.png","permalink":"/blog/saltstack-config-part-01/","title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 1"},{"categories":["vRealize Operations"],"contents":"Using vROPS Data to help show APP Owners Proper VM Sizing:  vRealize Operations does a good job to show you what the correct number for vCPU/Memory settings should be based on monitoring history. But instead of showing APP owners a screen that just shows what the current VM vCPU/Memory settings are and what the new settings \u0026ldquo;Should\u0026rdquo; be, I wanted to show the real data that proves why these changes should be made. It can still be hard for people to understand that taking away a VM resources can make performance better. If a mechanic told you to replace a v-8 engine in a vehicle with a 4 cylinder to get more performance, would you believe them? Probably not!\nvROPS Right Sizing does not just show you what vCPU to remove to make a VM performance better. If a VM requires more vCPU resources there is a Metric CPU|Add that can be very useful.\nvROPS Right Size Screen:\nVM Names were removed from screen Shot Click Here to see Larger Image of Screen Shot  In vCenter if you look at the performance of a VM one of the options is to show CPU Ready|State (ms). I think this is a metric that you can show to an APP Owner and they can understand why this is important.\nCPU Ready|State (ms): \"Time that the virtual machine was ready, but could not get scheduled to run on the physical CPU during last measurement interval\" \n vCenter VM Advanced Performance: Click Here to see Larger Image of Screen Shot \n vCenter VM Advanced Performance Settings: Click Here to see Larger Image of Screen Shot  When I looked at vROPS OOTB (Out of the Box) the VM CPU Metric CPU|Ready (ms) was not being collected. I wanted to be able to show the CPU Metric CPU|Ready (ms) in a Right-Size/Performance Dashboard to show APP Owners this value.\nSteps to add Metric CPU|Ready (ms) to vROPS:  Administration: Policies. Select your Default Policy. Edit Policy. Select Object Type: Virtual Machine Filter for the word Ready. Expand the metrics/CPU. You will see Ready (ms) Disabled. Change State and Instanced State to Enabled. Save See the (2) screen shots below.  \n  Click Here to see Larger Image of Screen Shot\n Click Here to see Larger Image of Screen Shot\n  Here is a vROPS Dashboard that I created to show APP Owners Performance information and Right Sizing information in a \"Single Pane of Glass\". A question the APP Owners always ask is WHY should we take resources away from a VM to make the performance better. If you look at the Column CPU|Remove and then look at the column CPU|Ready (ms), the CPU|Ready (ms) is much higher on VMs that are NOT Right Sized. In one Dashboard I am showing several CPU performance metrics, vSAN performance metrics, CPU configuration (Counts/Hot ADD) and Right Sizing. I like to be able to look at all these metrics at the same time. Nice to be able to see if there is a relationship between performance, latency and Right Sizing. Does CPU performance affect the vSAN performance? Here is a VM that CPU|Remove is 0 and the CPU|Ready (ms) is much lower. Why is that? \n Dashboard Screen Shot: VM Names were removed from screen Shot\nClick Here to see Larger Image of Screen Shot\nClick here to Download Dashboard and Views from VMware Code Web Site\n CPU | Ready (ms) metric after using vROPS Right Size recommendation:  Click Here to see Larger Image of Screen Shot\nThis metric chart is showing a VM that had 12 CPU. vROPS recommended that the CPU count be 10. Before VM CPU count was changed to 10 you can see the CPU|Ready (ms) was running between 1500 - 2000 (ms). After the VM CPU count was changed to 10 you can see the CPU|Ready (ms) was running between 500 - 600 (ms). If you would do this across 100s of VMs in a cluster you would see even more performance gains because then the \u0026ldquo;Noisy Neighbors\u0026rdquo; would not be as Noisy.\n Performance Values:  CPU|Ready (ms) should be 1000 or less for best performance CPU|Remove - I like to keep this at 2 or less. For some applications this can be trial and error. CPU|Add - I like to keep this at 0. Make sure the VM is sized with enough resources. Don\u0026rsquo;t under size VMs. This will keep the APP Owners Happy!   The next section was in an IBM KB article that I found helpful: CPU ready time is a vSphere metric that records the amount of time a VM is ready to use CPU but was unable to schedule physical CPU time because all the vSphere ESXi host CPU resources are busy. CPU ready time is dependent on the number of VMs on the host and their CPU loads. It is normal for a VM to average between 0–50 ms of CPU ready time; anything over 1000 ms is considered to lead to VM performance problems.\nVMs that are configured with multiple vCPUs will suffer from an increased amount of ready time than compared to VMs with fewer vCPUs configured. Ready time increases as the VM needs more vCPU resources to be made available at the same time and, therefore, may have to wait for extended times for all the required vCPUS to be free to be made available to the VM with more vCPUs.\n In Addition to Right Sizing, I also think that Optimizing a VM is important. VMware has a Fling available that I like to use VMware OS Optimization Tool that helps you optimize CPU Settings.  Dashboard Tips:  Add Color to the list data to make poor performance values catch your eye. (I used Red) Use Donut Charts to show some of the metrics that you feel are more important.  To add color to List View values, use Show advanced settings for a metric:\n\n Click Here to see Larger Image of Screen Shot Enter the metric values when you want the color to change:\n Click Here to see Larger Image of Screen Shot\nI like using Donut Charts in Dashboards. You can show a lot of data in a small amount of screen space. Using colors also catches your eye quickly when there are issues:\n Click Here to see Larger Image of Screen Shot\n When I write about Automation I always say there are many ways to accomplish the same task. Monitoring is the same way. I am showing what I felt was important to see but every organization will be different. Add/Remove columns in the Dashboard to suite you needs. There is no right or wrong way to monitor. Maybe other metrics make more sense to you. What is important with monitoring is don\u0026rsquo;t install vRealize Operation and not use it. Don\u0026rsquo;t make vROPS Shelfware! This is a GREAT Tool that shows you so much information about your virtual environment. And it keeps getting better\u0026hellip;\n","date":"May 15, 2021","image":"https://www.vcrocs.info/images/post/vro_huea633dfc62497ad674470427f21ef8c9_21754_650x0_resize_box_3.png","permalink":"/blog/vrealize-operations-right-size/","title":"How vRealize Operations can help with Right Sizing VMs"},{"categories":["Zero Trust"],"contents":" How to check if ports are open to a remote server  PowerShell Code Use PowerShell to see if ports are open to a remote server.\nLiving in a zero trust environment can be challenging. Here is some code that I have been using to test for open ports from a Windows server to any type of destination. Just change PortNumber and Destination for your use case.\n# --- Is Port Open $PortNumber = \u0026#39;443\u0026#39; $ComputerName = \u0026#39;Server.vCrocs.info\u0026#39;  $results = Test-NetConnection -ComputerName $ComputerName -Port $PortNumber  Write-host \u0026#39;Computer Name:\u0026#39;$ComputerName Write-host \u0026#39;Port:\u0026#39;$PortNumber Write-host \u0026#39;Port Open:\u0026#39;$results.TcpTestSucceeded Linux Commands If you work with VMware vRealize Suite of appliances here are some commands (curl and Netcat) that can be used with Linux OS to test if ports are open to destination servers.\ncurl -v telnet://server01.vCROCS.info:443 nc -ztv server01.vCROCS.info 443 -w 3 ","date":"April 24, 2021","image":"https://www.vcrocs.info/images/post/port-check_huea633dfc62497ad674470427f21ef8c9_50029_650x0_resize_box_3.png","permalink":"/blog/check-ports/","title":"Open Ports - Zero Trust"},{"categories":["RVTools"],"contents":" Export RVTools xls Files Everyday   PowerShell Code I like to create a Scheduled Task in vRealize Orchestrator to create RVTools files everyday. Here is a sample PowerShell script that could be used. The script is also on a 7 day rotation of files and automatically deletes old files. On the 1st of every month a file will also be created for history that is not deleted.\n$LogInfo = \u0026#39;Starting Process to create an RVTools xlsx file for each vcenter.\u0026#39; $LogInfo  $LogInfo = \u0026#39;Creating xlsx file for vCenter vCenter01...\u0026#39; $LogInfo Start-Process -FilePath \u0026#34;C:\\Program Files (x86)\\Robware\\RVTools\\RVtools.exe\u0026#34; -ArgumentList \u0026#39;-s vCenter01.vCROCS.info -u administrator@vsphere.local -p \u0026#34;_RVToolsPWDNRTAG7hackme!bwqahk2a4\u0026#34; -c Exportall2xls -d \u0026#34;V:\\RVTools\\vCenter01\u0026#34;\u0026#39; -Wait  $LogInfo = \u0026#39;Creating xlsx file for vCenter vCenter02...\u0026#39; $LogInfo Start-Process -FilePath \u0026#34;C:\\Program Files (x86)\\Robware\\RVTools\\RVtools.exe\u0026#34; -ArgumentList \u0026#39;-s vCenter02.vCROCS.info -u administrator@vsphere.local -p \u0026#34;_RVToolsPWDNRTAG7hackme!bwqahk2a4\u0026#34; -c Exportall2xls -d \u0026#34;V:\\RVTools\\vCenter02\u0026#34;\u0026#39; -Wait   # Create a RVTools file that will not be deleted for history on the 1st of every month $DayofMonth = Get-Date -Format \u0026#34;dd\u0026#34;  if($DayofMonth -eq \u0026#39;01\u0026#39;){ Start-Process -FilePath \u0026#34;C:\\Program Files (x86)\\Robware\\RVTools\\RVtools.exe\u0026#34; -ArgumentList \u0026#39;-s vCenter01.vCROCS.info -u administrator@vsphere.local -p \u0026#34;_RVToolsPWDNRTAG7hackme!bwqahk2a4\u0026#34; -c Exportall2xls -d \u0026#34;V:\\RVTools\\Archive\\vCenter01\u0026#34;\u0026#39; -Wait Start-Process -FilePath \u0026#34;C:\\Program Files (x86)\\Robware\\RVTools\\RVtools.exe\u0026#34; -ArgumentList \u0026#39;-s vCenter02.vCROCS.info -u administrator@vsphere.local -p \u0026#34;_RVToolsPWDNRTAG7hackme!bwqahk2a4\u0026#34; -c Exportall2xls -d \u0026#34;V:\\RVTools\\Archive\\vCenter02\u0026#34;\u0026#39; -Wait }    $LogInfo = \u0026#39;Removing all XLSX files older than 7 days...\u0026#39; $LogInfo  # Delete all RVTools Files in older than 7 day(s) $Daysback = \u0026#34;-7\u0026#34; $CurrentDate = Get-Date $DatetoDelete = $CurrentDate.AddDays($Daysback)  $Path = \u0026#34;V:\\RVTools\\vCenter01\u0026#34; Get-ChildItem $Path -Recurse | Where-Object { $_.LastWriteTime -lt $DatetoDelete } | Remove-Item -Confirm:$false -Force -Recurse  $Path = \u0026#34;V:\\RVTools\\vCenter02\u0026#34; Get-ChildItem $Path -Recurse | Where-Object { $_.LastWriteTime -lt $DatetoDelete } | Remove-Item -Confirm:$false -Force -Recurse ","date":"April 24, 2021","image":"https://www.vcrocs.info/images/post/rvtools_huea633dfc62497ad674470427f21ef8c9_21762_650x0_resize_box_3.png","permalink":"/blog/schedule-rvtools/","title":"Schedule RVTools Data Export"},{"categories":["vRealize Operations"],"contents":" The New vRealize Operations Features I use the most.      Donut Charts.  This is one of my favorite new features. The donut chart allows you to show a lot of information in a smaller space and makes the Dashboards look more modern and clean looking. I have been replacing the Heat Map Widgets on some of my custom Dashboards with Donut Charts. If you click on the colors of the Donut charts you will then get a list of the data that makes up that color.   Top-N Chart and Color Method.  Adding color to the Top-N makes it so much more usable. With the previous version where is was just blue it didn\u0026rsquo;t grab your eye like adding the color. Using the Top-N chart and the Donut chart together makes a GREAT looking Dashboard. See my example below.   Ping Monitoring.  This feature always us to monitor non VMware devices. In a short period of time I learned a lot about latency and packet drops in our environment.   Troubleshooting Workbench.  In previous versions of vROPS I would create Dashboards to help with trouble shooting. With Trouble Shooting work bench I don\u0026rsquo;t need to create those custom Dashboards anymore. The included Trouble Shooting workbench is like what I did on steroids.    Donut Chart and Top-N Example:  Click Here to see Larger Image of Screen Shot\nThis single Dashboard has a lot of info that would has taken several Dashboards to show same amount of data using Heat Maps. This would be a good example of a Dashboard that managers may want to see.\n Click Here to see Larger Image of Screen Shot\nDonut Chart Config:  Create a Distribution View. Make the visualization a Donut Chart. Use Manual distribution. Create Buckets and set the values/colors for the Buckets. Add the View to a Dashboard.   Click Here to see Larger Image of Screen Shot\n Click Here to see Larger Image of Screen Shot\nTop-N Chart Config:  Add Top-N Widget to Dashboard Define configuration and Input Transformation. Output Data:Color Method:Custom is where you define the color values.   Click Here to see Larger Image of Screen Shot\n","date":"February 20, 2021","image":"https://www.vcrocs.info/images/post/vro_huea633dfc62497ad674470427f21ef8c9_21754_650x0_resize_box_3.png","permalink":"/blog/vrops8-new-features/","title":"vRealize Operations 8.x - New Features"},{"categories":["vRealize Automation"],"contents":" Options to use PowerShell Modules   I like to review VMware vRA (vRealize Automation) 8.2 as a Microsoft Windows Server Admin. Most of the reviews you see are creating Linux VMs and customizing the OS using tools for Linux. I create Windows/Linux VMs and customize the OS using a new feature added to vRA 8.x, Action Based Extensibility (ABX) with PowerShell.\nIn my vRA 7.6 environment I use a PowerShell Host to run processes and on the PowerShell Host is where I install all the PS Modules that I use. When I started looking at how to use PowerShell with vRA 8.2 the one item that I needed to understand was how to use PowerShell Modules. VMware does have a Blog Post on how to include PowerShell modules with ABX Actions/vRO Work Flows - Click Here to see the Blog Post. After doing some testing and reviewing my options I decided to continue to use a PowerShell Host with vRA 8.2. What this allows me to do is use the same exact PowerShell Host for 7.6 and 8.2. The existing PS scripts that I have also work with both 7.6 and 8.2. No changes to any scripts and the PS Host. I like how VMware included PS as an options for all scripts within vRA 8.2. Hopefully in the future VMware will allow you to install your own PS Modules directly in the vRA Appliance. The one item that some people may not like about this setup is it does require an additional Windows Server that a standard vRA setup does not require. But to be able to use an existing Windows PS Host that can be shared between vRA 7.6 and 8.2 until I get my environment to 100% vRA 8.2 also has it positives. With Automation there is always many ways to complete the same task.\nI wrote a Blog Post previously that describes how to pass Cloud Template inputs/properties to ABX Actions. This Post is really using that same technique but instead of only running an ABX Action, this ABX Action Script is passing the inputs/customproperties onto a PowerShell Host. Here is link to previous post: VREALIZE AUTOMATION 8.2 - POWERSHELL ABX. By passing the custom properties as parameters to a PS Host I can also use PS Modules to connect to SQL servers and many other options. Basically any PS Module that is available can be used.\n Details on how to use a ABX Script with a PowerShell Host: Step 1:  Create a Cloud Template. (See included yaml code and screen shot). Create inputs for the parameters you need to send to a PS script that will run on the PS Host. The inputs are the values that are used for the resource/properties. (See included yaml code) Create Properties in the resources section of the yaml for the inputs you just created. These properties will be the parameters that get passed to the PS Script. The properties get passed to the ABX script using $payload. (See included PS code)   Step 2: Create a PowerShell ABX Action. (See included PS code and screen shot) To get the custom properties from the Cloud Template you need to use $payload. $payload.customProperties.\"Properties Name\" is how you get the values from the $payload. You can assign the custom properties to a variable within the ABX PS code. I use Invoke-VMScript to run the PS Script on the PS Host because my environment is also a Zero Trust Environment. Invoke-VMScript allows me to run PS scripts on remote servers without opening ports to the remote servers.   Step 3: Create a Subscription. See Screenshot. The subscription is want runs the ABX scripts. A subscription can be Fired before or after a compute resource gets provisioned. I create a subscription for both in my environment. Within the subscription is where you define which ABX script is run. If you would want to string several ABX scripts together, the subscription could also run a ABX Flow.   Sample Code and Screen Shots: Cloud Template:  Click Here to see Larger Image of Screen Shot\nThe properties under resources in the yaml code will be used like parameters in a PS Script. Since I have a background in PowerShell that is how I am using the properties. When you deploy the Cloud Template, the values entered that I defined will not be used until the ABX script runs. The ABX Script will run after the subscription is triggered. The values will be passed from the Cloud Template to the ABX Script using $payload. Just like passing parameters to a PS script.\n# Created by Dale Hassinger - vCrocs.info # Date: 01/14/2021 # Send Property Values to ABX Script that runs script on PS Host with all Zero Trust Permissions and Modules # Version: 1 formatVersion: 1 # ---------- [ Inputs ] ---------- # inputs:  cpu:  type: integer  description: CPUs  default: 2  mem:  type: integer  description: Memory(MB)  default: 8192  VMName:  type: string  title: Enter VM Name  minLength: 1  maxLength: 15  default: DBH-001  TemplateName:  type: string  description: \u0026lt;b\u0026gt; Select Windows or Ubuntu.\u0026lt;/b\u0026gt; \u0026lt;br\u0026gt;  default: vRA_Ubuntu_18.04.4  title: OS  oneOf:  - title: Ubuntu  const: vRA_Ubuntu_18.04.4  - title: Windows 2016  const: vRA_TEMPLATE_2016  - title: Windows 2019  const: vRA_TEMPLATE_2019  CustomizationSpec:  type: string  default: vRA_Ubuntu  description:  type: string  default: vRA 8.2 TEST VM  environment:  type: string  description: \u0026#39;\u0026lt;b\u0026gt; Select Environment.\u0026lt;/b\u0026gt; \u0026lt;br\u0026gt;\u0026#39;  default: \u0026#39;environment:Management\u0026#39;  title: Environment  oneOf:  - title: Compute  const: \u0026#39;environment:Compute\u0026#39;  - title: Management  const: \u0026#39;environment:Management\u0026#39;  - title: DevTest  const: \u0026#39;environment:DevTest\u0026#39;  department:  type: string  description: \u0026lt;b\u0026gt; Select Application Team.\u0026lt;/b\u0026gt; \u0026lt;br\u0026gt;  default: \u0026#39;department:APP Team 1\u0026#39;  title: Application Team  oneOf:  - title: APP Team 1  const: \u0026#39;department:APP Team 1\u0026#39;  - title: APP Team 2  const: \u0026#39;department:APP Team 2\u0026#39;  - title: APP Team 3  const: \u0026#39;department:APP Team 3\u0026#39;  IP:  type: string  default: 192.168.86.200  emailAddress:  type: string  default: Dale.Hassinger@vCROCS.info  RootPartition:  type: integer  default: 20  BuildBY:  type: string  default: DaleHassinger  BuildRequestor:  type: string  default: KirkShaffer  OSVersion:  type: string  default: Ubuntu18044 # ---------- [ Resources ] ---------- # resources:  Cloud_Network_1:  type: Cloud.Network  properties:  networkType: existing  address: \u0026#39;${input.IP}\u0026#39;  constraints:  - tag: \u0026#39;${input.environment}\u0026#39;  - tag: \u0026#39;${input.department}\u0026#39;  Cloud_vSphere_Machine_1:  type: Cloud.vSphere.Machine  properties:  image: \u0026#39;${input.TemplateName}\u0026#39;  flavor: std  cpu: \u0026#39;${input.cpu}\u0026#39;  mem: \u0026#39;${input.mem}\u0026#39;  customizationSpec: \u0026#39;${input.CustomizationSpec}\u0026#39;  emailAddress: \u0026#39;${input.emailAddress}\u0026#39;  RootPartition: \u0026#39;${input.RootPartition}\u0026#39;  BuildBY: \u0026#39;${input.BuildBY}\u0026#39;  BuildRequestor: \u0026#39;${input.BuildRequestor}\u0026#39;  OSVersion: \u0026#39;${input.OSVersion}\u0026#39;  constraints:  - tag: \u0026#39;${input.environment}\u0026#39;  networks:  - network: \u0026#39;${resource.Cloud_Network_1.id}\u0026#39;  assignment: static  address: \u0026#39;${input.IP}\u0026#39;  name: \u0026#39;${input.VMName}\u0026#39;  description: \u0026#39;${input.description}\u0026#39; ABX Action Script:  Click Here to see Larger Image of Screen Shot\nIn my PowerShell code I am using Write-Host to help show how the Cloud Template passes values to the ABX Action using the $payload. I use the code to troubleshoot and understand how it is working. I am able to take values from the payload customProperties and assign to variables. The customProperties are defined in the Cloud Template yaml code as resources/properties. I can then make decisions in the code based on these values. For production the write-host lines could be removed.\nfunction handler($context, $payload) {   # Build PowerShell variables  $VMName = $payload.resourceNames  $cpu = $payload.customProperties.cpu  $mem = $payload.customProperties.mem  $description = $payload.customProperties.description  $IPaddress = $payload.addresses  $emailAddress = $payload.customProperties.emailAddress  $RootPartition = $payload.customProperties.RootPartition  $BuildBY = $payload.customProperties.BuildBY  $BuildRequestor = $payload.customProperties.BuildRequestor  $OSVersion = $payload.customProperties.OSVersion   # Show PS variables  Write-Host \u0026#39;VMName:\u0026#39; $VMName  Write-Host \u0026#39;CPU:\u0026#39; $cpu  Write-Host \u0026#39;Memory:\u0026#39; $mem  Write-Host \u0026#39;Description:\u0026#39; $description  Write-Host \u0026#39;IPaddress:\u0026#39; $IPaddress  Write-Host \u0026#39;Email:\u0026#39; $emailAddress  Write-Host \u0026#39;Root:\u0026#39; $RootPartition  Write-Host \u0026#39;Build By:\u0026#39; $BuildBY  Write-Host \u0026#39;Build BuildRequestor:\u0026#39; $BuildRequestor  Write-Host \u0026#39;OS Version:\u0026#39; $OSVersion   # ----- [ Define Username/ Get Password ] ------------------------------------------------------------------  $HashiVaultPW = \u0026#39;vCROCS#1\u0026#39;   Write-Host $HashiVaultPW   $username = \u0026#39;administrator@vsphere.local\u0026#39;  Write-Host $username   # ----- [ Connect vCenter and run PS Script on PS Host ] ------------------------------------------------------------------   # Connect to vCenter to be able to connect to PS Host  Connect-VIServer -Server vCenter01.vCROCS.info -User $username -Password $HashiVaultPW -Protocol https -Force   # PS Host Name  $PSHost = \u0026#39;vCROCSPSHost\u0026#39;  Write-Host \u0026#39;PS Host:\u0026#39;$PSHost   # PS Script text  $PSParameters = \u0026#34;-VMNAME \u0026#39;\u0026#34; + $VMName + \u0026#34;\u0026#39; -emailAddress \u0026#39;\u0026#34; + $emailAddress + \u0026#34;\u0026#39; -RootPartition \u0026#39;\u0026#34; + $RootPartition + \u0026#34;\u0026#39;\u0026#34;  Write-Host \u0026#39;PS Parameters:\u0026#39;$PSParameters   $PSScript = \u0026#39;G:\\Scripts\\Create-Linux-Server-Step-3-v01.ps1\u0026#39;  Write-Host \u0026#39;PS Script:\u0026#39;$PSScript   $PSText = \u0026#39;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe \u0026#34;\u0026#39; + $PSScript + \u0026#39;\u0026#34; \u0026#39; + $PSParameters  Write-Host \u0026#39;Complete PS String:\u0026#39;$PSText   # Run PS Script on PS Host  $result = Invoke-VMScript -VM $PSHost -ScriptType Bat -ScriptText $PSText -GuestUser $username -GuestPassword $HashiVaultPW  Write-Host $result.ScriptOutput   return $LASTEXITCODE } Subscription:  Click Here to see Larger Image of Screen Shot\n Lessons Learned:  vRA 7.6 and 8.2 can share the same PS Host and Scripts. A lot of the PowerShell code and logic I use in vRA 7.6 will be able to be reused/shared. Using a PS Host does require an additional VM. Within ABX scripts I have always changed the default \"Custom limits and retry options\". I set the \"Memory Limit\" to 1024 and \"Timeouts\" to 900. Anytime I speak to others about Automation the one item I stress is there is no right way or wrong way to accomplish your tasks. Build on the skills that your Team already has. The environment I work in is 90% Windows Servers so we use PowerShell a lot. That is why I needed to be able to use all the PS Modules that I have installed on the PS Host.   ","date":"January 18, 2021","image":"https://www.vcrocs.info/images/post/powershell_huea633dfc62497ad674470427f21ef8c9_36994_650x0_resize_box_3.png","permalink":"/blog/vra-82-powershell-host/","title":"How to use PowerShell Modules with vRA 8.2"},{"categories":["Recipe for Success"],"contents":" I often get asked to speak to different organizations about what I have accomplished with the VMware vRealize Suite of products. The one question that almost always gets asked is how are you able to do everything that you have setup in your environment. After being asked this question a lot I thought I would give my thoughts in a Blog Post. Here is my “Recipe for Success”:  Ingredients:  Enjoy what you do. Give Back. Be involved in the vCommunity Enjoy where you work. Enjoy who you work with. Work at a place where management supports you. Don’t be afraid of change. Always keep track of what the industry is doing. Use Social Media like Twitter. Setup a Home Lab Learn, Learn, Learn! Think outside of the box  Directions: The most important ingredient is to enjoy what you do. I have worked in the IT industry for 25+ years and I still have a Passion for it. I feel that I get paid to do my hobby. I am fascinated every day when I see some of the new technology that get released. There are some very smart people in the IT industry. I can truly say that I love what do for a job! When I create Automation that makes processes consistent and faster for the Team that I work with I get a feeling that I have accomplished something. “Feel Good”/’Proud” feeling inside.\nAttend and Participate in user groups. VMUG, “Little Hacks”, SQL, HVC, PowerBlocks, Under The Hoods, etc\u0026hellip; I started out by just attending and learning. I met a lot of people at the user groups. I now consider some of those people friends. After several years of being an attendee I felt like I wanted to Give Back and start sharing some of the ideas that I have done. So, I started doing presentations myself. Everyone has something to share.\nWork for a Team that isn’t afraid of change. I say tear down the “Silos” and have everyone work together more. I have heard people say that Automation will eliminate my job. If you are an engineer, Automation will get the mundane items off your list. Let you focus more on Engineering type of tasks. The Cool Stuff!\nvRA: Start simple. Don\u0026rsquo;t try and have a 100 processes in your first Catalog item. Keep adding additional steps to the Catalog item until you cross off everything that needs to be done. Prove to management that the simple Automation is working and being used every day. My Automation is in a constant state of change. Always trying to make it better. Constantly including new processes.\nvROPS: Start my making some simple Dashboards with Heat Maps that show the Health of Items. Show your Hosts, VMs, Clusters. Start simple just like I said with Automation. You can then keep adding widgets to the Dashboards to give more information and make them more useful. Look at the \u0026ldquo;Text Display\u0026rdquo; widget to let you show information not included within vROPS. Have a goal of using vROPS as your \u0026ldquo;Single Pane of Glass\u0026rdquo;.\nGo to conferences. In 2020 since almost all conferences were online and free I attended at least 6. Even if there was only one or two sessions that I wanted to attend I took the time.\nTwitter is an awesome place to keep up. Use Twitter Lists to keep the “Garbage” out of you feed. I follow a lot of Technology businesses and Bloggers. Find people that have similar interests. Tech Companies are always giving updates about their products on Twitter. They post information about webinars that I find very useful. My Twitter Lists are public if you want to get started.\nSetup a Lab area of some type to be able to learn all the vRealize Products. One way to get a Home Lab started is to use VMware Fusion on Macs or VMware Workstation on PC’s. You can install nested ESXi on Fusion/Workstation.\nI have a Packt subscription that gives me access to a lot of Technology Books on a lot of topics. Well worth the money.\nStarting a Blog is a great way to start #GivingBack. Hugo is a great static site generator. You can use Github at no cost to store and host the web pages generated from Hugo.\n “9 – 5 pays the Bills. 5 – 10 advances your career.”    #VMware | #vRealizeAuto | #saltstack | #vRealizeOPS | #vmloginsight\n   2022 Update:  I had to make some changes in 2022. I was starting to miss some of the ingredients that I listed in this Blog post when I originally wrote it so I made a change in my career to get all the ingredients back. When you have a passion for what you do, don't let other people take that drive to keep being successful away. A word that is very important to me is Respect. In my Blog posts I will list people that have helped me in my career. I respect and look up to all those names listed. Life is to short to not have Respect for what you do and have accomplished...","date":"January 15, 2021","image":"https://www.vcrocs.info/images/post/recipe_huea633dfc62497ad674470427f21ef8c9_68770_650x0_resize_box_3.png","permalink":"/blog/recipe-for-success/","title":"How to be successful with VMware vRealize Products in your environment"},{"categories":["vRealize Operations"],"contents":"I like the idea of using VMware vRealize Operations as the “Single Pane of Glass” for all monitoring. The Citrix Team recently asked me if I could show license usage within vRealize Operations. They wanted to see the highest usage in the last 30 days, 10 days and 24 hours. Citrix license usage is not built into vROPS but I have used the “Text Display Widget” to show other information within vROPS.\nI wanted to create a half donut chart to show the highest license usage in the last 30 days, a horizontal bar chart to show the last 10 days and a table to show the last 24 hours. I reviewed to see what “Open Source” Javascript options were available and I found ChartJS. After reviewing how to program the files to create charts with ChartJS I liked the solution.\nChartJS Displayed in vRealize Operations using the \u0026ldquo;Text Display Widget\u0026rdquo;  Click Here to see Larger Image of Screen Shot\nChartJS Half Donut.  Click Here to see Larger Image of Screen Shot\nWhen you hold the mouse over the chart you will see the values.\nChartJS Half Donut code: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;  \u0026lt;title\u0026gt;Citrix Licensing Count\u0026lt;/title\u0026gt;  \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;body\u0026gt;  \u0026lt;div style=\u0026#34;width:95%\u0026#34;\u0026gt;  \u0026lt;canvas id=\u0026#34;doughnut-chart\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt;  \u0026lt;/div\u0026gt; \t\u0026lt;script\u0026gt; \tnew Chart(document.getElementById(\u0026#34;doughnut-chart\u0026#34;), { \ttype: \u0026#39;doughnut\u0026#39;, \tdata: { \tlabels: [\u0026#34;Used\u0026#34;,\u0026#34;Total\u0026#34;], \tdatasets: [ \t{  label: \u0026#34;Peak Usage\u0026#34;, \tbackgroundColor: [\u0026#34;#28B463\u0026#34;,\u0026#34;#808B96\u0026#34;], \tdata: [1682,8000] \t} \t] \t}, \toptions: { \ttitle: { \tdisplay: true, \ttext: \u0026#39;Citrix License Usage (MPS_PLT_CCU)\u0026#39;, \t}, \trotation: 1 * Math.PI, \tcircumference: 1 * Math.PI \t} \t});  \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ChartJS Horizintal Bar Chart. \nClick Here to see Larger Image of Screen Shot ChartJS Horizintal Bar Chart code: \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;  \u0026lt;title\u0026gt;Citrix Licensing Count\u0026lt;/title\u0026gt;  \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;  \u0026lt;div style=\u0026#34;width:95%\u0026#34;\u0026gt;  \u0026lt;canvas id=\u0026#34;bar-chart-horizontal\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt;  \u0026lt;/div\u0026gt;  \u0026lt;script\u0026gt; \tnew Chart(document.getElementById(\u0026#34;bar-chart-horizontal\u0026#34;), { \ttype: \u0026#34;horizontalBar\u0026#34;, \tdata: { \tlabels: [\u0026#34;01/03/2021\u0026#34;,\u0026#34;01/02/2021\u0026#34;,\u0026#34;01/01/2021\u0026#34;,\u0026#34;12/31/2020\u0026#34;,\u0026#34;12/30/2020\u0026#34;,\u0026#34;12/29/2020\u0026#34;,\u0026#34;12/28/2020\u0026#34;,\u0026#34;12/27/2020\u0026#34;,\u0026#34;12/26/2020\u0026#34;,\u0026#34;12/25/2020\u0026#34;,\u0026#34;Total Licences\u0026#34;], \tdatasets: [ \t{ \tlabel: \u0026#34;Peak Usage\u0026#34;, \tbackgroundColor: [\u0026#34;#28B463\u0026#34;, \u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#28B463\u0026#34;,\u0026#34;#808B96\u0026#34;], \tdata: [249,318,302,1402,1535,1498,1516,271,273,269,8000] \t} \t] \t}, \toptions: { \tlegend: { display: false }, \ttitle: { \tdisplay: true, \ttext: \u0026#34;Citrix License Usage (MPS_PLT_CCU)\u0026#34; \t} \t} \t});\t \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Read all the documentation on how to create ChartJS files. Very important steps need to be followed. All the Web pages to show Citrix Licence counts are updated very hour. The process to update the Web Pages is scheduled with vRealize Automation Orchestrator. The code to get the license information and create the web pages is all done with PowerShell. The License values collected every hour are saved in a Microsoft SQL Database.  The process to save the data and create the web pages can be done many different ways. I outlined how I do it in my environment. What I feel was important to show was the finished HTML code to create the ChartJS Web Pages that I display in vRealize Operations. The data could be from any source that makes sense in your environment. This makes a great way to graphically show data within vROPS from data that is saved outside of vROPS.\nLink to my blog post that shows how to use the \u0026ldquo;Test Display Widget\nLink to ChartJS\n","date":"January 3, 2021","image":"https://www.vcrocs.info/images/post/chartjs_huea633dfc62497ad674470427f21ef8c9_44799_650x0_resize_box_3.png","permalink":"/blog/chartjs/","title":"Creating Charts with ChartJS and displaying in vRealize Operations"},{"categories":["vRealize Operations"],"contents":" vRealize Operations - Dashboards     I was recently reviewing some sample custom vRealize Operations Dashboards and I seen where some of the Dashboards had custom text and images. I reviewed how they included the text and images and in some of the sample Dashboards they used the “Text Display” Widget and used a url for the content. They would display images saved on a web server. I thought this was interesting and started reviewing what else could be displayed by using a url with the \u0026ldquo;Text Display\u0026rdquo; Widget.\nThe first thought I had was to display the weather for both the data center locations where I work. This could be used with a NOC type Dashboard. I looked online for a weather widget site and got the code to display the weather for the specific locations. If you go to Administration/Configuration/Metric Configurations/TxtWidgetContent you can create html files to save the widget code. See examples in images below. You can display any Widget data from any web site that provides widgets using the \u0026ldquo;Text Display\u0026rdquo; Widget.\nAfter I successfully added weather widgets I wanted to get more serious and show data from a SQL Database. I use a SQL database to store data from some vRealize Automation Day 2 BluePrints that I created. Some example BluePrints where I store data in a SQL DB are Server Builds and Server Decomissions. I created a web page that displayed the SQL Data and added another “Text Display” widget to the Dashboard. I used the url of the web page and assigned it to the widget and now I am also able to show SQL Data on a Dashboard.\nThe reason I wanted to show Weather and SQL data is to use vRealize Operations Dashboards as the “Single Pane of Glass” for all monitoring. I have never seen a demo from VMware to use the “Text Display” Widget this way but I think this is awesome. This could completely change the way I use vRealize Operations Dashboards. There are not always vRealize Operations Management Packs available and this provides a cool way to show any data on a Dashboard. The data will be for reference only but it does allow the \u0026ldquo;Single Pane of Glass\u0026rdquo;.\nvRealize Operations Dashboard:  Click Here to see Larger Image of Screen Shot\nHere is a closeup of the Dashboard so you can see the details.\n Click Here to see Larger Image of Screen Shot\nWidget Code: Administration/Configuration/Metric Configurations/TxtWidgetContent\n Click Here to see Larger Image of Screen Shot\nHere is a closeup. Create a html file and paste the Widget Code.\n Click Here to see Larger Image of Screen Shot\nSelect the html file created to show the widget data\n Click Here to see Larger Image of Screen Shot\nurl Page:  Click Here to see Larger Image of Screen Shot\nThe url web page could be a static or dynamic page. Use whatever works best for you. I think this opens up so many possibilities of what you can display on a Custom Dashboard. If you want to take it a step further you could publish the Custom vRealize Operations Dashboard with Workspace One and provide the data to anyone in your organization even if they are not a vRealize Operations user. Cool Shit!\nThe \u0026ldquo;Text Display\u0026rdquo; Widget should be renamed to the \u0026ldquo;Cool Shit\u0026rdquo; Widget!\n","date":"July 17, 2020","image":"https://www.vcrocs.info/images/post/vro_huea633dfc62497ad674470427f21ef8c9_21754_650x0_resize_box_3.png","permalink":"/blog/text-display-widget/","title":"Text Display Widget - More Powerful than just displaying text on a Dashboard..."},{"categories":["Podcast"],"contents":" IT Reality Podcast    I have been listening to Podcasts for many years. Everyday while driving to and from work I would listen to a Podcast. Anytime I traveled to a conference I would download hours worth of Podcasts to listen to while flying. Most of the Podcasts I listen to are Technology related. Here are some of my favorites:\n IT Reality Virtual Speaking Podcast Develop Great Managers vBrown Bag Automators Mac Power Users Twit Network of Podcasts  I have had an interest to be a guest on a Podcast for several years. I always thought to myself that when I get to a point in my career that I could share my knowledge I would try and be a guest on a Podcast. After doing several presentations about VMware vRealize Automation I wanted the next step to be a guest spot on a Podcast to reach a larger audience. When I saw a post on Twitter that the IT Reality Podcast was looking for everyday Technology people passionate about a topic and willing to share the knowledge, I reached out to them to show my interest in appearing on their Podcast. We had a meeting and the Hosts felt I had a good story to tell and we scheduled a time to record the Podcast. The hosts, Vince Wood and Sam Larch, were awesome to work with. They also invited Nathan Bennett to be on the episode as a guest and he was also great to talk with. The experience to talk with these guys was a good way for me to appear on a Podcast. While recording the Podcast I learned some knowledge from Nathan that I will use in my current Automation environment.\nIf it wasn’t for other people sharing knowledge by creating Blogging web sites or appearing on Podcasts, I wouldn’t have the knowledge that I do today. I hope that I can give back to the vCommunity like they have done for me. I would encourage anyone who wants to share their knowledge to Just Do It! Create a Blogging Web Site or start attending local User Groups and “Little Hacks”. It can be very rewarding.\n What is vRealize Automation - Episode 21\nEnjoy!\n","date":"May 29, 2020","image":"https://www.vcrocs.info/images/post/itreality_hu09ee59b665c96c1fb933ac1be6a8e985_77246_650x0_resize_box_3.png","permalink":"/blog/it-reality/","title":"What is vRealize Automation - Episode 21"},{"categories":["PowerCLI"],"contents":" PowerCLI Basics    PowerCLI Code Some basic PowerCLI commands\n#Here are some basic commands that you can keep adding additional code #and get more precise on what you want to see.  #Connect to a vCenter  Connect-VIServer vcsa.domain.org  #Disconnect from vCenter and not be prompted  Disconnect-VIServer vcsa.domain.org -confirm:$false  #Get VM Listing  #Shows all VMs Get-VM  #Shows all VMs sorted by Name Get-VM | Sort-Object Name  #Shows all VMs sorted by Name that are Powered On Get-VM | Where-Object {$_.Powerstate -eq \u0026#39;PoweredOn\u0026#39;} | Sort-Object Name  #Shows all VMs sorted by Name, that are Powered On and only shows #Name,MemoryGB,NumCpu Get-VM | Where-Object {$_.Powerstate -eq \u0026#39;PoweredOn\u0026#39;} | Sort-Object Name | Select-Object Name,MemoryGB,NumCpu ","date":"April 19, 2020","image":"https://www.vcrocs.info/images/post/powershell_huea633dfc62497ad674470427f21ef8c9_36994_650x0_resize_box_3.png","permalink":"/blog/powercli-getting-started/","title":"PowerCLI Getting Started"},{"categories":["Raspberry PI"],"contents":" Raspberry PI Powered Clay Thrower     Link to my Raspberry PI powered Clay Thrower.\nThe first project I ever did with a PI.\nAlso my first project using Python and PHP.\n  ","date":"April 19, 2020","image":"https://www.vcrocs.info/images/post/raspberry-pi_huea633dfc62497ad674470427f21ef8c9_56859_650x0_resize_box_3.png","permalink":"/blog/clay-thrower/","title":"Raspberry PI Powered Clay Thrower"},{"categories":null,"contents":" VMware Explore 2022 | San Francisco    VMware Explore is always one of the premiere Technology Events every year. Here is a collection of links and tips to some of the activities that I would attend and enjoy.\n I always tried to attend the Keynotes to learn about new product announcements and to hear the direction that VMware was going. I attended a lot of sessions. See list of sessions that I would enjoy. I would do Hands on Labs that were not available to do anytime. There are some HOLs that are available only during the conference and there are VMware people to help you with the labs. Go to the Expo Area. You can always talk to VMware Engineers at the booths in the Expo Area and watch demos. A lot of Vendors in the Expo Area. Watch for Vendor Parties. They are always fun and drinks | food are always free. The Veeam party in the past was always one of the better parties.  VMware Explore Sessions: Speakers:  William Lam Vincent Riccio Chris McClanahan John Nicholson Sam McGeown John Dias  Topics:  SaltStack PowerCLI vRealize Automation vRealize Operation Virtually Speaking Podcast Live vSAN vSphere   \n Sessions:  VMware Explore | Twitter Veeam Party Registration TOP 7 Sessions VMware Explore 2022 | By Vladan SEGET Top 15 VMware Explore Sessions to attend! | By Duncan Epping   \n  If your schedule gives you some free time there is a lot of cool stuff to do and see in the SanFrancisco area. If you are a baseball fan the stadium where the Giants play is an awesome facility. One year I rented a bike and rode across the Golden Gate Bridge. That was a fun experience. To rent a car and go see the Red Wood trees was fun.  Fun Stuff:  Blazing Saddles San Francisco Bike Rentals \u0026 Tours San Francisco Giants Schedule Muir Woods   Product Updates: The vRealize Suite is updated quarterly and the SaaS version is now updated monthly. To see BIG announcements at VMware Explore probably will not happen, BUT you never know\u0026hellip;\nProducts:  Introducing vSphere+ and vSAN+: Delivering Benefits of the Cloud to Your On-premises Workloads VMware vSphere+ Overview blogs.VMware.com ESXi Arm Edition | version 1.10 | Can run on Raspberry PI | Cool Project to use in your Home Lab Product Announcements Project Monterey | I am interested to see what updates are announced at VMware Explore   ","date":"January 1, 2020","image":"https://www.vcrocs.info/images/post/raspberry-pi_huea633dfc62497ad674470427f21ef8c9_56859_650x0_resize_box_3.png","permalink":"/blog/centra-pa-vmug-08-2022/","title":"Central PA VMUG | August 2022"},{"categories":["Images"],"contents":"Image Gallery:   ","date":"January 1, 2020","image":"https://www.vcrocs.info/images/post/pic06_hu30c1a6745035136ce40ef97ecf706aae_338956_650x0_resize_q100_box.jpg","permalink":"/blog/image-gallery-showcase/","title":"Favorite Images"},{"categories":null,"contents":"Links to some of my favorite Bloggers and Content: Bloggers:  Brock Peterson - vRealize Master LucD - PowerShell Master William Lam - VMware Master Yellow Bricks   \n VMware:  VMware Operations Management Book - Great Book! code.VMware.com - Samples/Resources Learn vRealize Automation Learn SaltStack Config blogs.VMware.com PowerShell PowerCLI VMware PowerCLI Cmdlets by Product vRealize Automation vRealize Operations vRealize Log Insight ports.VMware.com - Good Link when you live in a Zero trust environment   \n Podcasts:  IT Reality Podcast The Hacks - Powered By SaltStack Virtually Speaking Podcast   ","date":"January 1, 2020","image":"https://www.vcrocs.info/images/post/pic06_hu30c1a6745035136ce40ef97ecf706aae_338956_650x0_resize_q100_box.jpg","permalink":"/blog/links/","title":"Favorite Links"},{"categories":["Twitter"],"contents":" Tweets by dalehassinger  ","date":"January 1, 2020","image":"https://www.vcrocs.info/images/post/twitter_huea633dfc62497ad674470427f21ef8c9_42113_650x0_resize_box_3.png","permalink":"/blog/twitter/","title":"Twitter Feed"},{"categories":["Welcome"],"contents":" Your Source for Automation/Monitoring/Logging Content   I have learned a lot from the vCommunity, Powershell and PowerCLI web sites. I want to use this blog as a way for me to give back. If one person finds anything I post helpful, I will consider my efforts successful.\n Favorite Quotes: \u0026ldquo;It doesn\u0026rsquo;t make sense to hire smart people and then tell them what to do, We hire smart people so they can tell us what to do.\u0026rdquo; - Steve Jobs\n\u0026ldquo;Your thought process is the most powerful automation tool you\u0026rsquo;ll ever have\u0026rdquo; - Cody De Arkland\nThanks for visiting! \u0026ldquo;9 - 5 pays the bills, 5 - 10 advances your career\u0026rdquo;\n ","date":"January 1, 2020","image":"https://www.vcrocs.info/images/post/vCROCS-Logo2_hu30a2c27fc0475af8a9db4432cbed1e9a_50820_650x0_resize_box_3.png","permalink":"/blog/welcome/","title":"Welcome to www.vCROCS.info"},{"categories":null,"contents":" TAM ( Technical Account Manager) | VMware vExpert 2020 - 2022 | VMware vExpert Cloud Management 2021 - 2022 If you can script it, You can Automate it!\n\n The views and opinions expressed on this blog are my strictly my own and do not reflect the views and opinions of my employer. I Blog about Subjects | Products that I find interesting and will hopefully help someone get started with Automation | Monitoring | Logging by providing some tips | tricks | processes needed.  My current focus is Enterprise Automation | Monitoring and Logging. I have created an IaC (Infrastructure as Code) Environment. I am using VMware vRealize Automation and SaltStack Config to complete server builds, software installs, schedule VM snap shots, Microsoft 365 automation, Citrix Management, Automate Data Center Flips, Server Decommissions, and many other Day 2 processes… For monitoring I use vRealize Operations for the “Single Pane of Glass” experience. I also use vRealize Log Insight for logging and LCM (Life Cycle Manager) for installing all the vRealize Products.\nAlmost all the code I write to complete the Automation that I create is done with PowerShell. The reason I choose to use PowerShell is because to do Automation with VMware products they have released their product PowerCLI, which is built on top of PowerShell. There hasn’t been anything that I wanted to Automate that I haven’t been able to do with PowerShell. To do remote Citrix management also works very well using PowerShell.\nI have also started to do Automation with Azure. I am using PowerShell to create VMs and SaltStack Config to complete the configuration management, install software and maintain state.\nI have learned a lot from the vCommunity, Powershell and PowerCLI web sites. I want to use this blog as a way for me to give back. If one person finds anything I post helpful, I will consider my efforts successful. The code that I have shared I use with vRealize Automation Cloud Templates/Catalog Items and everyday VMware Admin functions. Everyday I learn something new. If I think it should be shared I will write a blog about it. Check back often to see what I am doing next.\n Thanks:   I have worked with a great group of people at VMware, past and present. I would like to thank the following people for all their support in no particular order: Steve Leiberson, Karl Hauck, Cosmin Trif, Brock Peterson, Kevin Holland, Daniel Thomas, Marcus Roberts, Paul Schlosser, Eric Pennente.\n  Special Thanks to David Kruse for getting me started with vRA.\n  Special Thanks to Vincent Riccio for allowing me to do SaltStack Config Presentations with you at VMworld 21 and SaltConf 21.\n  Special Thanks to my first manager at VMware: Alex Musicante. You believed in me and my passion/skills/knowledge of the VMware Products. You gave me a career opportunity that no one else did.\n  Special Thanks to some past and present co-workers, SEs, TAMs, HVC Members that I learned a lot from: Kirk Shaffer, Robert Mitchell, Dan Grove, Steve Holmes, Steve Pittenger, Anton Wesztergom (Opened my eyes to vRA Day 2), Ryan Palmer, Megan Koss, Josh Demcher.\n  Special Thanks to the person that gave me my first Job in IT: David Cornelius\n  List of Bloggers that I follow and have learned a lot by them “Giving Back”: Cody De Arkland, Luc Dekens, Kyle Ruddy, William Lam, Nathen Bennett, Vince Wood, Alan Renouf.\n  and anyone else that helped me in my journey called my career…\n  I like to wear Crocs and I like VMware Products. So what better name than \"vCrocs\"... Thanks for visiting!\n \n \"9 - 5 pays the bills, 5 - 10 advances your career\"  \n  ","date":"January 1, 1","image":"https://www.vcrocs.info/images/author_hu6305ea221e0c0ffe310e27cad1b2fcb7_4089227_650x0_resize_box_3.png","permalink":"/about/","title":"About Dale Hassinger"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://www.vcrocs.info/images/author_hu6305ea221e0c0ffe310e27cad1b2fcb7_4089227_650x0_resize_box_3.png","permalink":"/contact/","title":"Contact Page"},{"categories":null,"contents":"Privacy Policy Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi amet, ultrices scelerisue cras. Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsum lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis rutrum elit vestibululm ipsum. Arcu fringilla duis vitae mos dsdllis duicras interdum purus cursus massa metus. Acc umsan felaais, egsdvet nisi, viverra turpis fermentum sit suspf bafedfb ndisse fermentum consectetur. Facilisis feugiat trisique orci tempor sed masd fbsssa tristique ultrices sodales. Augue est sapien elementum facilisis. Enim tincidnt cras interdum purus ndisse. morbi quis nunc.\nMore Privacy Policy Et dolor placerat tempus risus nunc urna, nunc a. Mattis viverra ut sapidaaen enim sed tortor. Mattis gravida fusce cras interdum purus cursus massa metus. Acc umsan felaais, eget nisi, viverra turpis fermentum sit suspf bafedfb ndisse. morbi quis nunc, at arcu quam facilisi. In in lacus aliquam dictum sagittis morbi odio. Et magnis cursus sem sed condimentum. Nibh non potenti ac amsdfet Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsuasdm lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis ndisse. morbi quis nunc, at arcu quam facilisi ndisse. morbi quis nunc, at arcu quam facilisi\nEt dolor placerat tempus risus nunc urna, nunc a. Mattis viverra ut sapidaaen enim sed tortor. Mattis gravida fusce cras interdum purus cursus massa metus. Acc umsan felaais, eget nisi, viverra turpis fermentum sit suspf bafedfb ndisse. morbi quis nunc, at arcu quam facilisi. In in lacus aliquam dictum sagittis morbi odio. Et magnis cursus sem sed condimentum. Nibh non potenti ac amsdfet Tincidunt hendrerit egestas venenatis risus sit nunc. Est esglit non in ipsuasdm lect;aaus adipiscing et enim porttitor. Dui ultrices et volud eetpat nunc, turpis ndisse. morbi quis nunc, at arcu quam facilisi ndisse. morbi quis nunc, at arcu quam facilisi\n","date":"January 1, 1","image":"https://www.vcrocs.info/images/author_hu6305ea221e0c0ffe310e27cad1b2fcb7_4089227_650x0_resize_box_3.png","permalink":"/privacy-policy/","title":"Privacy Policy"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://www.vcrocs.info/images/author_hu6305ea221e0c0ffe310e27cad1b2fcb7_4089227_650x0_resize_box_3.png","permalink":"/search/","title":"Search Result"}]