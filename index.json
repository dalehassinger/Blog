[{"categories":["Automation"],"content":"How to setup and configure your VMware Aria Automation environment to work with Ansible. ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:0:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"1 Use Case I was recently asked how the VMware Aria Automation | Ansible Integration worked. I never used Ansible before so I thought this would be great time to learn Ansible and demo the integration with VMware Aria Automation. If you look at some of my previous blog posts I wrote about SaltStack Config a lot. I thought this would be a good time for myself to learn Ansible and compare the two products. When I started reading about the VMware Aria Automation and Ansible Integration, I didn’t find a single blog post or article that covered everything from installing Ansible to creating a new Server Build in Aria Automation. I am going to document all the steps that it took for me to do a complete Aria Automation | Ansible integration. I hope that someone will find this blog post useful on their Automation journey. A lot of people that write about Ansible use it with Red Hat Linux. For my demo environment, I chose to use Rocky Linux so that I don’t need to worry about any Red Hat licenses. Some people online recommend using Rocky Linux to replace CentOS. Sometimes it seems that the version of Linux you choose and what product to you use for Automation and Config management can be almost a religious debate. This blog post is to cover a specific use case. How to use VMware Aria Automation | Ansible Integration. Use whatever version of Linux you want. The details that I write about may need to be modified slightly if you use a different version of Linux. This blog post will at least give you the framework to get started. When I wrote this Blog Post I was using VMware Aria Automation version 8.10.2, Ansible 2.13.3 and Rocky Linux 9. To use the details in this blog post you will need a working install of VMware Aria Automation. ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:1:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"2 Create a Ansible Control Server and install Ansible: Create a new Server. I created a clean Rocky Linux VM. This server will be used as the Ansible Control Node. Steps to install Ansible: # Step 1 | Install Rocky Linux EPEL repository dnf install epel-release -y # Step 2 | Install Ansible dnf install ansible -y # Check Ansible Version after Install ansible --version Results from ansible –version: ansible [core 2.13.3] config file = /etc/ansible/ansible.cfg configured module search path = ['/root/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules'] ansible python module location = /usr/lib/python3.9/site-packages/ansible ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections executable location = /usr/bin/ansible python version = 3.9.14 (main, Nov 7 2022, 00:00:00) [GCC 11.3.1 20220421 (Red Hat 11.3.1-2)] jinja version = 3.1.2 libyaml = True Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:2:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"3 Edit the hosts file: Edit the /etc/ansible/hosts file: I like to use nano to edit files. To save file changes in Nano use cntrl-o. To exit Nano use cntrl-x. # the cmd at the cli to edit the hosts file nano /etc/ansible/hosts This is the contents of the /etc/ansible/hosts file: [rocky] 192.168.110.201 [rocky:vars] ansible_user=root ansible_password='VMware1!' Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:3:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"4 Edit the ansible.cfg file: Edit the /etc/ansible/ansible.cfg file: # the cmd at the cli to edit the ansible.cfg file nano /etc/ansible/ansible.cfg This is the minium contents of the /etc/ansible/ansible.cfg file: BOTH of these lines MUST be in the ansible.cfg file to add Ansible to VMware Aria Automation. If they are not present, adding the Integration will fail! The vault password file can be named something different, BUT IT MUST BE SPECIFIED! [defaults] host_key_checking = False vault_password_file = /etc/ansible/vault-pass.txt Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:4:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"5 Test Ansible Install To test the Ansible install you can do a ping: # the cmd at the cli to run a ping ansible rocky -m ping Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:5:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"6 VMware Aria Automation Configuration Add Ansible Integration to VMware Aria Automation: Click to see Larger Image of Screen Shot You need to specify the Inventory File path. Default is /etc/ansible/hosts You need to make sure the /etc/ansible/ansible.cfg file has the following two lines of code to add as an VMware Aria Automation Integration. ansible.cfg file: [defaults] host_key_checking = False vault_password_file = /etc/ansible/vault-pass.txt Ansible Integration screen: Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:6:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"7 VMware Aria Automation Cloud Template Add Ansible to Cloud Template Click to see Larger Image of Screen Shot Cloud Template YAML code # Cloud Template using Ansible Integration formatVersion: 1 inputs: CustomizationSpec: type: string description: Customization Specification default: ubuntu title: CustomizationSpec VMName: type: string title: VM Name minLength: 1 maxLength: 12 default: VCROCS-001 IP: type: string default: 192.168.110.200 ServerGroups: type: string title: ServerGroups description: Ansible Server Groups default: rocky enum: - rocky - WebServers - AppServers - DBServers PlayBooks: type: string title: PlayBooks description: Ansible PlayBooks default: web-server-rocky enum: - web-server-rocky - rocky-web - rocky-db resources: Cloud_Ansible_1: type: Cloud.Ansible properties: host: ${resource.Cloud_Machine_1.*} osType: linux account: rocky-ansible username: root password: VMware1! groups: - ${input.ServerGroups} playbooks: provision: - ${\"/etc/ansible/\" + input.PlayBooks + \".yml\" } Cloud_Network_1: type: Cloud.Network properties: networkType: existing constraints: - tag: network:VMs Cloud_Machine_1: type: Cloud.Machine properties: image: rocky flavor: small name: ${input.VMName} customizationSpec: ${input.CustomizationSpec} constraints: - tag: env:VMs networks: - network: ${resource.Cloud_Network_1.id} assignment: static address: ${input.IP} Example Ansible Playbook Creates a txt file, adds text to txt file, installs web server, starts web server service, enables cockpit, installs git, and does a git pull request from GitHub to copy web site files to new server. # web-server-rocky.yml - hosts: rocky name: Ansible Playbook to Install Web Server tasks: - name: Create a new txt file | web-server.txt file: path: /root/web-server.txt state: touch - name: Add a line of text to txt file | web-server.txt lineinfile: path: /root/web-server.txt line: \"vRA created this VM and used Ansible to create and modify this txt file | web-server.txt\" - name: Install Apache web server dnf: name: httpd state: latest - name: Ensure HTTP server is running service: name: httpd state: started - name: Run systemctl enable --now cockpit.socket command shell: systemctl enable --now cockpit.socket - name: Install Git dnf: name: git state: latest - name: Github Pull request of www.vCROCS.info ansible.builtin.git: repo: https://github.com/dalehassinger/Blog.git dest: /var/www/html single_branch: yes version: master VMware Aria Automation Service Broker Catalog: Click to see Larger Image of Screen Shot VMware Aria Automation Service Broker Request You can make the Ansible Server Group and Playbooks a dropdown with the custom form. The code to do this is within the YAML code of the Cloud Template. Click to see Larger Image of Screen Shot ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:7:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"8 Lessons Learned Lessons Learned: The VMware Aria Automation | Ansible Integration works well if you follow all the configuration steps. Ansible installation is very easy when you follow the directions. ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:8:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["Automation"],"content":"9 Helpful Links VMware Aria Automation | Ansible Links I found to be very helpful: Red Hat Ansible Web Site Deeper look at the vRealize Automation and Ansible Open Source Integration Configure Ansible Open Source integration in Cloud Assembly Info When I write about VMware Aria Automation I always say there are many ways to accomplish the same task. Ansible is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Ansible. ","date":"2022-12-30","objectID":"/hugo-loveit/vmware-aria-automation-ansible-integration/:9:0","tags":["Ansible","VMware Aria Automation","vRealize Automation","Rocky Linux","Red Hat"],"title":"VMware Aria Automation and Ansible Integration","uri":"/hugo-loveit/vmware-aria-automation-ansible-integration/"},{"categories":["APPS"],"content":"APPs that I use everyday to be Productive | 2022 If you have any APPs that you like better than I have listed please send them my way. I am always open to looking at new APPs. If you would ever want to see how I use these APPs reach out! I can do a demo. ","date":"2022-11-26","objectID":"/hugo-loveit/productive-apps-2022/:0:0","tags":["MAC","Apple","APPs"],"title":"Productive APPs | 2022","uri":"/hugo-loveit/productive-apps-2022/"},{"categories":["APPS"],"content":"1 Recent APPs Here are some APPs that I started using recently to be productive: Recent APPs: TickTick | To-Do and Notes App in one. CleanShot X | Screen Shot and Screen recording App mmhmm | Makes on-screen meetings and presentations a little more fun. ","date":"2022-11-26","objectID":"/hugo-loveit/productive-apps-2022/:1:0","tags":["MAC","Apple","APPs"],"title":"Productive APPs | 2022","uri":"/hugo-loveit/productive-apps-2022/"},{"categories":["APPS"],"content":"2 Proven APPs Here are some APPs that I have been using Daily for work or Blogging for awhile. They have proven their place in my workflows: Proven APPs: Visual Studio Code | Creating Code Github Desktop Affinity Photo | Photo editing VMware Fusion Termius | SSH Client Forklift | SFTP Client Slack Zoom | Online Meetings, Chat, etc… Hugo | The world’s fastest framework for building websites Microsoft Teams | Online Meetings, Chat, etc… Microsoft Office | Word, Excel, Outlook, Powerpoint, OneNote Backblaze | Online Backup to keep all my important files offsite. Dashlane | Password Manager BetterSnapTool | easily manage your window positions Raindrop.io | All-in-one bookmark manager ","date":"2022-11-26","objectID":"/hugo-loveit/productive-apps-2022/:2:0","tags":["MAC","Apple","APPs"],"title":"Productive APPs | 2022","uri":"/hugo-loveit/productive-apps-2022/"},{"categories":["Career"],"content":"New Job | August 2022 | Technical Account Manager (TAM) On August 1, 2022 I became an employee of VMware as a Technical Account Manager, TAM. I was hired to be a TAM with a focus on the vRealize Suite. Within a month of my hire date VMware announced VMware Aria. So now I am a TAM with a focus on the VMware Aria Product. To work for VMware was a career goal of mine. I was always impressed by the VMware employees that I worked with the past 10+ years. Everyone was always very professional and had a great attitude to help their customers. I wanted to know personally what it was like to work in that type of culture. If you know me you know that I have a passion for the VMware Aria suite of Products. So to be a TAM with a focus on Aria is a good fit for me. After several months at VMware, this is what I learned. The culture overall is very positive. A lot of people helped me in my on-boarding and wanted to see me be successful. People that I knew before I joined VMware reached out to me and said “What can I do to help you”. The employee benefits are the best that I ever had in my career so far. You get to do a lot of training to keep your skills up to date and at a level the customers expect. The on-boarding process can take days, weeks, months… To get started I received a laptop of my choice 3 days before my start date. Never experienced that before. Having a Mentor at VMware is very important. Someone that wants to help you be successful and will take the time to show you how to do your job, recommend training, help you pick benefits, let you know about different programs to get involved with, let you know about weekly zoom training sessions, help you get a lab setup, etc… VMware wants all employees to give back by making donations to non-profits, 100% match by VMware. VMware wants all employees to donate time to non-profits. Special thanks to some people that went above and beyond when I started at VMware to help me, in no particular order: Marshall Cline, Ariel Sanchez, Brock Peterson, Cosmin Trif, Christopher Kusek, Anton Wesztergom, Alex Musicante, Chad Thomas, David Kruse, Steve Lieberson, Paul Schlosser, Christina Griffus and some I may have missed. Now that I am getting more engaged with the customers that I will be working with, I plan to start blogging more again to continue giving back to the vCommunity. Share the knowledge! If anyone that reads my blogs would ever want to talk to me about being a VMware employee, please reach out to me. I will share my experience 1:1. Another area that I want to give back to the vCommunity is to help Mentor others. If anyone wants to ever talk, please reach out. ","date":"2022-11-01","objectID":"/hugo-loveit/2nd-half-2022/:0:0","tags":["VMware","Culture","Benefits","vExpert"],"title":"What have I been up to? | 2nd half 2022","uri":"/hugo-loveit/2nd-half-2022/"},{"categories":["VMUG"],"content":"VMware Explore 2022 | San Francisco VMware Explore is always one of the premiere Technology Events every year. Here is a collection of links and tips to some of the activities that I would attend and enjoy. I always tried to attend the Keynotes to learn about new product announcements and to hear the direction that VMware was going. I attended a lot of sessions. See list of sessions that I would enjoy. I would do Hands on Labs that were not available to do anytime. There are some HOLs that are available only during the conference and there are VMware people to help you with the labs. If you are a TAM customer, there are sessions dedicated to TAM customers. Go to the Expo Area. You can always talk to VMware Engineers at the booths in the Expo Area and watch demos. A lot of Vendors in the Expo Area. I would allows attend some of the vBrownbag Tech Talks. The Tech Talks were a 10 - 15 minute presentation. Watch for Vendor Parties. They are always fun and drinks | food are always free. The Veeam party in the past was always one of the better parties. See a McLaren F1 car in person, experience the speed of F1 in a fun simulator and learn how VMware helps McLaren F1 accelerate innovation. Click to see Larger Image VMware Explore Sessions: Login to VMware Explore 2022 before clicking on session links. (Click Here) Agenda: VMware Explore Agenda Speakers: William Lam | Cloud Infrastructure Business Group Vincent Riccio | Cloud Management Business Unit Chris McClanahan | Cloud Management Business Unit Ariel Sanchez | One of the most accomplished TAMs you will meet. A mentor to many people in TECH John Nicholson | Storage and Availability Business Unit Sam McGeown | Technical Marketing team for Cloud Automation John Dias | Cloud Management solutions Amanda Blevins | Vice President and Chief Technology Officer for the Americas Kyle Ruddy | Senior Technical Product Marketing Manager for HashiCorp Graham Lockard | IT Infrastructure Manager | Penn State University | SaaS with Horizon Topics: SaltStack PowerCLI PowerShell | More sessions this year than I have seen in the past. VMware {code} vRealize Automation vRealize Operations vRealize Orchestrator vRealize Log Insight Virtually Speaking Podcast Live vSAN vSphere DevOps Sessions: VMware Explore | Twitter ","date":"2022-08-24","objectID":"/hugo-loveit/centra-pa-vmug-08-2022/:0:0","tags":["VMware","VMware Explore","VMWorld","vExpert","vCommunity"],"title":"Central PA VMUG | August 2022","uri":"/hugo-loveit/centra-pa-vmug-08-2022/"},{"categories":["PowerBlock"],"content":"VMware PowerBlock | August 2022 The August PowerBlock is absolutely going to be a well attended event. We are gong to have an all-star lineup, of highly qualified automation engineers, including Ariel Sanchez, Tom Gillaspy, Chris McClanahan, Dale Hassinger and our powerblock discussing a variety of topics. Here is the general outline for the conversation: How do you get started with automation? What does success look like? What are some of the common mistakes / misperceptions when getting started with automation? What are some examples of customer success using vRealize Automation? Why Automate? How to get started? What does success look like? What are some common mistakes / misperception’s Examples of customer success ","date":"2022-08-19","objectID":"/hugo-loveit/vmware-powerblock-08-2022/:0:0","tags":["VMware","PowerBlock","Automation","vRA","vRealize Automation"],"title":"VMware PowerBlock | August 2022","uri":"/hugo-loveit/vmware-powerblock-08-2022/"},{"categories":["Automation"],"content":"Using SaltStack Config api for Automation from vRA Catalog or cmd A personal goal of mine for 2022 was to start doing more with Python when working with VMware SaltStack Config. As a Windows Admin most of my automation was done with PowerShell. All the examples you see in the salt documentation are written in Python, so to use Python for some processes makes sense. I had a use case that made sense to use Python. I want to schedule reboots of AWS EC2 instances using SaltStack Config. For Servers that are on-prem I would always automate the process to create a server reboot scheduled task in vCenter. With AWS I want to use VMware SaltStack Config to schedule the Server Reboot. Manual Steps: Create a SaltStack Config Job to do the reboot. I create a job named “vRA | Server Reboot”. This job will be used for all scheduled server reboots. Copy the Python Code below and create a ScheduleServerReboot.py file that will be copied to the SSC server. The Python Code completes the following steps: Creates a Target that uses the grain “id” and will only target the Server that you want to reboot. Creates a Run Once Schedule to use the job and new target that was created. Sends an email to show that the run once schedule to reboot server was created. SaltStack Config Server: My SaltStack Config Server (SSC) is what VMware provides when using Life Cycle Manager (LCM) running Photon OS. Python Code: # --- Python Code --- # --- In my code I show the Password. In Production DO NOT DO THIS. # --- There are so many different ways to include encrypted PWs in the code. # --- Use what works best in your environment. # example to run the script # python3 /scripts/ScheduleServerReboot.py -name '2019DC' -dateTime '2022-06-25T23:00' import argparse import pprint import json from datetime import datetime from datetime import timedelta import random import smtplib, ssl from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart # --- Generate a random ID number randomNumber = random.randint(0,1000) randomNumber = '0000' + str(randomNumber) randomNumber = randomNumber[-4:] print('ID:',randomNumber) # --- parse arguments parser = argparse.ArgumentParser(description=\"Create Targets\", formatter_class=argparse.ArgumentDefaultsHelpFormatter) parser.add_argument(\"-name\", help=\"Target Name\") parser.add_argument(\"-dateTime\", help=\"Schedule Date | Time\") args = vars(parser.parse_args()) # --- Set up variables argName = args[\"name\"] argDateTime = args[\"dateTime\"] argDate = argDateTime[0:10] # --- Print the variables print('Server Name: ',argName) print('Date | Time: ',argDateTime) # --- Connect to SSC Server host = 'https://192.168.86.110' user = 'root' password = 'HackMe!' from sseapiclient.tornado import SyncClient client = SyncClient.connect(host, user, password, ssl_validate_cert=False) # --- Check to make sure minion exists minionName = '' minionReturn = client.api.minions.get_minion_presence(minion_id = argName) #print(targetReturn) for x in minionReturn.ret['results']: #print(x) minionName = x['minion'] print('minionName:', minionName) if minionName == '': print('Minion not found!') minionExists = 'false' else: print('Minion found!') minionExists = 'true' # --- Create Target ID | Name targetID = 'id:' + argName targetName = \"vRA | Reboot | \" + argName + ' | ' + argDate + ' | ID:' + randomNumber print('Target ID:',targetID) print('Target Name:',targetName) # --- Create New SSC Target client.api.tgt.save_target_group(tgt={'*': {'tgt_type': 'grain', 'tgt':targetID}}, name=targetName) # --- Get UUID of new Target Created targetReturn = client.api.tgt.get_target_group(name=targetName) for x in targetReturn.ret['results']: #print(x) targetUUID = x['uuid'] print('Target UUID:', targetUUID) # --- Get UUID of Job to run in Schedule #jobReturn=client.api.job.get_jobs() jobName = 'vRA | Server Reboot' print('Job Name: ',jobName) jobReturn = client.api.job.get_jobs(name=jobName) for x in jobReturn.ret['results']: #print(x) jobUUID = x['uuid'] print","date":"2022-06-26","objectID":"/hugo-loveit/saltstack-config-api/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","Python","salt-api"],"title":"VMware vRealize SaltStack Config API","uri":"/hugo-loveit/saltstack-config-api/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 9: Using salt-api with PowerShell for Windows Server Automation This post is to show how to use PowerShell to make RESTful API calls to SaltStack Config. This is something that I have wanted to do for awhile. I could never find any examples in my Google searches, so I took the time to learn how the examples that use curl work and translated that into PowerShell Code. I hope some Windows Server Admins will find this post helpful. I like using salt to do Windows Server Configuration Management more than remote PowerShell. You can run changes against many servers at the exact same time instead of looping thru a list of servers names. I am also going to look at use salt-api with vRealize Automation ABX action scripts. In some previous posts I used the POSH-SSH module but when you use the salt-api, the PowerShell Module POSH-SSH is no longer needed. Configuration Changes to the SaltStack Config Server: My SaltStack Config Server (SSC) is what VMware provides when using Life Cycle Manager (LCM) running Photon OS. The following steps are what I needed to do in my Lab environment from the SSC CLI to enable salt-api: * Always make sure you have a good snap | backup before making any changes to SSC Server Install CherryPy: pip3 install cherrypy Install the PyOpenSSL package: pip3 install pyopenssl Generate a self-signed certificate: salt-call --local tls.create_self_signed_cert open firewall port 8000: iptables -A INPUT -i eth0 -p tcp --dport 8000 -j ACCEPT Edit /etc/salt/master file: vi /etc/salt/master Add these lines to the /etc/salt/master file: external_auth: pam: root: - .* rest_cherrypy: port: 8000 ssl_crt: /etc/pki/tls/certs/localhost.crt ssl_key: /etc/pki/tls/certs/localhost.key Restart salt-master and check service status for any errors: systemctl restart salt-master systemctl status salt-master Enable | Start salt-api and check service status for any errors: systemctl enable salt-api systemctl start salt-api systemctl status salt-api Tests to make sure SaltStack Config Changes are working: I did all this PowerShell code from my mac. To use self-signed certs I use -SkipCertificateCheck. On a Windows OS the code is different. # --- PowerShell Code --- Invoke-WebRequest -Uri 'https://192.168.86.141:8000' -SkipCertificateCheck Results: StatusCode : 200 StatusDescription : OK Content : {\"return\": \"Welcome\", \"clients\": [\"local\", \"local_async\", \"local_batch\", \"local_subset\", \"runner\", \"runner_async\", \"ssh\", \"wheel\", \"wheel_async\"]} RawContent : HTTP/1.1 200 OK Server: CherryPy/8.9.1 Date: Sat, 11 Jun 2022 20:57:46 GMT Access-Control-Allow-Origin: * Access-Control-Expose-Headers: GET, POST Access-Control-Allow-Credentials: true Vary: Accept-E… Headers : {[Server, System.String[]], [Date, System.String[]], [Access-Control-Allow-Origin, System.String[]], [Access-Control-Expose-Headers, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 146 RelationLink : {} Make sure you see StatusCode: 200 Next step is to make sure you get a token: # --- PowerShell Code --- # --- In my code I show the PassWord. In Production DO NOT DO THIS. # --- There are so many different ways to include encrypted PWs in the code. # --- Use what works best in your environment. $saltServerAddress = 'https://192.168.86.110:8000' # --- Set the json body $body = '{ \"username\": \"root\",\"password\": \"HackMe!\",\"eauth\": \"pam\"}' # --- Fetch New Token from salt master $url = \"$saltServerAddress/login\" $Params = @{ Method = \"Post\" Uri = $url Body = $Body ContentType = \"application/json\" } $fetch = Invoke-RestMethod @Params -SkipCertificateCheck $fetch $fetch.return.token Results: return ------ {@{token=6696846c802f78d5326a69b79d36e95015d37f5a; expire=1655025071.22838; start=1654981871.22838; user=root; eauth=pam; perms=System.Object[]}} 6696846c802f78d5326a69b79d36e95015d37f5a You will see “token=” in the return data PowerShell API Code Examples: Run a test.ping # --- PowerShell Code --- $minionName = '2019DC' $saltServerAddress = 'https://192.168","date":"2022-06-10","objectID":"/hugo-loveit/saltstack-config-part-09/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","Salt API"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 9","uri":"/hugo-loveit/saltstack-config-part-09/"},{"categories":["Automation"],"content":"Salt functions that I find myself using the most. I have been using VMware vRealize SaltStack Config for several months and I thought I would share and create my own cheat sheet to show which functions I use the most as a Windows Server admin and how to format the syntax. I still feel that I barely use all the capabilities that salt has to offer. SaltStack Config is a very Powerful tool to have available for anyone that has a vRealize Suite License. As a Windows Server admin don’t be afraid of salt because you feel it was made for Linux admins. That is NOT the case. I will be managing all Windows Server in my environment with salt. That includes VMs in vCenter and cloud native Azure VMs. This cheat sheet will be updated often to show examples as my journey into the salt world continues. Check back often. Link to salt module Documentation Ping - Make sure server responds: \u003e Command: salt \"vCROCS01\" test.ping OR salt \"*\" test.ping OR salt \"vC*\" test.ping \u003e Results: vCROCS01: True \u003e Command using --output=json: salt \"vCROCS01\" test.ping --output=json \u003e Results: { \"vCROCS01\": true } Windows Disk Usage: \u003e Command: salt \"vCROCS01\" disk.usage \u003e Results: vCROCS01: ---------- C:\\: ---------- 1K-blocks: 67642364.0 available: 15229492.0 capacity: 77% filesystem: C:\\ used: 52412872.0 E:\\: ---------- 1K-blocks: 41809856.0 available: 38486208.0 capacity: 8% filesystem: E:\\ used: 3323648.0 \u003e Command: salt \"vCROCS01\" disk.usage --output=json \u003e Results: { \"vCROCS01\": { \"C:\\\\\": { \"filesystem\": \"C:\\\\\", \"1K-blocks\": 67642364.0, \"used\": 52424392.0, \"available\": 15217972.0, \"capacity\": \"78%\" }, \"E:\\\\\": { \"filesystem\": \"E:\\\\\", \"1K-blocks\": 41809856.0, \"used\": 3323648.0, \"available\": 38486208.0, \"capacity\": \"8%\" } } } Windows Services: \u003e Command stop a Windows Service: salt \"vCROCS01\" service.stop \"spooler\" \u003e Results: vCROCS01: True \u003e Command disable a Windows Service: salt \"vCROCS01\" service.disable \"spooler\" \u003e Results: vCROCS01: True \u003e Command get status of a Windows Service: salt \"vCROCS01\" service.status \"spooler\" \u003e Results: vCROCS01: False \u003e Command see if a Windows Service is enabled: salt \"vCROCS01\" service.enabled \"spooler\" \u003e Results: vCROCS01: False Copy files to | Delete files from | Windows Server: \u003e Command Copy a file to a Windows Service - Source File | Destination File: salt \"vCROCS01\" cp.get_file \"salt://installer_file.msi\" \"C:\\install_files\\installer_file.msi\" \u003e Results: vCROCS01: C:\\install_files\\installer_file.msi \u003e Command Delete a file from a Windows Service: salt \"vCROCS01\" file.remove 'C:\\install_files\\installer_file.msi' \u003e Results: vCROCS01: True minion grain data: \u003e Command add grain data to a minion: salt \"vCROCS01\" grains.append azure_vm \"True\" vCROCS01: ---------- azure_vm: - True \u003e Command get grain custom data from a minion: salt \"vCROCS01\" grains.get azure_vm \u003e Results: vCROCS01: - True \u003e Command get grain os data from a minion: salt \"vCROCS01\" grains.get os \u003e Results: vCROCS01: Windows \u003e Command get grain os data from a minion: salt \"vCROCS01\" grains.get osfullname \u003e Results: vCROCS01: Microsoft Windows Server 2016 Datacenter \u003e Command get grain domain data from a minion: salt \"vCROCS01\" grains.get domain \u003e Results: vCROCS01: vcrocs.info \u003e Command get grain IP data from a minion: salt \"vCROCS01\" grains.get fqdn_ip4 \u003e Results: vCROCS01: - 192.168.99.99 \u003e Command sync minion grain data with salt master: salt \"vCROCS01\" saltutil.sync_grains \u003e Results: vCROCS01: PowerShell: \u003e Command run powershell command: salt \"vCROCS01\" cmd.run 'Get-Service | Where-Object {$_.Status -eq \"Running\"}' shell=PowerShell \u003e Results: vCROCS01: Status Name DisplayName ------ ---- ----------- Running AppHostSvc Application Host Helper Service Running BFE Base Filtering Engine Running BrokerInfrastru... Background Tasks Infrastructure Ser... Running CbDefense CB Defense Running CDPSvc Connected Devices Platform Service Running CertPropSvc Certificate Propagation Running COMSysApp COM+ System Application Running CoreMessagingRe... CoreMessaging \u003e C","date":"2022-03-06","objectID":"/hugo-loveit/saltstack-cheatsheet/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Grains"],"title":"VMware vRealize SaltStack Config cheat sheet for a Windows Server Admin","uri":"/hugo-loveit/saltstack-cheatsheet/"},{"categories":["VMware vExpert"],"content":"VMware vExpert 2020 - 2022 | VMware vExpert Cloud Management 2021 - 2022 VMware vExpert 2020 - 2022 | VMware vExpert Cloud Management 2021 - 2022 I am very proud to be part of the VMware vExpert program. This is the third year that I was accepted into the program. One part of the vExpert program that I think is great is that the program recognizes people for sharing their knowledge and “Giving Back”. A person selected into the vExpert programs is someone that likes to share, wants to make themselves and everyone around them smarter. 2022 is also the 2nd year that I was accepted into the VMware vExpert Cloud Management subprogram. I think that 2021 was one of my most productive years and one that I advanced my own personal knowledge the most. Highlights of 2021 to get accepted into the vExpert Program: VMworld 2021 session (Presentation): Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] SaltConf21 session (Presentation): Managing Windows with SaltStack Config (6) of my personal Blogs were shared by the VMware “vExpert Cloud Management Community” on the Vmware Blog Web Site. I did several vRealize Automation Presentations at VMware HVC (Healthcare Virtualization Community) Events. PowerBlock Customer Showcase - VM “Right Sizing” I did a IDC interview for VMware on Automation that will be released in 2022. I did a VMware Customer Reference Interview that will be released in 2022. Link to Customer Reference I shared a vRealize Operations “Right Sizing” Dashboard on the code.vmware.com web site. What is the VMware vExpert Program? Program Overview The VMware vExpert program is VMware’s global evangelism and advocacy program. The program is designed to put VMware’s marketing resources towards your advocacy efforts. Promotion of your articles, exposure at our global events, co-op advertising, traffic analysis, and early access to beta programs and VMware’s roadmap. The awards are for individuals, not companies, and last for one year. Employees of both customers and partners can receive the awards. In the application, we consider various community activities from the previous year as well as the current year’s (only for 2nd half applications) activities in determining who gets awards. We look to see that not only were you active but are still active in the path you chose to apply for. Criteria If you are interested in becoming a vExpert the criteria is simple. We are looking for IT Professionals who are sharing their VMware knowledge and contributing that back to the community. The term “giving back” is defined as going above and beyond your day job. There are several ways to share your knowledge and engage with the community. Some of those activities are blogging, book authoring, magazine articles, CloudCred task writing, active in Facebook groups, forum (VMTN as well as other non VMware) platforms, public speaking, VMUG leadership, videos and so on. Thanks: I have worked with a great group of people at VMware, past and present. I would like to thank the following people for all their support in no particular order: Steve Leiberson, Karl Hauck, Cosmin Trif, Brock Peterson, Kevin Holland, Daniel Thomas, Marcus Roberts, Paul Schlosser. Special Thanks to David Kruse for getting me started with vRA. Special Thanks to some past co-workers, SEs, TAMs, HVC Members that I learned a lot from: Kirk Shaffer, Robert Mitchell, Dan Grove, Steve Holmes, Steve Pittenger, Anton Wesztergom (Opened my eyes to vRA Day 2). List of Bloggers that I follow and have learned a lot by them “Giving Back”: Cody De Arkland, Luc Dekens, Kyle Ruddy, William Lam, Nathen Bennett, Vince Wood, Alan Renouf. Special Thanks to the person that gave me my first Job in IT: David Cornelius and anyone else that helped me in my journey called my career… I have learned a lot from the vCommunity. I want to use this blog as a way for me to “give back”. If one person finds anything I post helpful I will consider my efforts successful. I am always open","date":"2022-02-22","objectID":"/hugo-loveit/vexpert-2022/:0:0","tags":["VMware vExpert 2020 - 22","VMware vExpert Cloud Management 2021 - 22","vCommunity","Giving Back","VMware"],"title":"vExpert 2022 | vExpert Cloud Management","uri":"/hugo-loveit/vexpert-2022/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 8: Pouring the salt grains My previous posts about grain data were to show how to add minion grain data during the creation of a new server with vRA using PowerShell. This post I want to show how I’m going to maintain the grain data that is not default out of the box grain data. Windows Server grain data not available out of the of box that I want to add to every minion AND make sure the grain data stays up to date: Windows Server Features | Roles Windows Server Installed Software Windows Server Running Services These are the steps that I use to maintain custom grain data with a Windows Server: Create a PowerShell Script that can run locally on a minion. Add the script to the SaltStack Config File Manager. Use salt-call to run salt.functions locally on a minion. See screen shot and my code examples below. Create a SaltStack Config Job to execute the PowerShell Script remotely on the minion. See Screen Shot. Create a SaltStack Config Schedule to run the job that you create. The job can run every day, once a week, every 4 hours. Whatever makes sense for your use case. See Screen Shot. If you want to run a script locally on a minion and use salt functions that is where you use the salt-call command. After you learn the salt-functions and are logged into a Windows Server locally, you can still use salt commands by using salt-call. # --- example code salt-call --version salt-call test.ping # --- Show Disk Usage salt-call disk.usage # --- Show Installed Features|Roles salt-call win_servermanager.list_installed # --- Show Installed Sofwtare salt-call pkg.list_pkgs Link to salt-call Documentation Step 1 - Add script to SaltStack Config File Manager: See code examples below to add Windows Server Features|Roles, Installed Software, and Runnings Services as grain data. Click to see Larger Image Click to see Larger Image Step 3 - Create SaltStack Config Schedule: Click to see Larger Image Code Examples: - Add Windows Features | Roles as grain data: \u003c# .SYNOPSIS This Script is used to Get Windows Servers Features and add as Grain Data .DESCRIPTION Windows Servers Features .PARAMETER No Parameters .INPUTS No inputs .OUTPUTS salt grain data .NOTES Version: 1.00 Author: Dale Hassinger Creation Date: 04/20/2022 Purpose/Change: Initial script development Revisions: .EXAMPLE N/A #\u003e # ----- [ Start of Code ] --------------------------------------------------------------------------- # --- Minion Get Windows Server Features Installed # --- Delete existing grains features data $saltCommand = 'salt-call grains.delkey sem_Windows_Feature force=True' #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand $saltCommand = 'salt-call win_servermanager.list_installed --output=json' #$saltCommand # --- Run Salt Command $results =Invoke-Expression -Command $saltCommand #$results $features = $results | ConvertFrom-Json #$features $features = $features.local #$features $features = $features -split(\":\") $features = $features -split(\";\") $features = $features -replace(\"@{\",\"\") $features = $features -replace(\"}\",\"\") $features = $features.trim() $features = $features -replace(\"=\",\" | \") $features = $features | Sort-Object #$features foreach($feature in $features){ # --- Grains Append $saltCommand = 'salt-call grains.append sem_Windows_Feature \"' + $feature + '\"' #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand } # End Foreach # --- Delete existing grains last update data $saltCommand = 'salt-call grains.delkey sem_last_grains_update force=True' #$saltCommand # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Add a Date that grains last updated $grainsupdateDate = Get-Date $grainsupdateDate = $grainsupdateDate.ToString(\"MM/dd/yyyy | hh:mm\") #$grainsupdateDate # --- Grains Append $saltCommand = 'salt-call grains.append sem_last_grains_update \"' + $grainsupdateDate + '\"' # --- Run Salt Command Invoke-Expression -Command $saltCommand # --- Grains Sync $saltCommand = 'salt-call saltutil.sync_grain","date":"2022-02-12","objectID":"/hugo-loveit/saltstack-config-part-08/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","grains"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 8","uri":"/hugo-loveit/saltstack-config-part-08/"},{"categories":["SaltStack Config","VMware Aria"],"content":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 7 The more I use VMware vRealize SaltStack Config as a Windows Server Admin the more I see the importance of having grain information added to the minion to be able to target servers many different ways. During a recent discussion it was suggested to have the ability to target Windows Server minions by the Windows server Features|Roles that were installed on the server and by which software was installed on a server. There are built-in salt functions to get Features|Roles and installed software. Here is the code I used to get the information and add to the minion grain file using PowerShell. This will allow you to create targets to: minions with specific VMware Tools Versions minion with Web Server Feature|Role enabled etc… Salt Functions: # The POSH-SSH PowerShell module MUST be installed to use this code. # Name of Minion that you want to add grain data $minion = 'DBH-210' # ----- [ SSH Connection to SalStack Config Server ] ------------------------------------ Write-Host 'Making SSH Connection to SaltStack Config Server...' $Server = 'ssc.vCROCS.local' $userName = 'root' $Password = 'VMware#1' # The next line is how to create the encrypted password $psPassword = ConvertTo-SecureString -String $Password -AsPlainText -Force $creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $psPassword $Params = @{ \"ComputerName\" = $Server \"Credential\" = $creds } # End Params # SSH Connection to SaltStack Server $sshSession = Get-SSHSession if($sshSession.SessionId -eq 0){ Write-Host 'SSH Connection to SSC Server already completed' } # End If else{ Write-Host 'Creating new SSH Connection to SSC Server' New-SSHSession @Params } # End Else # ----- [ Start Adding Grain Data ] --------------------------------------------------------------------------- # ----- [ Minion Get Windows Server Features|Roles Installed ] ------------------------------------ Write-Host 'Getting Windows Server Features|Roles Installed...' $sshCommand = 'salt \"' + $minion + '\" win_servermanager.list_installed --output=json' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params $results = Invoke-SSHCommand @Params $features = $results.Output $features = $results.Output | ConvertFrom-Json $features = $features.PsObject.Properties.Value $features = $features | ConvertTo-Xml # Append Each Feature|Role information to grains Write-Host 'Appending Windows Server Features|Roles Installed to grains...' $grainsKey = 'vCROCS_Windows_Feature' foreach($feature in $features.Objects.Object.Property){ $grainsValue = $feature.Name + ' | ' + $feature.'#text' # Grains Append $sshCommand = 'salt \"' + $minion + '\" grains.append ' + $grainsKey + ' \"' + $grainsValue + '\"' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params Invoke-SSHCommand @Params } # End Foreach # ----- [ Minion Get Windows Server Installed Software ] ------------------------------------ Write-Host 'Getting Windows Server Installed Software...' # Get Installed Software $sshCommand = 'salt \"' + $minion + '\" pkg.list_pkgs --output=json' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params $results = Invoke-SSHCommand @Params $installedPackages = $results.Output $installedPackages = $installedPackages | ConvertFrom-Json $installedPackages = $installedPackages.PsObject.Properties.Value $installedPackages = $installedPackages | ConvertTo-Xml $grainsKey = 'vCROCS_Windows_Installed_Software' # Append Windows Server Installed Software to grains Write-Host 'Appending Windows Server Installed Software to grains...' foreach($installedPackage in $installedPackages.Objects.Object.Property){ $grainsValue = $installedPackage.Name + ' | ' + $installedPackage.'#text' # Grains Append $sshCommand = 'salt \"' + $minion + '\" grains.append ' + $grainsKey + ' \"' + $grainsValue + '\"' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Par","date":"2022-01-14","objectID":"/hugo-loveit/saltstack-config-part-07/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","POSH SSH"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 7","uri":"/hugo-loveit/saltstack-config-part-07/"},{"categories":["Year in Review"],"content":"Get-Review 2021 2021 was a good year for me with my career. I spent the entire year working from home and I find myself to be more productive when WFH. My wife and I moved into a different home and I now have a dedicated office area on the 2nd floor away from everyone. I still share my office with Belle (Rescue Dog adopted in 2020 before covid) everyday and she loves the fenced in back yard that she can run around in without a leash. In 2021, I started living the “Salt Life”. In July, I installed SaltStack Config for the first time and started taking a serious look at Salt. I went from zero to doing a presentation about SaltStack at VMworld 2021 in October and another presentation at SaltConf21 in November. Having a session selected for VMworld 2021 was a career “Bucket List” for me. After creating a vRealize Operations Dashboard on “Right Sizing” that I use in production, my vRealize Account Executive setup a meeting for me to meet Iwan ’e1’ Rahabok, who is the co-creator of the book “Operationalize Your World”. Iwan liked the Dashboard I created and included some details about the Dashboard in his book “Operationalize Your World”. I always say if one person finds anything I post helpful, I will consider my efforts successful. In 2021, between the presentations and blogs posts, I feel I have given back and helped some people. I shared the knowledge. 2021 was a successful year for me. Highlights of 2021 VMworld 2021 session (Presentation): Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] SaltConf21 session (Presentation): Managing Windows with SaltStack Config (6) of my personal Blogs were shared by the VMware “vExpert Cloud Management Community” on the Vmware Blog Web Site. I did several vRealize Automation Presentations at VMware HVC (Healthcare Virtualization Community) Events. PowerBlock Customer Showcase - VM “Right Sizing” I did a IDC interview for VMware on Automation that will be released in 2022. I did a VMware Customer Reference Interview that will be released in 2022. Link to Customer Reference I shared a vRealize Operations “Right Sizing” Dashboard on the code.vmware.com web site. My Top 10 Blog Posts of 2021 How to use PowerShell modules with vRA 8.2 | 978 How vRealize Operations can help with “Right sizing” VMs | 799 vRA 8.1 ABX PS | 508 Automating Automation | 415 VMware vRealize SaltStack Config as a Windows Server Admin part 1 | 333 VMware vRealize SaltStack Config as a Windows Server Admin part 2 | 280 vRealize automation 8.1 PowerShell abx | 216 VMware vRealize SaltStack Config as a Windows Server Admin part 4 | 195 VMware vRealize SaltStack Config as a Windows Server Admin part 6 | 164 VMworld 2021 SaltStack Config session | 147 What the top 10 list shows me is there is a lot of interest to use PowerShell with the vRealize Products, VMware admins are interested in Right Sizing and since VMware Purchased SaltStack people what to get started with the product. *Stats from Google Analytics. Set-Goals 2022 I do a lot of posts on PowerShell and I use it everyday. I want to take some time in 2022 and learn Python. I have done a little bit of Python but not enough to call myself a Python Programmer. I think there are some use cases with vRealize Automation and SaltStack Config that knowing Python may help. I want to spend more time with Salt. Salt is a powerful tool and I want to expand my knowledge with Salt. Get a session approved for VMworld 2022 and SaltConf22. Do more VMware PowerBlock Presentations. Create more Blog Posts. Never Stop Learning… Thanks for visiting in 2021! ","date":"2022-01-01","objectID":"/hugo-loveit/look-back-2021/:0:0","tags":["vExpert 2021","VMworld 2021","SaltConf21","VMware","vRealize Automation","vRealize Operations","vRealize","Salt","SaltStack Config","PowerShell","Year in Review","Goals"],"title":"Year in Review - 2021 | 2022 Goals","uri":"/hugo-loveit/look-back-2021/"},{"categories":["PowerCLI"],"content":"How to work with NSX-T security Tags using PowerShell PowerShell Code to work with NSX-T APIs Included some examples of code to Automate adding/removing NSX-T Security Tags from VMs. Also some code to show which VMs are assigned to a Security TAG or which TAGs are assigned to a VM. Code Samples: Add NSX-T Security TAG to a VM. Remove NSX-T Security TAG from a VM. Show All VMs assigned to a NSX-T Security TAG Show All Security TAGs assigned to a VM Hope you find these snippets of code useful. Click to expand code: # Connect to vCenter $vCenterName = 'vCenter.vCrocs.info' Connect-VIServer $vCenterName -Credential $cred Disconnect-VIServer * -Force -Confirm:$false Start NSX-T # ----- [ Start Add a Single NSX-T TAG to VM ] -------------------------------------------------- # Add code to allow untrusted SSL certs # Use when connecting to NSX-T Server and running from a Windows Computer Add-Type @\" using System; using System.Net; using System.Net.Security; using System.Security.Cryptography.X509Certificates; public class ServerCertificateValidationCallback { public static void Ignore() { ServicePointManager.ServerCertificateValidationCallback += delegate ( Object obj, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors ) { return true; }; } } \"@ [ServerCertificateValidationCallback]::Ignore(); # ----- [ This section connects you to vCenter ] ------------------------------------------------------------------ $vCenterName = 'vCenter.vCROCS.info' Connect-VIServer $vCenterName -Credential $cred # Connect to vCenter and fetch virtual machine info. $vmInfo = Get-VM -Name DBH-213 | Get-View # ----- [ This section defines the API header ] ------------------------------------------------------------------ # Set Username/Password info for API $user = 'srv_vRA_NSXT@vCROCS.info' $nsxpassword = 'VMware!1' $pair = \"$($user):$($nsxpassword)\" $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($Pair)) $headers = @{ Authorization = \"Basic $encodedCredentials\" } $vmid = $vm.Config.InstanceUuid $newtag = 'UST.SM.UBUNTU_SERVER' $JSON = @\" { \"external_id\": \"$vmid\", \"tags\": [ {\"scope\": \"\", \"tag\": \"$newtag\"} ] } \"@ $posturl = \"https://$nsxmanager/api/v1/fabric/virtual-machines?action=add_tags\" Invoke-RestMethod -Uri $posturl -Headers $headers -Method Post -Body $JSON -ContentType \"application/json\" # ----- [ End Add a Single TAG ] -------------------------------------------------- # ----- [ Start Get NSX-T TAGs assigned to VM ] -------------------------------------------------- $vmid = $vm.Config.InstanceUuid $geturl = \"https://$nsxmanager/api/v1/fabric/virtual-machines?external_id=$vmid\u0026included_fields=tags\" $getrequest = Invoke-RestMethod -Uri $geturl -Headers $headers -Method Get -ContentType \"application/json\" $currenttags = $getrequest.results.tags.Tag $currenttags # ----- [ End Get NSX-T TAGs assigned to VM ] -------------------------------------------------- # ----- [ Start remove NSX-T TAG from VM ] -------------------------------------------------- $vmid = $vm.Config.InstanceUuid $newtag = 'UST.SM.UBUNTU_SERVER' $JSON = @\" { \"external_id\": \"$vmid\", \"tags\": [ {\"scope\": \"\", \"tag\": \"$newtag\"} ] } \"@ $posturl = \"https://$nsxmanager/api/v1/fabric/virtual-machines?action=remove_tags\" Invoke-RestMethod -Uri $posturl -Headers $headers -Method Post -Body $JSON -ContentType \"application/json\" # ----- [ End remove NSX-T TAG from VM ] -------------------------------------------------- # ----- [ Start Get VMs assigned to a TAG NSX-T ] -------------------------------------------------- $geturl = \"https://$nsxmanager/policy/api/v1/infra/tags/effective-resources?scope=\u0026tag=UST.SM.UBUNTU_SERVER\" $result = Invoke-RestMethod -Uri $geturl -Headers $headers -Method Get -Body $JSON -ContentType \"application/json\" Write-Host $result.results.target_display_name # ----- [ End Get VMs assigned to a TAG NSX-T ] -------------------------------------------------- Lessons Learned: Very easy to automate NSX-T Security ","date":"2021-12-31","objectID":"/hugo-loveit/powershell-nsx-t/:0:0","tags":["PowerShell","PowerCLI","NSX-T","VMware","vRealize","Automation"],"title":"NSX-T security Tags and PowerShell","uri":"/hugo-loveit/powershell-nsx-t/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 6: How to use SaltStack Config with Windows Server and PowerShell The latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin is going to be a lot PowerShell. I use PowerShell for a lot of Automation, Windows Server and Linux Server. When working with VMware vRealize SaltStack Config I constantly found myself going to the CLI to test and learn how the salt functions work. In the Part 5 Blog of this series I showed how I am using the PowerShell module POSH-SSH to connect to the VMware vRealize SaltStack Config Server to run salt commands remotely. So I started writing some PowerShell functions to run remote salt commands on the Salt Master. The end goal might be to turn this script into a Salt PowerShell Module. To start it will only have the functions that I find myself using the most. I could turn this into a community Github Project and see if there would be any interest. If anyone reading this blog post has any interest please reach out to me. (Dale.Hassinger@vCROCS.info) My goal is to make all these PowerShell Salt functions work with VMware vRealize SaltStack Config like PowerCLI works with VMware vCenter. Use same verb/noun terminology. I use PowerCLI for all my VMware Automation. Works awesome! So to create these PowerShell Functions to work with my existing automation scripts is a win win in my book. Normally I will use a Products APIs to do all these types of processes. I looked at VMware vRealize SaltStack Config APIs and to the best of my knowledge I can not use them like I can the PS functions that I created. That may change in a future release of VMware vRealize SaltStack Config. Fingers crossed. Salt PowerShell Functions: # ----- [ Start of Functions ] -------------------------------------------------------------------------------------------------------------- # The POSH-SSH PS module MUST be installed to use these functions. # Function to Connect to SSC Server function Connect-SSCServer { param( [parameter(mandatory = $true)] [string]$Server, [parameter(mandatory = $true)] [string]$userName, [parameter(mandatory = $true)] [string]$Password ) # End Parameters # The next line is how to create the encrypted password $psPassword = ConvertTo-SecureString -String $global:HashiPW -AsPlainText -Force $creds = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $psPassword $Params = @{ \"ComputerName\" = $Server \"Credential\" = $creds } # End Params # SSH Connection to SaltStack Server New-SSHSession @Params } # End Function # Function to Disconnect from SSC Server function Disconnect-SSCServer { Remove-SSHSession -SessionId 0 } # End Function # Sync Minion grains function invoke-SSC.sync.grains { param( [parameter(mandatory = $true)] [string]$minion ) # Sync Grains after adding new grain information $sshCommand = 'salt \"' + $minion + '\" saltutil.sync_grains --output=json' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params $results = Invoke-SSHCommand @Params return $results.Output } # End Function # Minion Grain Append function set-SSC.grains.append { param( [parameter(mandatory = $true)] [string]$minion, [parameter(mandatory = $true)] [string]$grainkey, [parameter(mandatory = $true)] [string]$grainval ) # End Parameters # Grains Append $sshCommand = 'salt \"' + $minion + '\" grains.append \"' + $grainkey + '\" \"' + $grainval + '\"' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params $results = Invoke-SSHCommand @Params } # End Function # Minion Grain DelKey function set-SSC.grains.delkey { param( [parameter(mandatory = $true)] [string]$minion, [parameter(mandatory = $true)] [string]$grainkey ) # End Parameters $sshCommand = 'salt \"' + $minion + '\" grains.delkey \"' + $grainkey + '\" force=True' #$sshCommand $Params = @{ \"SessionId\" = 0 \"Command\" = $sshCommand } # End Params $results = Invoke-SSHCommand @Params } # End Function # Minion Test Ping function invoke-SSC.test.ping { param( [parameter(m","date":"2021-10-09","objectID":"/hugo-loveit/saltstack-config-part-06/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","POSH SSH"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 6","uri":"/hugo-loveit/saltstack-config-part-06/"},{"categories":["SaltConf"],"content":"SaltConf 2021 | SaltStack Config Session I will be doing a SaltConf presentation for the first time at SaltConf 2021. I attended SaltConf 2020 for the first time after VMware purchased SaltStack Config. This past year I have spent a lot of time reviewing SaltStack Config as a Windows Server Admin and I am excited to share what I have learned, to hopefully help some Windows Server Admins get started. I wanted to learn one of the configuration Management products for a couple of years and after VMware purchased SaltStack Config, the decision became obvious to me which one I should learn since I live in VMware vRealize Products all day, every day. So register today for SaltConf 2021 and attend my session. - Link to SaltConf21 - Session Details: Date: November 4th. Time: 10:00 am - 10:50 am Details: Track 1 - Managing Windows with SaltStack Config Presenters: Vincent Riccio and Dale Hassinger - Link to SaltConf21 Agenda - Click to see Larger Image In our Presentation we will show you how to use SaltStack Config to manage Microsoft Windows Servers. How to use Salt to install software, work with Windows Services, make Registry changes, configuration management, how to quickly respond to Zero-Day Security patching, how to add vCenter TAGs/NSX-T TAGS/ Active Directory OUs as minion grain information, how to target minions, minion beacons, salt reactors and other normal day to day Windows Server administration. Link to watch SaltConf21 Presentation","date":"2021-10-02","objectID":"/hugo-loveit/saltconf-2021/:0:0","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","vRealize Automation","vRA","SaltConf 2021","Salt Beacons","Salt Grains","Salt Reactors","Salt Targets","Salt Jobs","Salt States"],"title":"SaltConf 2021 | SaltStack Config Session","uri":"/hugo-loveit/saltconf-2021/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 5: How to use SaltStack Config with Windows Server and PowerShell The latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin will be an update to some items that I have talked about in previous posts. I have been spending more time with VMware vRealize SaltStack Config and I have learned some better ways to do some of the processes that I have talked about already. My goal to to learn and use the built-in functions that are already in the product. I found that using the salt functions require less coding and better logging. First example of changing how I am going to use VMware vRealize SaltStack Config. When I first started looking at grains I thought I would edit the grains file with PowerShell and add the grains content to the file. What I did worked but I think I learned a better way. There is a function grains.append that will append grains data to the grains file on the minion. This works much better and when I run a job to add grains information it is listed in Activity Completed within VMware vRealize SaltStack Config. I like to be able to see when changes are made by the jobs that are run. The code that I have listed below to get vCenter TAGs assigned to a VM and add the information to the minion is using PowerShell. To use this script you MUST install the PowerShell Module POSH-SSH. The process I am showing connects to a vCenter, creates a SSH Connection to the Salt Server, gets all assigned vCenter TAGs for a VM, , runs salt commands to add grain information to the grains file of a minion, and then runs a minion grains sync. This concept can be used for a lot of different systems. If you want to add NSX-T Security TAGs as grain information (Thanks Karl Hauck for this idea), AD (Active Directory) OU of the Windows Server, or anything you think would be useful to Target minions within VMware vRealize SaltStack Config. I really like the idea of using POSH-SSH to make the SSH connection to the Salt Master Server and running commands. I do a lot of Automation within vRA (vRealize Automation) with PowerShell and I can use this same concept to use VMware vRealize SaltStack Config to complete the processes that need run. I can also create Catalog items within vRA that you can make available to APP Teams to use. The Catalog item could be running salt jobs in VMware vRealize SaltStack Config. Cool Stuff! Grains File: This is what I learned about salt grains when using with a Windows OS. The default location of the grains file is in directory “C:\\salt\\conf\". The grains file is named grains with no extension. Example grains file: NSXSecurityTAGs: - vCROCS.Apps.VMware.SaltStack.Minion vCenterTAGs: - TAG-VM-WebServer - TAG-VM-vCROCS - TAG-App-Hugo “Grain Name”: “The value of the grain”. In my example I wanted the grain to be named “vCenterTags” and the values will be the vCenter TAG names “TAG-VM-vCROCS, TAG-VM-WebServer, TAG-App-Hugo”. I have (3) vCenter TAGs assigned to this VM. I will be able to create a SaltStack Config Target based on any of the TAGs. I like the formatting that is used for the grains file by using the function grains.append. SaltStack Config Targets: When I add the vCenter TAG information to the grains file I am then able to create SaltStack Config Targets based on the grain “vCenterTags”. SaltStack Config Targets: Click to see Larger Image SaltStack Config Target Definition: Click to see Larger Image How to add the vCenter TAGs to the grains file on all your VMs in SaltStack Config: Get the VM Names and All Assigned vCenter TAGs PowerShell Script: # ----- [ SSH SaltStack Config Server - Add vCenter TAGs to Minion Grains ] -------------------------- # Connect to vCenter before running this code # Define your Credentials # SSH to SaltStack Server - MUST HAVE POSH-SSH PowerShell Module Installed New-SSHSession -ComputerName 'SaltServer.vCROCS.info' # Test SSH Connection $CheckSSHConnection = Get-SSHSession -SessionId 0 $CheckSSHConnection.Connected $vmNames = Get-VM -Nam","date":"2021-10-01","objectID":"/hugo-loveit/saltstack-config-part-05/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","Grains","POSH-SSH"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 5","uri":"/hugo-loveit/saltstack-config-part-05/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 4: How to use SaltStack Config with Windows Server and PowerShell The latest item on my journey with VMware vRealize SaltStack Config as a Windows Server Admin will be salt grains. I have a specific use case that made me start looking at grains. In VMware vCenter I use vCenter TAGs to organize VMs. I also use vCenter TAGs to organize VMs in vRealize Operations. I want to use the same logic of using vCenter TAGs in SaltStack Config. SaltStack Config does not use vCenter TAGs OOTB (Out of the Box) for VMs. At the end of this Blog Post I also have an SaltStack Config Orchestration example. Instead of running multiple Jobs one at a time I have (4) steps in a SLS file that I run using a salt-run job and the function state.orchestrate. Grains File: This is what I learned about salt grains when using with a Windows OS. The default location of the grains file is in directory “C:\\salt\\conf\". The grains file is named grains with no extension. Example grains file: vCenterTags: TAG-VM-vCROCS|TAG-VM-WebServer|TAG-App-Hugo “Grain Name”: “The value of the grain”. In my example I wanted the grain to be named “vCenterTags” and the values will be the vCenter TAG names “TAG-VM-vCROCS|TAG-VM-WebServer|TAG-App-Hugo”. I have (3) vCenter TAGs assigned to this VM. I will be able to create a SaltStack Config Target based on any of the TAGs. SaltStack Config Targets: When I add the vCenter TAG information to the grains file I am then able to create SaltStack Config Targets based on the grain “vCenterTags”. SaltStack Config Targets: Click to see Larger Image SaltStack Config Target Definition: Click to see Larger Image How to add the vCenter TAGs to the grains file on all your VMs in SaltStack Config: Step 1: Get the VM Names and All Assigned vCenter TAGs into a csv file Example PowerShell Code to get all vCenter VM Names and all vCenter TAGs assigned to the VMs # ----- [ Start Create CSV File with all VMs/TAGs Assigned ] ---------------------------- # I did not include code to connect to the vCenter. There are many ways to do this step. # Make sure you are connected to the vCenter BEFORE running this code. $allvmstaginfoFile = \"C:\\Salt\\allvmstaginfo.csv\" # Create Array $allVMsTagInfo = @(\"\") # Add Headers to Array $VMTagInfo = 'VM,TAGs' $allVMsTagInfo += $VMTagInfo # Get All VMs in you vCenter $vmNames = Get-VM $vmNames = $vmNames | Sort-Object Name foreach($vmName in $VMNames){ # Get VM Tag(s) $VMTags = Get-TagAssignment -Entity $vmName.Name # If more than (1) TAG I will join them as a string with a '|' separating the values. $VMtags = $VMTags.Tag.Name -join '|' # Create a string with the VMname and all the vCenter TAGs assigned separated by a comma $VMTagInfo = $vmName.Name + ',' + $VMTags # Add Info to array $allVMsTagInfo += $VMTagInfo } # End Foreach # Delete existing all VMs Tag csv File Remove-Item -Path $allvmstaginfoFile # Create new all VMs Tag csv File New-Item $allvmstaginfoFile -ItemType File # Add array Data to CSV file $allVMsTagInfo | Select-Object -Skip 1 | Set-Content $allvmstaginfoFile # ----- [ End Create CSV File with all VMs/TAGs Assigned ] ---------------------------- Step 2: Copy the csv file to the salt master After I create the csv file I copy to the StackStack Config Server (Salt Master) in the folder /var/srv/salt. This is where all files need to be saved when you use function cp.get_file. Step 3: Copy the csv file to the salt minions You may be wondering why I copy the file to the minion and not copy to a central share. My environment has NSX-T with zero trust. Most of my automation I do not open ports to servers that are not needed permanently. So the concept of using salt to copy files to minions, use the files to make changes and then delete the files when processes are complete works well in a zero trust environment. Job to copy csv file to minions: Click to see Larger Image Step 4: Run Script on minion After I copy the csv file to the minion I run a script to create/update the grains files. Job to run a PowerShell","date":"2021-09-05","objectID":"/hugo-loveit/saltstack-config-part-04/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","Grains"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 4","uri":"/hugo-loveit/saltstack-config-part-04/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 3: How to use SaltStack Config with Windows Server and PowerShell The next steps on my journey with VMware vRealize SaltStack Config as a Windows Server Admin will be beacons and reactors. Working with Jobs helped me understand how to make changes Ad-Hoc. I have a Job to quickly stop the Print Spooler but what if I always want the state of the Print Spooler Service to be stopped. How do I NOT allow a Server Admin to login into the server and manually start the service? This is where beacons and reactors work with minion configurations that you want to make permanent. This is the configuration Management Part of Salt Stack. To always make sure a Windows Service is stopped I created a beacon.conf file. On a Windows Server the Beacon.conf needs to be in the ‘C:\\salt\\conf\\minion.d' folder. Anytime a beacon.conf file is added to a minion or modified the salt-minion service needs restarted. I have a salt Job to restart the salt-minion service. Beacons: Beacon File: Sends events to the event bus on the salt master from a minion This beacon.conf example is for service state changes. The Beacon sends an event to the salt master if a Windows Service is started/stopped. beacons: service: - services: Spooler: onchangeonly: true This is what the event will look like in the events if you are monitoring. salt/beacon/DBH-211/service/Spooler { \"Spooler\": { \"running\": true }, \"_stamp\": \"2021-08-06T11:53:57.212810\", \"id\": \"DBH-211\", \"service_name\": \"Spooler\" } Reactors: Reactor File: Monitors the event bus for events specified. IE: salt/beacon/*/service/Spooler reactor: - 'salt/auth': # React to a new minion - salt://reactor/accept-key.sls # Run this state to auto accept new minion - 'salt/beacon/*/service/Spooler': # React to Spooler Service Change - salt://vCROCS/spooler_auto_stop.sls # Run this state How the beacons and reactors work together: # What this line is doing in the reactor is watching for an beacon event from any minion # The * means all minions. You could specify a minion name. # Looking for service events. # The service event that is specified is the Spooler event. - 'salt/beacon/*/service/Spooler' # This is the event sent from the beacon to the event bus salt/beacon/DBH-211/service/Spooler # What the reactor is looking for and what the beacon sent matches. # The state specified in the reactor will now run # This is the state specified in my example - salt://vCROCS/spooler_auto_stop.sls State File: State File: Stops the Spooler Service if it was started {% if data['Spooler']['running'] == true %} stop_service: local.service.stop: - tgt: {{ data['id'] }} - arg: - Spooler {% endif %} State File: Starts the Spooler Service if it was stopped {% if data['Spooler']['running'] == False %} start_service: local.service.start: - tgt: {{ data['id'] }} - arg: - Spooler {% endif %} Beacons: To copy the beacon file to the minions I created a Job that I can manually run. Job to copy a file to a minion: Click to see Larger Image After the beacon file is copied to the minion you MUST restart the minion service. Job to restart minion service: Click to see Larger Image Lessons Learned: Beacons are a good way to make sure the configuration you want is not altered. Beacons can monitor more than just services that I am showing in this blog post. I will cover more use cases in future blog posts. Salt Links I found to be very helpful: SaltStack Cheat Sheet SaltStack Tutorials SaltStack Documentation SaltStack Community Slack Channel Learn vRealize Automation Learn SaltStack Config When I write about vRealize Automation (\"vRA\") I always say there are many ways to accomplish the same task. SaltStack Config is the same way. I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a GREAT Tool that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config. ","date":"2021-08-27","objectID":"/hugo-loveit/saltstack-config-part-03/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management","Beacons","Reactors"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 3","uri":"/hugo-loveit/saltstack-config-part-03/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] Click to see Larger Image I will be doing a VMworld presentation for the first time at VMworld 2021. I have attended VMworld since 2012 and it has been a goal of mine to do a presentation at a VMworld since the first year I attended. There are always so many good sessions to attend. We are putting many hours into this presentation so that the people attending feel it was worth their time and learn a lot about the topic. We have a awesome topic and some great presentations to show. So register today for VMworld 2021 and attend my session. Session Name: Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] Description: This session will include an overview of vRealize SaltStack Config and see how a customer in the healthcare vertical is managing their fleet of Windows systems using vRealize Automation SaltStack Config (SSC). Presenters: Vincent Riccio, TMM, VMware Dale Hassinger, Lead Systems Engineer - SME Topic: Manage \u0026 Operate Multiple Clouds Track : Multi-Cloud Primary Product: VMware vRealize Automation / vRealize Automation Cloud Primary Audience: Infrastructure Engineer Session Type: Breakout Session Level: Technical 200 Pass Type: General and Tech+ Passes VMworld online conference: 10/05/2021-10/07/2021 Link to session in VMworld Content Catalog: Manage Windows Workloads Through vRealize Automation SaltStack Config [MCL1895] Click to see Larger Image In our Presentation we wil show how to use SaltStack Config to manage Microsoft Windows Servers. How to use Salt to install software, work with Windows Services, make Registry changes, configuration management, and other normal day to day Windows Server administration. ","date":"2021-08-12","objectID":"/hugo-loveit/vmworld-2021-mcl1895/:0:0","tags":["Salt","SaltStack","SaltStack Config","Windows Server","PowerShell","VMware","vRealize","Configuration Management","Automation","vRealize Automation","vRA","VMworld 2021"],"title":"VMworld 2021 - SaltStack Config Session","uri":"/hugo-loveit/vmworld-2021-mcl1895/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 2: How to use SaltStack Config with Windows Server and PowerShell I have been able to spend more time with VMware vRealize SaltStack Config. Here are some updates on my journey with SaltStack as a Windows Server Admin. Auto-Accept new minions: I wanted new Windows Server builds (minions) to be auto accepted into SaltStack Config instead of someone manually approving new minions. To do this you need to have a reactor.conf file. I created the file in SaltStack Config File Server in base/reactor/reactor.conf (See Code below). You also need to create a reactor.conf file in /etc/salt/master.d on the salt master. I use vi to create and edit the reactor.conf file. Anytime you make changes to the /etc/salt/master.d/reactor.conf file you need to restart the salt-master service. In addition to the reactor file you need to create a state file. I located the file in /reactor/accept-key.sls (See Code below). I specified what the name of the new server starts with so that not all new minions get auto accepted. If the Naming Standard that I use is not what the new Server is named it will not be auto accepted. This is one way to have some rules on which new Servers are auto accepted. Reactor File: base/reactor/reactor.conf reactor: - 'salt/auth': # React to a new minion - salt://reactor/accept-key.sls # Run this state to auto accept new minion Location of the Reactor File: Click to see Larger Image State File: base/reactor/accept-key.sls {% if 'act' in data and data['act'] == 'pend' and data['id'].startswith('DBH') %} minion_add: wheel.key.accept: - args: - match: {{ data['id']}} {% elif 'act' in data and data['act'] == 'pend' and data['id'].startswith('vCROCS') %} minion_add: wheel.key.accept: - args: - match: {{ data['id']}} {% endif %} Location of the State File: Click to see Larger Image To restart the salt-master service run this command from the salt-master cli. service salt-master restart To check the status of the salt-master service run this command from the salt-master cli. systemctl status salt-minion.service Jobs: I think a good way to get Started with SaltStack Config after you have some minions added is to create some Jobs. You can create Jobs in the SaltStack Config UI. Go to Config/Jobs. You can manually run these Jobs on the minions. Here are some screen shots of jobs that can be useful. To run a job on a single minion go to minions and find the minion you want to run the job on, Select the minion, Select Run Job, Select the Job you want to run, select Run Now. If you select multiple minions the Job will run on all minions selected. That is where you start to see the True Power of Salt. If you Select one, ten, a hundred or a thousand minions, the time to complete the selected job is very quick. As a Windows Admin and using PowerShell, it would not be as easy to run a script on a 1,000 Servers at the exact same time. List of all the Jobs: Click to see Larger Image Job to stop the Print Spooler Service: Click to see Larger Image This job I am using a salt function service.stop. Pass the Service name as a argument. Job to stop the Print Spooler Service using a PowerShell Command: Click to see Larger Image This job I am using a salt function cmd.run. Pass the PowerShell code and type of cmd as arguments. Job to stop and disable the Print Spooler Service using a PowerShell script: Click to see Larger Image This job I am using a salt function cmd.script. Pass the PowerShell script path and type of cmd as arguments. Job to copy a file to a minion: Click to see Larger Image This job I am using a salt function cp.get_file. Pass the file source path and destination path as arguments. Job to reboot a minion: Click to see Larger Image This job I am using a salt function system.reboot. Pass the wait time to reboot and wait_for_reboot as arguments. If you noticed I have some jobs doing the same process but one is using a salt function and one is using a PowerShell command. I wanted to show you how your existing PowerShell skills as a ","date":"2021-08-05","objectID":"/hugo-loveit/saltstack-config-part-02/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 2","uri":"/hugo-loveit/saltstack-config-part-02/"},{"categories":["SaltStack Config","VMware Aria"],"content":"Part 1: How to use SaltStack Config with Windows Server and PowerShell I have recently started looking at using VMware vRealize SaltStack Config. This blog is a work in progress on my journey with Salt. I started at zero and let’s see what I discover as I work towards getting to PROD. So if this topic is interesting to you, check back often. I wanted to learn one of the server configuration products that are available like Salt, Puppet, Chef, Ansible, etc… but I wasn’t sure which would be the best choice long term. When VMware purchased SaltStack Config the product to choose became a lot easier for me. SaltStack Config is included with vRealize Suite for licensing and I can call VMware support for help, SaltStack Config became the obvious product to pick. I like to show how to use VMware vRealize Products from a Windows Server Admin point of view. I do work with both Windows Servers and Linux Servers but most information you see online with Salt is using Linux Servers. I also do most of my current automation with PowerShell scripts. I do not want to lose all the time invested into the logic with my current PowerShell scripts. I am not going to go thru the process to install SaltStack Config. There is already some very good blogs written on installing SaltStack Config. One item I would recommend with installing Salt-Stack Config is to use VMware vRealize Life Cycle Manager (“LCM”). LCM makes the process to install SaltStack Config a lot easier. This Blog is assuming you already installed SaltStack Config, now how do I use salt and what do I use salt for. Installing and Configuring SaltStack Config The first step (minions): After you get a working SaltStack Config Server setup, the first item you need to do is add the salt agent to some “Test” servers. Servers that have the salt agent installed are called minions. There is the option to not add the salt agent to servers but then you need to use SSH to connect. Windows Servers do not have SSH available as default so you would need to install an SSH server like OpenSSH on your servers. My thoughts are I need to add something for the minions to communicate with the salt-master. Instead of adding OpenSSH to every Windows Server I chose to install and use the salt agent. For testing you can manually install the minion agent on a server to become familiar with how the salt commands work. During the install there are two values you need to enter. The name of the master and the name you want to use for the minion. I did that on my first couple test servers but then I created some PowerShell code to install the salt minion agent. # ----- [ Install minion ] ----------------------------------------------- # Define Username/Password $username = 'username@vCROCS.info' # The next line is how to create the encrypted password # Read-Host -Prompt \"Enter your password - username\" -AsSecureString | ConvertFrom-SecureString | Out-File \"C:\\PWkey\\username.key\" $password = Get-Content \"C:\\PWkey\\username.key\" | ConvertTo-SecureString $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password # ----- [ This section connects you to vCenter where VM is located ] ----- # Connect to vCenter vCenterName = 'vCenter.vCROCS.info' Connect-VIServer $vCenterName -Credential $cred # ----- [ Install Salt Agent ] ------------------------------------------- # Name of Server to install the salt minion agent $vmName = 'DBH-217' # Copy the minion agent file to your windows server Copy-VMGuestFile -Source G:\\Salt-Minion-2019.2.4-Py3-AMD64-Setup.exe -Destination 'C:\\vCROCS' -VM $vmName -LocalToGuest -GuestCredential $cred # command string to install the Salt Minion Agent $PSText = 'C:\\vCROCS\\Salt-Minion-2019.2.4-Py3-AMD64-Setup.exe /S /master=salt /minion-name=' + $vmName # Run the command on remote Server Invoke-VMScript -VM $VMName -ScriptType bat -ScriptText $PSText -GuestCredential $cred After the minion agent is installed on your server you need to accept the key on the s","date":"2021-07-16","objectID":"/hugo-loveit/saltstack-config-part-01/:0:0","tags":["SaltStack Config","VMware Aria Automation","vRealize Automation","PowerShell","Windows Server","Configuration Management"],"title":"VMware vRealize SaltStack Config as a Windows Server Admin - Part 1","uri":"/hugo-loveit/saltstack-config-part-01/"},{"categories":["vRealize Operations","VMware Aria"],"content":"Using vROPS Data to help show APP Owners Proper VM Sizing: vRealize Operations does a good job to show you what the correct number for vCPU/Memory settings should be based on monitoring history. But instead of showing APP owners a screen that just shows what the current VM vCPU/Memory settings are and what the new settings “Should” be, I wanted to show the real data that proves why these changes should be made. It can still be hard for people to understand that taking away a VM resources can make performance better. If a mechanic told you to replace a v-8 engine in a vehicle with a 4 cylinder to get more performance, would you believe them? Probably not! vROPS Right Sizing does not just show you what vCPU to remove to make a VM performance better. If a VM requires more vCPU resources there is a Metric CPU|Add that can be very useful. vROPS Right Size Screen: Click to see Larger Image VM Names were removed from screen Shot In vCenter if you look at the performance of a VM one of the options is to show CPU Ready|State (ms). I think this is a metric that you can show to an APP Owner and they can understand why this is important. CPU Ready|State (ms): \"Time that the virtual machine was ready, but could not get scheduled to run on the physical CPU during last measurement interval\" vCenter VM Advanced Performance: Click to see Larger Image vCenter VM Advanced Performance Settings: Click to see Larger Image When I looked at vROPS OOTB (Out of the Box) the VM CPU Metric CPU|Ready (ms) was not being collected. I wanted to be able to show the CPU Metric CPU|Ready (ms) in a Right-Size/Performance Dashboard to show APP Owners this value. Steps to add Metric CPU|Ready (ms) to vROPS: Administration: Policies. Select your Default Policy. Edit Policy. Select Object Type: Virtual Machine Filter for the word Ready. Expand the metrics/CPU. You will see Ready (ms) Disabled. Change State and Instanced State to Enabled. Save See the (2) screen shots below. Click to see Larger Image Click to see Larger Image Here is a vROPS Dashboard that I created to show APP Owners Performance information and Right Sizing information in a \"Single Pane of Glass\". A question the APP Owners always ask is WHY should we take resources away from a VM to make the performance better. If you look at the Column CPU|Remove and then look at the column CPU|Ready (ms), the CPU|Ready (ms) is much higher on VMs that are NOT Right Sized. In one Dashboard I am showing several CPU performance metrics, vSAN performance metrics, CPU configuration (Counts/Hot ADD) and Right Sizing. I like to be able to look at all these metrics at the same time. Nice to be able to see if there is a relationship between performance, latency and Right Sizing. Does CPU performance affect the vSAN performance? Here is a VM that CPU|Remove is 0 and the CPU|Ready (ms) is much lower. Why is that? Dashboard Screen Shot: Click to see Larger Image VM Names were removed from screen Shot Click here to Download Dashboard and Views from VMware Code Web Site CPU | Ready (ms) metric after using vROPS Right Size recommendation: Click to see Larger Image This metric chart is showing a VM that had 12 CPU. vROPS recommended that the CPU count be 10. Before VM CPU count was changed to 10 you can see the CPU|Ready (ms) was running between 1500 - 2000 (ms). After the VM CPU count was changed to 10 you can see the CPU|Ready (ms) was running between 500 - 600 (ms). If you would do this across 100s of VMs in a cluster you would see even more performance gains because then the “Noisy Neighbors” would not be as Noisy. Performance Values: CPU|Ready (ms) should be 1000 or less for best performance CPU|Remove - I like to keep this at 2 or less. For some applications this can be trial and error. CPU|Add - I like to keep this at 0. Make sure the VM is sized with enough resources. Don’t under size VMs. This will keep the APP Owners Happy! The next section was in an IBM KB article that I found helpful: CPU ready time is a vSphere metric","date":"2021-05-15","objectID":"/hugo-loveit/vrealize-operations-right-size/:0:0","tags":["vROPS","Monitoring","vRealize Operations","Right Size","Optimize","Performance","Dashboard","Tip and Tricks","VMware Aria"],"title":"How vRealize Operations can help with Right Sizing VMs","uri":"/hugo-loveit/vrealize-operations-right-size/"},{"categories":["PowerCLI"],"content":"Using vRO REST API. - (Updated for vRA 8.4) I recently had a use case where I wanted to execute a vRealize Orchestrator Workflow by using REST API. There is some documentation available but not a lot of details on how to get and use variables, sdk-objects and bearer token for permission. Here is how I made the vRO REST API calls with PowerShell using vRealize Orchestrator built-into vRA. Steps: Permission: Need to get a Bearer Token from vRO to make REST API Call to execute Workflow. To get a Bearer Token you need to make an REST API Call with username/password. See example code. Workflow Information: Get Workflow ID. Get Workflow variable inputs. Get sdk-object names from a successful Workflow run. See Screen Shots and sample code. Run the Workflow you want to use REST API with manually at least one time successfully. When you look at the variables of a successful Workflow run it shows you what the Workflow is expecting for variables and sdk-objects. See Screen Shots. Code to get bearer Token (PowerShell): You can’t use vRO REST API without getting bearer token first. (Note: When vRealize Automation 8.4 was released there was a small change to api to get Bearer Token. See the changes in the code area. Everything else has stayed the same for my processes.) # Get Bearer Token from vRA REST API Call # Some of the commented lines are in the code for testing. I use to check variable # values when building the Automation. # I am showing password in this example. In Production I get the Password from a Hashi # Secret Server and DO NOT have the password Hard Coded. # --- [ Variables ] --- $password = 'VMware1' # --- [ Headers ] --- $headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\" $headers.Add(\"Content-Type\", \"application/json\") $headers.Add(\"Accept\", \"application/json\") # --- [ Body ] --- $body = \"{ `n `\"password`\": `\"passwordString`\", `n `\"username`\": `\"administrator`\" `n}\" $body = $body -Replace(\"passwordString\",$password) #$body # --- [ Invoke REST API ] --- # vRA 8.3 Use next line $response = Invoke-RestMethod -SkipCertificateCheck 'https://vRA-FQDN.domain.name/csp/gateway/am/api/login?access_token' -Method 'POST' -Headers $headers -Body $body # vRA 8.4 Use next line $response = Invoke-RestMethod -SkipCertificateCheck 'https://vRA-FQDN.domain.name/csp/gateway/am/api/login?cspAuthToken' -Method 'POST' -Headers $headers -Body $body $response | ConvertTo-Json #$response # vRA 8.3 Use next line #$response.access_token # vRA 8.4 Use next line #$response.cspAuthToken # vRA 8.3 Use next line $bearer_token = \"Bearer \" + $response.access_token # vRA 8.4 Use next line $bearer_token = \"Bearer \" + $response.cspAuthToken # $bearer_token Code to get execute a vRO Workflow using API Call (PowerShell): # Run vRA Workflow using API Call # --- [ Variables ] --- $vmName = 'DBH-1234' $emailAddress = Dale.Hassinger@vCROCS.info' $OSVersion = 'Ubuntu18044' $PSText = 'G:\\Scripts\\Create-Linux-Server-Step-1-v01-PROD.ps1 -vmNAME $vmName -emailAddress $emailAddress -OSVersion $OSVersion' # --- [ Headers ] --- $headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\" $headers.Add(\"Content-Type\", \"application/xml\") $headers.Add(\"Authorization\", $bearer_token) # --- [ Body ] --- $body = ' \u003cexecution-context xmlns=\"http://www.vmware.com/vco\"\u003e \u003cparameters\u003e \u003cparameter name=\"vm\" type=\"VC:VirtualMachine\" scope=\"local\"\u003e \u003csdk-object type=\"VC:VirtualMachine\" id=\"vCenter.FQDN,id:vm-12345\"/\u003e \u003c/parameter\u003e \u003cparameter name=\"vmUsername\" type=\"string\" scope=\"local\"\u003e \u003cstring\u003eusername@domain.name\u003c/string\u003e \u003c/parameter\u003e \u003cparameter name=\"vmPassword\" type=\"SecureString\" scope=\"local\"\u003e \u003cstring\u003evmPassword_string\u003c/string\u003e \u003c/parameter\u003e \u003cparameter name=\"programPath\" type=\"string\" scope=\"local\"\u003e \u003cstring\u003eC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\u003c/string\u003e \u003c/parameter\u003e \u003cparameter name=\"arguments\" type=\"string\" scope=\"local\"\u003e \u003cstring\u003earguments_string\u003c/string\u003e \u003c/parameter\u003e \u003cparameter name=\"workingDirectory\" type=\"string\" ","date":"2021-04-29","objectID":"/hugo-loveit/automating-automation/:0:0","tags":["vRO","vRealize Orchestrator","vRA","vRealize Automation","API","PowerShell","Automation"],"title":"Automating Automation (Updated)","uri":"/hugo-loveit/automating-automation/"},{"categories":["PowerCLI"],"content":"How to check if ports are open to a remote server PowerShell Code Use PowerShell to see if ports are open to a remote server. Living in a zero trust environment can be challenging. Here is some code that I have been using to test for open ports from a Windows server to any type of destination. Just change PortNumber and Destination for your use case. $PortNumber = '443' $Destination = 'Server.vCrocs.info' $socket = New-Object Net.Sockets.TcpClient $socket.Connect($Destination,$PortNumber) if($socket.Connected){ $PortOpened = 'Port: ' + $PortNumber + ' to ' + $Destination +' is Open! :)' $socket.Close() } # end if else{ $PortOpened = 'Port: ' + $PortNumber + ' to ' + $Destination +' IS NOT Open! :(' } # end else Write-Output $PortOpened Linux Commands If you work with VMware vRealize Suite of appliances here are some commands (curl and Netcat) that can be used with Linux OS to test if ports are open to destination servers. curl -v telnet://server01.vCROCS.info:443 nc -ztv server01.vCROCS.info 443 -w 3 Article Updated: 2021-04-24 ","date":"2021-04-24","objectID":"/hugo-loveit/check-ports/:0:0","tags":["PowerShell","PowerCLI","NSX","Zero Trust"],"title":"Open Ports | Zero Trust","uri":"/hugo-loveit/check-ports/"},{"categories":["RVTools"],"content":"Export RVTools xls Files Everyday PowerShell Code I like to create a Scheduled Task in vRealize Orchestrator to create RVTools files everyday. Here is a sample PowerShell script that could be used. The script is also on a 7 day rotation of files and automatically deletes old files. On the 1st of every month a file will also be created for history that is not deleted. $LogInfo = 'Starting Process to create an RVTools xlsx file for each vcenter.' $LogInfo $LogInfo = 'Creating xlsx file for vCenter vCenter01...' $LogInfo Start-Process -FilePath \"C:\\Program Files (x86)\\Robware\\RVTools\\RVtools.exe\" -ArgumentList '-s vCenter01.vCROCS.info -u administrator@vsphere.local -p \"_RVToolsPWDNRTAG7hackme!bwqahk2a4\" -c Exportall2xls -d \"V:\\RVTools\\vCenter01\"' -Wait $LogInfo = 'Creating xlsx file for vCenter vCenter02...' $LogInfo Start-Process -FilePath \"C:\\Program Files (x86)\\Robware\\RVTools\\RVtools.exe\" -ArgumentList '-s vCenter02.vCROCS.info -u administrator@vsphere.local -p \"_RVToolsPWDNRTAG7hackme!bwqahk2a4\" -c Exportall2xls -d \"V:\\RVTools\\vCenter02\"' -Wait # Create a RVTools file that will not be deleted for history on the 1st of every month $DayofMonth = Get-Date -Format \"dd\" if($DayofMonth -eq '01'){ Start-Process -FilePath \"C:\\Program Files (x86)\\Robware\\RVTools\\RVtools.exe\" -ArgumentList '-s vCenter01.vCROCS.info -u administrator@vsphere.local -p \"_RVToolsPWDNRTAG7hackme!bwqahk2a4\" -c Exportall2xls -d \"V:\\RVTools\\Archive\\vCenter01\"' -Wait Start-Process -FilePath \"C:\\Program Files (x86)\\Robware\\RVTools\\RVtools.exe\" -ArgumentList '-s vCenter02.vCROCS.info -u administrator@vsphere.local -p \"_RVToolsPWDNRTAG7hackme!bwqahk2a4\" -c Exportall2xls -d \"V:\\RVTools\\Archive\\vCenter02\"' -Wait } $LogInfo = 'Removing all XLSX files older than 7 days...' $LogInfo # Delete all RVTools Files in older than 7 day(s) $Daysback = \"-7\" $CurrentDate = Get-Date $DatetoDelete = $CurrentDate.AddDays($Daysback) $Path = \"V:\\RVTools\\vCenter01\" Get-ChildItem $Path -Recurse | Where-Object { $_.LastWriteTime -lt $DatetoDelete } | Remove-Item -Confirm:$false -Force -Recurse $Path = \"V:\\RVTools\\vCenter02\" Get-ChildItem $Path -Recurse | Where-Object { $_.LastWriteTime -lt $DatetoDelete } | Remove-Item -Confirm:$false -Force -Recurse ","date":"2021-04-24","objectID":"/hugo-loveit/schedule-rvtools/:0:0","tags":["vRealize Orchestrator","PowerShell","Automation","RVTools"],"title":"Schedule RVTools Data Export","uri":"/hugo-loveit/schedule-rvtools/"},{"categories":["vRealize Operations","VMware Aria"],"content":"The New Features I use the most. Donut Charts. This is one of my favorite new features. The donut chart allows you to show a lot of information in a smaller space and makes the Dashboards look more modern and clean looking. I have been replacing the Heat Map Widgets on some of my custom Dashboards with Donut Charts. If you click on the colors of the Donut charts you will then get a list of the data that makes up that color. Top-N Chart and Color Method. Adding color to the Top-N makes it so much more usable. With the previous version where is was just blue it didn’t grab your eye like adding the color. Using the Top-N chart and the Donut chart together makes a GREAT looking Dashboard. See my example below. Ping Monitoring. This feature always us to monitor non VMware devices. In a short period of time I learned a lot about latency and packet drops in our environment. Troubleshooting Workbench. In previous versions of vROPS I would create Dashboards to help with trouble shooting. With Trouble Shooting work bench I don’t need to create those custom Dashboards anymore. The included Trouble Shooting workbench is like what I did on steroids. Donut Chart and Top-N Example: Click to see Larger Image This single Dashboard has a lot of info that would has taken several Dashboards to show same amount of data using Heat Maps. This would be a good example of a Dashboard that managers may want to see. Click to see Larger Image Donut Chart Config: Create a Distribution View. Make the visualization a Donut Chart. Use Manual distribution. Create Buckets and set the values/colors for the Buckets. Add the View to a Dashboard. Click to see Larger Image Click to see Larger Image Top-N Chart Config: Add Top-N Widget to Dashboard Define configuration and Input Transformation. Output Data:Color Method:Custom is where you define the color values. Click to see Larger Image ","date":"2021-02-20","objectID":"/hugo-loveit/vrops8-new-features/:0:0","tags":["vROPS","vRealize Operations","Donut Charts","Top-N Charts","Ping Monitoring","VMware Aria"],"title":"vRealize Operations 8.x - New Features","uri":"/hugo-loveit/vrops8-new-features/"},{"categories":["vRealize Automation"],"content":"Options to use PowerShell Modules I like to review VMware vRA (vRealize Automation) 8.2 as a Microsoft Windows Server Admin. Most of the reviews you see are creating Linux VMs and customizing the OS using tools for Linux. I create Windows/Linux VMs and customize the OS using a new feature added to vRA 8.x, Action Based Extensibility (ABX) with PowerShell. In my vRA 7.6 environment, I use a PowerShell Host to run processes and on the PowerShell Host is where I install all the PS Modules that I use. When I started looking at how to use PowerShell with vRA 8.2 the one item that I needed to understand was how to use PowerShell Modules. VMware does have a Blog Post on how to include PowerShell modules with ABX Actions/vRO Work Flows - Click Here to see the Blog Post. After doing some testing and reviewing my options I decided to continue to use a PowerShell Host with vRA 8.2. What this allows me to do is use the same exact PowerShell Host for 7.6 and 8.2. The existing PS scripts that I have also work with both 7.6 and 8.2. No changes to any scripts and the PS Host. I like how VMware included PS as an options for all scripts within vRA 8.2. Hopefully in the future VMware will allow you to install your own PS Modules directly in the vRA Appliance. The one item that some people may not like about this setup is it does require an additional Windows Server that a standard vRA setup does not require. But to be able to use an existing Windows PS Host that can be shared between vRA 7.6 and 8.2 until I get my environment to 100% vRA 8.2 also has it positives. With Automation there is always many ways to complete the same task. I wrote a Blog Post previously that describes how to pass Cloud Template inputs/properties to ABX Actions. This Post is really using that same technique but instead of only running an ABX Action, this ABX Action Script is passing the inputs/customproperties onto a PowerShell Host. Here is link to previous post: VREALIZE AUTOMATION 8.2 - POWERSHELL ABX. By passing the custom properties as parameters to a PS Host I can also use PS Modules to connect to SQL servers and many other options. Basically any PS Module that is available can be used. Details on how to use a ABX Script with a PowerShell Host: Step 1: Create a Cloud Template. (See included yaml code and screen shot). Create inputs for the parameters you need to send to a PS script that will run on the PS Host. The inputs are the values that are used for the resource/properties. (See included yaml code) Create Properties in the resources section of the yaml for the inputs you just created. These properties will be the parameters that get passed to the PS Script. The properties get passed to the ABX script using $payload. (See included PS code) Step 2: Create a PowerShell ABX Action. (See included PS code and screen shot) To get the custom properties from the Cloud Template you need to use $payload. $payload.customProperties.\"Properties Name\" is how you get the values from the $payload. You can assign the custom properties to a variable within the ABX PS code. I use Invoke-VMScript to run the PS Script on the PS Host because my environment is also a Zero Trust Environment. Invoke-VMScript allows me to run PS scripts on remote servers without opening ports to the remote servers. Step 3: Create a Subscription. See Screenshot. The subscription is want runs the ABX scripts. A subscription can be Fired before or after a compute resource gets provisioned. I create a subscription for both in my environment. Within the subscription is where you define which ABX script is run. If you would want to string several ABX scripts together, the subscription could also run a ABX Flow. Sample Code and Screen Shots: Cloud Template: Click to see Larger Image The properties under resources in the yaml code will be used like parameters in a PS Script. Since I have a background in PowerShell that is how I am using the properties. When you deploy the Cloud Template, the values entered that","date":"2021-01-18","objectID":"/hugo-loveit/vra-82-powershell-host/:0:0","tags":["PowerShell","vRA","ABX","vRealize Automation","VMware Aria"],"title":"How to use PowerShell Modules with vRA 8.2","uri":"/hugo-loveit/vra-82-powershell-host/"},{"categories":["Recipe for Success"],"content":"How to be successful with VMware vRealize Products in your environment I often get asked to speak to different organizations about what I have accomplished with the VMware vRealize Suite of products. The one question that almost always gets asked is, how are you able to do everything that you have setup in your environment. After being asked this question a lot I thought I would give my thoughts in a Blog Post. Here is my “Recipe for Success”: Ingredients: Enjoy what you do. Give Back. Be involved in the vCommunity Enjoy where you work. Enjoy who you work with. Work at a place where management supports you. Don’t be afraid of change. Always keep track of what the industry is doing. Use Social Media like Twitter. Setup a Home Lab Learn, Learn, Learn! Think outside of the box Directions: The most important ingredient is to enjoy what you do. I have worked in the IT industry for 25+ years and I still have a Passion for it. I feel that I get paid to do my hobby. I am fascinated every day when I see some of the new technology that get released. There are some very smart people in the IT industry. I can truly say that I love what do for a job! When I create Automation that makes processes consistent and faster for the Team that I work with, I get a feeling that I have accomplished something. “Feel Good”/’Proud” feeling inside. Attend and Participate in user groups. VMUG, “Little Hacks”, SQL, HVC, PowerBlocks, Under The Hoods, etc… I started out by just attending and learning. I met a lot of people at the user groups. I now consider some of those people friends. After several years of being an attendee, I felt like I wanted to Give Back and start sharing some of the ideas that I have done. So, I started doing presentations myself. Everyone has something to share. Work for a Team that isn’t afraid of change. I say tear down the “Silos” and have everyone work together more. I have heard people say that Automation will eliminate my job. If you are an engineer, Automation will get the mundane items off your list. Let you focus more on Engineering type of tasks. The Cool Stuff! vRA: Start simple. Don’t try and have a 100 processes in your first Catalog item. Keep adding additional steps to the Catalog item until you cross off everything that needs to be done. Prove to management that the simple Automation is working and being used every day. My Automation is in a constant state of change. Always trying to make it better. Constantly including new processes. vROPS: Start my making some simple Dashboards with Heat Maps that show the Health of Items. Show your Hosts, VMs, Clusters. Start simple just like I said with Automation. You can then keep adding widgets to the Dashboards to give more information and make them more useful. Look at the “Text Display” widget to let you show information not included within vROPS. Have a goal of using vROPS as your “Single Pane of Glass”. Go to conferences. In 2020 since almost all conferences were online and free, I attended at least 6. Even if there was only one or two sessions that I wanted to attend, I took the time. Twitter is an awesome place to keep up. Use Twitter Lists to keep the “Garbage” out of you feed. I follow a lot of Technology businesses and Bloggers. Find people that have similar interests. Tech Companies are always giving updates about their products on Twitter. They post information about webinars that I find very useful. My Twitter Lists are public if you want to get started. Setup a Lab area of some type to be able to learn all the vRealize Products. One way to get a Home Lab started is to use VMware Fusion on Macs or VMware Workstation on PC’s. You can install nested ESXi on Fusion/Workstation. I have a Packt subscription that gives me access to a lot of Technology Books on a lot of topics. Well worth the money. Starting a Blog is a great way to start #GivingBack. Hugo is a great static site generator. You can use Github at no cost to store and host the web pages generated from Hugo.","date":"2021-01-15","objectID":"/hugo-loveit/recipe-for-success/:0:0","tags":["vExpert 2021","VMware","vRealize Automation","vRealize Operations","vRealize","Salt","SaltStack Config","PowerShell","Goals","Career","Training"],"title":"How to be successful with VMware vRealize Products in your environment","uri":"/hugo-loveit/recipe-for-success/"},{"categories":["vRealize Operations"],"content":"Creating Charts with ChartJS and displaying in vRealize Operations I like the idea of using VMware vRealize Operations as the “Single Pane of Glass” for all monitoring. The Citrix Team recently asked me if I could show license usage within vRealize Operations. They wanted to see the highest usage in the last 30 days, 10 days and 24 hours. Citrix license usage is not built into vROPS but I have used the “Text Display Widget” to show other information within vROPS. I wanted to create a half donut chart to show the highest license usage in the last 30 days, a horizontal bar chart to show the last 10 days and a table to show the last 24 hours. I reviewed to see what “Open Source” Javascript options were available and I found ChartJS. After reviewing how to program the files to create charts with ChartJS I liked the solution. ChartJS Displayed in vRealize Operations using the “Text Display Widget” Click to see Larger Image ChartJS Half Donut. Click to see Larger Image When you hold the mouse over the chart you will see the values. ChartJS Half Donut code: \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eCitrix Licensing Count\u003c/title\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cbody\u003e \u003cdiv style=\"width:95%\"\u003e \u003ccanvas id=\"doughnut-chart\"\u003e\u003c/canvas\u003e \u003c/div\u003e \u003cscript\u003e new Chart(document.getElementById(\"doughnut-chart\"), { type: 'doughnut', data: { labels: [\"Used\",\"Total\"], datasets: [ { label: \"Peak Usage\", backgroundColor: [\"#28B463\",\"#808B96\"], data: [1682,8000] } ] }, options: { title: { display: true, text: 'Citrix License Usage (MPS_PLT_CCU)', }, rotation: 1 * Math.PI, circumference: 1 * Math.PI } }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ChartJS Horizintal Bar Chart. Click to see Larger Image ChartJS Horizintal Bar Chart code: \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eCitrix Licensing Count\u003c/title\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv style=\"width:95%\"\u003e \u003ccanvas id=\"bar-chart-horizontal\"\u003e\u003c/canvas\u003e \u003c/div\u003e \u003cscript\u003e new Chart(document.getElementById(\"bar-chart-horizontal\"), { type: \"horizontalBar\", data: { labels: [\"01/03/2021\",\"01/02/2021\",\"01/01/2021\",\"12/31/2020\",\"12/30/2020\",\"12/29/2020\",\"12/28/2020\",\"12/27/2020\",\"12/26/2020\",\"12/25/2020\",\"Total Licences\"], datasets: [ { label: \"Peak Usage\", backgroundColor: [\"#28B463\", \"#28B463\",\"#28B463\",\"#28B463\",\"#28B463\",\"#28B463\",\"#28B463\",\"#28B463\",\"#28B463\",\"#28B463\",\"#808B96\"], data: [249,318,302,1402,1535,1498,1516,271,273,269,8000] } ] }, options: { legend: { display: false }, title: { display: true, text: \"Citrix License Usage (MPS_PLT_CCU)\" } } }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Read all the documentation on how to create ChartJS files. Very important steps need to be followed. All the Web pages to show Citrix Licence counts are updated very hour. The process to update the Web Pages is scheduled with vRealize Automation Orchestrator. The code to get the license information and create the web pages is all done with PowerShell. The License values collected every hour are saved in a Microsoft SQL Database. The process to save the data and create the web pages can be done many different ways. I outlined how I do it in my environment. What I feel was important to show was the finished HTML code to create the ChartJS Web Pages that I display in vRealize Operations. The data could be from any source that makes sense in your environment. This makes a great way to graphically show data within vROPS from data that is saved outside of vROPS. Link to my blog post that shows how to use the “Test Display Widget Link to ChartJS ","date":"2021-01-03","objectID":"/hugo-loveit/chartjs/:0:0","tags":["ChartJS","Citrix","vRealize Operations","Dashboard","vROPS","VMware Aria"],"title":"Creating Charts with ChartJS and displaying in vRealize Operations","uri":"/hugo-loveit/chartjs/"},{"categories":["Raspberry PI"],"content":"ESXi on Raspberry PI I have always be fascinated with everything that you can do with a Raspberry PI. When VMware released their Fling to install ESXi on the Raspberry PI I have become even more fascinated. An ESXi Host for the Home Lab for $50. Sign me up. During VMworld 2020, VMware announced that they would be releasing a Fling to install ESXi on the Raspberry PI. Before the VMworld session was over I had a new Raspberry PI ordered and it was delivered the next day, ahead of the Fling release, so that I would be ready. Click to see Larger Image I downloaded the ESXi Arm Edition Fling as soon as I seen it was available. Lessons Learned: Read all the documentation on how to install ESXi on Raspberry PI. Very important steps need to be followed. If you want to use more than one USB drive for storage use this ESXi Host advanced setting - USB.arbitratorAutoStartDisabled Set to 1 Use a minimum size of 256 GB for the USB drive. Read the Fling Documentation for preferred USB drive to use. The ARM version of Ubuntu server installed without any issues. I installed the Apache Web Server and Samba on the ARM Ubuntu Server and had no issues. Hugo Blog files run GREAT on ARM version of Ubuntu Server, with Apache web server, running on ESXi, installed on Raspberry PI. I am going to be adding information to this Blog post as I discover more cool information with running ESXi on Raspberry PI. Check back often. Link to ESXi Arm Edition - VMware Fling ESXi 7.0 on RAspberry PI - Cool Host Name :) Click to see Larger Image ESXi 7.0 on RAspberry PI Login Screen: Click to see Larger Image ESXi Managemnet Screen: Click to see Larger Image ESXi on Raspberry PI added to vCenter: Click to see Larger Image ESXi on Raspbeery PI added to vRealize Operations 8.2: Click to see Larger Image ","date":"2020-10-11","objectID":"/hugo-loveit/esxi_arm_raspberry-pi/:0:0","tags":["ESXi","Raspberry PI","ARM","vRealize Operations"],"title":"ESXi on Raspberry PI","uri":"/hugo-loveit/esxi_arm_raspberry-pi/"},{"categories":["vBrownbag"],"content":"How to use vRealize Operations as your monitoring “Single Pane of Glass” For the 2020 VMware VMworld my presentation for the vBrownbag TechTalks was selected. Learn how to use the “Text Display” Widget on Dashboards to display data that is not within vRealize Operations. Display Weather Forecasts, Radar Maps, Data from SQL DBs on your next NOC Dashboard. Socials: Twitter: https://twitter.com/vBrownBag Facebook: https://facebook.com/vBrownBag iTunes: http://bit.ly/vbrownbagitunes https://vBrownBag.com is a community of people who believe in helping other people. Specifically we work in IT infrastructure and we help other people in the IT industry to better their carreers by educating. Most frequent activity is producing the vBrownBag podcast. vBrownBag also attends global conferences to produce TechTalks and theater sessions. About vBrownBag Podcasts The vBrownBag crew host podcasts where community members present on topics that will help others in the community. Some podcast series are aimed at helping people achieve certifications. Other podcasts help community members learn an entirely new subject area. We also cover areas like storage or automation. The podcast has been running weekly since 2010. vBrownBag TechTalks The vBrownBag crew love IT conferences, the only place where we actually see each other, the awesome people who are our presenters and the community members who follow the podcast. The conferences are also a great place to generate some more community learning content. ","date":"2020-10-01","objectID":"/hugo-loveit/vbrownbag-presentation/:0:0","tags":["vBrownbag","vRealize Operations","vROPS","VMworld","Podcast","Dashboard"],"title":"vBrownbag VMworld Presentation","uri":"/hugo-loveit/vbrownbag-presentation/"},{"categories":["vRealize Operations","VMware Aria"],"content":"vRealize Operations - Dashboards: I was recently reviewing some sample custom vRealize Operations Dashboards and I seen where some of the Dashboards had custom text and images. I reviewed how they included the text and images and in some of the sample Dashboards they used the “Text Display” Widget and used a url for the content. They would display images saved on a web server. I thought this was interesting and started reviewing what else could be displayed by using a url with the “Text Display” Widget. The first thought I had was to display the weather for both the data center locations where I work. This could be used with a NOC type Dashboard. I looked online for a weather widget site and got the code to display the weather for the specific locations. If you go to Administration/Configuration/Metric Configurations/TxtWidgetContent you can create html files to save the widget code. See examples in images below. You can display any Widget data from any web site that provides widgets using the “Text Display” Widget. After I successfully added weather widgets I wanted to get more serious and show data from a SQL Database. I use a SQL database to store data from some vRealize Automation Day 2 BluePrints that I created. Some example BluePrints where I store data in a SQL DB are Server Builds and Server Decomissions. I created a web page that displayed the SQL Data and added another “Text Display” widget to the Dashboard. I used the url of the web page and assigned it to the widget and now I am also able to show SQL Data on a Dashboard. The reason I wanted to show Weather and SQL data is to use vRealize Operations Dashboards as the “Single Pane of Glass” for all monitoring. I have never seen a demo from VMware to use the “Text Display” Widget this way but I think this is awesome. This could completely change the way I use vRealize Operations Dashboards. There are not always vRealize Operations Management Packs available and this provides a cool way to show any data on a Dashboard. The data will be for reference only but it does allow the “Single Pane of Glass”. vRealize Operations Dashboard: Click to see Larger Image Here is a closeup of the Dashboard so you can see the details. Click to see Larger Image Widget Code: Administration/Configuration/Metric Configurations/TxtWidgetContent Click to see Larger Image Here is a closeup. Create a html file and paste the Widget Code. Click to see Larger Image Select the html file created to show the widget data Click to see Larger Image url Page: Click to see Larger Image The url web page could be a static or dynamic page. Use whatever works best for you. I think this opens up so many possibilities of what you can display on a Custom Dashboard. If you want to take it a step further you could publish the Custom vRealize Operations Dashboard with Workspace One and provide the data to anyone in your organization even if they are not a vRealize Operations user. Cool Shit! The “Text Display” Widget should be renamed to the “Cool Shit” Widget! ","date":"2020-07-17","objectID":"/hugo-loveit/text-display-widget/:0:0","tags":["vROPS","vRealize Operations","Dashboard","Tip and Tricks","VMware Aria"],"title":"Text Display Widget - More Powerful than just displaying text on a Dashboard...","uri":"/hugo-loveit/text-display-widget/"},{"categories":["WFH","Home Lab"],"content":"Working from Home | My New Homelab. Smart Desk: Like most people that work in the Technology Field, I have been “WFH” (Working From Home) since the beginning of March. I already had a dedicated office area but it wasn’t setup for full time employment. I always liked a L-Shaped desk and I had this layout by pushing to straight desks together. Worked OK but could use improvement. So I started looking at new desks. I had two requirements, L-Shaped and I also wanted my next desk to be a standup Desk. I reviewed a lot of desks online and I decided to go with the L-Shaped Smart Desk from Autonomous. I am the type of person that usually likes to “touch and feel” this type of purchase to make sure the quality is good but after reviewing what other people were saying about Autonomous I decided to make the purchase. My biggest concern was damage during shipping. Click to see Larger Image When the desk was delivered I was impressed by how well the desk was packaged. Autonomous does a great job making sure nothing gets damaged. Everything arrived OK and there was no damage or missing pieces. The desk is heavy to put together by yourself. I took my time so I wouldn’t damage anything and the process to assemble was very easy. The directions were good. All the holes in the top are pre-drilled, which make it very nice to align all the pieces. The corners on the top are all slightly rounded and the edges are all eased. That really adds to the look and feel. I was impressed. I’m sure this also helps in shipping so that the top doesn’t get damaged. The quality of the top is so nice that a mouse does not work without a mouse pad. I did have to purchase a mouse pad to use with this desk. A black mouse pad on a black top looks good. I like the wire management included with the desk. I think I will be ordering a couple of the Autonomous Desk Clamp Power Outlets to make wire management even better. All my Apple Space Grey items look good on the Black top. I am anxious to see how often I will use the desk while standing and if I will like to be standing while programming. There is enough room on the L-Shaped desk to hold (3) monitors, (2) Mac Mini’s, external drives, iPad, iPhone, MacBook Pro, AirPods, HomePod, Microsoft Surface Pro, Dell Work Laptop, Shure Mic and a Google Home (Yes I am an Apple Fanboy). Happy with my Smart Desk decision. Click to see Larger Image VMware Home Lab: In addition to upgrading my Home Office Desk, it was time to upgrade my VMware Home Lab. My HPE GEN 6 DL380 was not on the VMware supported hardware list anymore and generated a lot of heat and noise in the Home Office. I already had an Apple Mac Mini with VMware Fusion installed but it didn’t have a lot of memory installed. I used it to run some small VMs but mainly used the DL380 for my Homelab. So I upgraded the memory on the Mac mini to 64 GB. I also purchased a second Mac Mini and upgraded the memory to 64 GB. So now my Homelab consists of (2) Mac Mini’s with a total of 128 GB memory. I have multiple nested ESXi 7.0 Hosts installed on each Mac Mini using VMware Fusion. The setup has worked well for me so far. No noise and heat like I had with the DL380. Plus I can use the Mac Mini’s for more than just a Homelab. Turn on the ESXi Hosts when needed and then just power off to do my normal everyday computing. If I don’t want to run the VMs on ESXi, I can also just run VMs directly on Fusion. Click to see Larger Image So a month after making my Home Lab work with Apple Mac Mini’s, Apple decides to make all new Apple computers with ARM processors. I guess my next Home Lab upgrade will not be Apple Computers. I will probably look at using Intel NUCs or something like the NUC for my next Home Lab. ","date":"2020-07-11","objectID":"/hugo-loveit/standup-desk/:0:0","tags":["WFH","Home Lab"],"title":"Smart Desk and Homelab.","uri":"/hugo-loveit/standup-desk/"},{"categories":["vRealize Automation"],"content":"Infoblox 1.1 plugin for vRA 8.1 I recently setup the Infoblox 1.1 plugin for vRA 8.1 and ran into an interesting challenge that I thought I would share. The setup of the plugin is straight forward; follow the documentation and you’ll likely be set. However, if you use custom DNS views in Infoblox (internal, external, etc.) then some additional configuration is required that’s not easily identified. Out of the box, the Infoblox IPAM integration comes with only a few default properties. I left these values in place when creating my first VM build blueprint but the Infoblox_AllocateIP action would always fail. Action Run logs under the Extensibility tab are a great way to troubleshoot. They were displaying the following error: Click to see Larger Image The fix for this issue is to add a custom property called Infoblox.IPAM.Network.dnsView and set the appropriate value. This property needs to be added in both the integration settings as well as in the blueprint. Integration Settings: Click to see Larger Image Blueprint: Click to see Larger Image Once you complete these steps, you’ll find that the Infoblox_AllocateIP action will successfully complete. Click to see Larger Image For the record, the ability to test deployments without actually kicking off a build is fantastic. I confirmed that the test was accurate by running a deployment and verifying that an IP was assigned and a DNS record was registered. Hope this helps. Dan Grove ","date":"2020-06-14","objectID":"/hugo-loveit/infoblox/:0:0","tags":["vRA","InfoBlox","Dan Grove"],"title":"Infoblox 1.1 plugin for vRA 8.1","uri":"/hugo-loveit/infoblox/"},{"categories":["Podcast"],"content":"IT Reality Podcast Podcasts I have been listening to Podcasts for many years. Everyday while driving to and from work I would listen to a Podcast. Anytime I traveled to a conference I would download hours worth of Podcasts to listen to while flying. Most of the Podcasts I listen to are Technology related. Here are some of my favorites: IT Reality Virtual Speaking Podcast Develop Great Managers vBrown Bag Automators Mac Power Users Twit Network of Podcasts I have had an interest to be a guest on a Podcast for several years. I always thought to myself, when I get to a point in my career that I could share my knowledge, I would try and be a guest on a Podcast. After doing several presentations about VMware vRealize Automation, I wanted the next step to be a guest spot on a Podcast to reach a larger audience. When I saw a post on Twitter that the IT Reality Podcast was looking for everyday Technology people passionate about a topic and willing to share the knowledge, I reached out to them to show my interest in appearing on their Podcast. We had a meeting and the Hosts felt I had a good story to tell, so we scheduled a time to record the Podcast. The hosts, Vince Wood and Sam Larch, were awesome to work with. They also invited Nathan Bennett to be on the episode as a guest and he was also great to talk with. The experience to talk with these guys was a good way for me to appear on a Podcast. While recording the Podcast I learned some knowledge from Nathan that I will use in my current Automation environment. If it wasn’t for other people sharing knowledge by creating Blogging web sites or appearing on Podcasts, I wouldn’t have the knowledge that I do today. I hope that I can give back to the vCommunity like they have done for me. I would encourage anyone who wants to share their knowledge to Just Do It! Create a Blogging Web Site or start attending local User Groups and “Little Hacks”. It can be very rewarding. Click to see Larger Image Link to Episode What is vRealize Automation - Episode 21 Enjoy! ","date":"2020-05-29","objectID":"/hugo-loveit/it-reality/:0:0","tags":["vRA","PowerShell","Podcast","IT Reality"],"title":"What is vRealize Automation - Episode 21","uri":"/hugo-loveit/it-reality/"},{"categories":["vRealize Automation"],"content":"Options to use PowerShell Modules I wanted to review VMware vRA (vRealize Automation) 8.x as a Microsoft Windows Server Admin. Most of the reviews you see are creating Linux VMs and customizing the OS using tools for Linux. I am going to create Windows Server VMs and customize the OS using a new feature added to vRA 8.1, Action Based Extensibility (ABX) with PowerShell. No vRO (Orchestrator) Workflows will be used. This is completely different compared to how I create Windows Servers with vRA 7.6. The enterprise organizations that I have worked for are 90%+ Microsoft Windows Servers. It is important for me to have vRA be able to create Windows Servers and make all configuration changes using PowerShell. You could also use this technique to make changes to a Linux VM using the PowerCLI commands Invoke-VMscript and Copy-VMGuestFile. I did create a Blog Post on this topic. BluePrint Requirements: I want to manually enter the VM Name. I don’t want an auto generated name. After the Windows Server VM is created I want to to able to add vCenter TAGS to VM, make some OS changes, and install software based on values entered on the BluePrint. What I created to accomplish the requirements: Created a BluePrint. See included code and screen shot. Created a PowerShell Action. See included code and screen shot. Created a Subscription. See Screenshot. Sample Code and Screen Shots:— BluePrint: Click to see Larger Image The properties under resources in the yaml code can be used like parameters in a PowerShell script. Since I have a background in PowerShell that is how I am using the properties. When you deploy the BluePrint the values entered that I defined will not be used until the Action runs. The Action will run after the “Compute post provision” event is triggered with the subscription. Those values will be passed from the BluePrint to the Action. Just like passing parameters to a PS script. # This is the yaml code for the BluePrint # Created by vCrocs.info formatVersion: 1 inputs: cpuCount: type: integer description: Number of virtual processors default: 2 totalMemoryMB: type: integer description: Machine virtual memory size in Megabytes default: 2048 VMname: type: string default: DBH00 SQL: type: boolean description: Is this a SQL Server? default: false D-Drive-Size: type: integer description: 'Enter D:\\ Size in GB' default: 10 minimum: 5 maximum: 50 TEST: type: string enum: - 'Yes' - 'No' resources: Cloud_vSphere_Machine_1: type: Cloud.vSphere.Machine properties: name: '${input.VMname}' SQL: '${input.SQL}' DDRive: '${input.D-Drive-Size}' imageRef: 2019-TEMPLATE cpuCount: '${input.cpuCount}' totalMemoryMB: '${input.totalMemoryMB}' TEST: '${input.TEST}' constraints: - tag: 'quick_start_run:1' —Using the Inputs Screen helps you build the BluePrint yaml code. I found this very useful since I am still learning the proper yaml formatting. Click to see Larger Image Action: Click to see Larger Image In my PowerShell code I am using Write-Host to help me understand how the BluePrint passes values to the Action. I use to troubleshoot and understand how it is working. I am able to take values from the payload customProperties and assign to variables. The customProperties are defined in the BluePrint yaml code as resources/properties. I can then make decisions in the code based on these values. # This is the PowerShell code for the Action function handler($context, $payload) { Write-Host \"VM Name Created: \" $payload.resourceNames[0] Write-Host \"D-DRive Size: \" $payload.customProperties.DDRive Write-Host \"SQL: \" $payload.customProperties.SQL $VMname = $payload.resourceNames[0] Write-Host \"VM Name Variable: \" $VMname $SQL = $payload.customProperties.SQL $DDrive = $payload.customProperties.DDRive #Connect to vCenter Connect-VIServer -server 192.168.1.1 -User \"administrator@vsphere.local\" -Password \"VMware#1\" -Protocol https -Force #Assign Tag to new VM New-TagAssignment -Tag 'TAG-vRA-Built' -Entity $VMname if($SQL -eq 'true'){ New-TagAssignment -Tag ","date":"2020-05-17","objectID":"/hugo-loveit/vra81-abx-ps/:0:0","tags":["PowerShell","vRA","ABX","vRealize Automation","VMware Aria"],"title":"vRealize Automation 8.1 - PowerShell ABX","uri":"/hugo-loveit/vra81-abx-ps/"},{"categories":["Hugo"],"content":"Static Site Generator I have reviewed and tried a lot of different ways to create a personal Blog so that I can share Code, Knowledge, Pictures and do Reviews. After spending some time with Hugo it has become the framework that I have liked the most. The Theme “Hugo Future Imperfect” is also the Hugo Theme that I have liked the most. Some of the ways I have reviewed creating a Blog require a monthly fee to host the web site for you. I am using Github to host the web site where there is no monthly cost. I like how you can add Google Analytics code to all the pages within a Hugo Site. To add Google Analytics all you have to do is edit one line within the config.toml file. To create the content for the Blog I use Visual Studio Code to edit the files. I have been reviewing Forestry CMS to edit and create the pages. To create the web pages Hugo is so FAST! It is the fastest file creation framework that I reviewed. Is is also very easy to use. # To create the static web pages you just run the hugo command. Mac-mini:hugo dalehassinger$ hugo | EN -------------------+----- Pages | 61 Paginator pages | 0 Non-page files | 0 Static files | 25 Processed images | 0 Aliases | 16 Sitemaps | 1 Cleaned | 0 # To run the Hugo Web Server and see real-time changes you are making # to your web site you just run hugo server and open the web page # http://localhost:1313/ Mac-mini:hugo dalehassinger$ hugo server Building sites … | EN -------------------+----- Pages | 61 Paginator pages | 0 Non-page files | 0 Static files | 25 Processed images | 0 Aliases | 16 Sitemaps | 1 Cleaned | 0 Built in 43 ms Watching for changes in /Users/dalehassinger/hugo/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Users/dalehassinger/hugo/config.toml Environment: \"development\" Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop One of the main items I wanted a Blog site for, is to share code I create. I could just create a Public Github repository, but that just isn’t as pleasing to the eyes as a personal Blog can be. The first person I know that created a Hugo site is AdminWillie. I met him at the Central PA VMUG meetings and I also started attending the Blair County Little Hacks that he organizes. A great example of the vCommunity sharing ideas. ","date":"2020-04-26","objectID":"/hugo-loveit/hugo/:0:0","tags":["Hugo","Static Site Generator","Blog","Web Site"],"title":"Hugo | Static Site Generator","uri":"/hugo-loveit/hugo/"},{"categories":["PowerCLI"],"content":"Add disk to a Remote Windows Server | VMware VM PowerShell Code Powershell code to add disk to a Remote Windows Server | VMware VM: #The Following code shows how to add a New Drive, bring drive online, initialize and format: #Connect to vCenter Connect-VIServer vCenter.vCROCS.info #Add new drive to VM New-HardDisk -VM $VMNAME -CapacityGB $DISKSIZEGB -StorageFormat Thin -Controller ‘SCSI Controller 1’ #Make disk online invoke-command -computername $VMNAME -scriptblock {Set-Disk 2 -isOffline $false} #Initialize disk invoke-command -computername $VMNAME -scriptblock {Initialize-Disk 2 -PartitionStyle GPT} #Create Partition invoke-command -computername $VMNAME -scriptblock {New-Partition -DiskNumber 2 -UseMaximumSize -DriveLetter E} #Format drive invoke-command -computername $VMNAME -scriptblock {Format-Volume -DriveLetter E -FileSystem NTFS -NewFileSystemLabel ‘Data’ -AllocationUnitSize 16384 -Confirm:$false} #------------------------------------------------------------------------- #The Following Code will show disk “Allocation Unit Size” on a remote Windows Server: $C = Invoke-Command -ComputerName $VMname {Get-WmiObject -Class Win32_Volume -Filter “DriveLetter = ‘C:'” | Select-Object BLOCKSIZE} $C_AllocationUnitSize = ($C.BLOCKSIZE/1024) $C_AllocationUnitSize = ‘Disk Allocation Unit Size: ‘ + $C_AllocationUnitSize + ‘k’ $C_AllocationUnitSize ","date":"2020-04-19","objectID":"/hugo-loveit/add-drives/:0:0","tags":["PowerShell","PowerCLI","Add Disk"],"title":"Add disk to a Remote Windows Server | VMware VM","uri":"/hugo-loveit/add-drives/"},{"categories":["Raspberry PI"],"content":"Clay Thrower | Powered By: Raspberry PI Link to my Raspberry PI powered Clay Thrower. The first project I ever did with a Raspberry PI. Also my first project using Python and PHP. YouTube Video ","date":"2020-04-19","objectID":"/hugo-loveit/clay-thrower/:0:0","tags":["Raspberry Pi","Clay Thrower","Python","PHP"],"title":"Clay Thrower | Powered By: Raspberry PI","uri":"/hugo-loveit/clay-thrower/"},{"categories":["vRealize Automation"],"content":"Automation with Zero Trust PowerShell Code There are two PowerCLI commands that have become my best friends in a Zero Trust Environment. Invoke-VMScript - Use to run scripts on VMs. Copy-VMGuestFile - Use to copy files to/from VMs. In this example you can use Invoke-VMScript to run commands on a VM to install Trend Deep Security. All commands run with VM in a zero trust state. $VMName = 'VM Name' #Copy file to the VM $PSText = 'wget https://server01.vCrocs.info/software/agent/Ubuntu_18.04/x86_64/agent.deb' Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run the install of the agent that was copied. $PSText = 'sudo -S \u003c\u003c\u003c \"Password1\" sudo apt install ./agent.deb' Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to reset the agent $PSText = 'sudo -S \u003c\u003c\u003c \"Password1\" sudo /opt/ds_agent/dsa_control -r' Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to config the agent $PSText = 'sudo -S \u003c\u003c\u003c \"Password1\" sudo /opt/ds_agent/dsa_control -a dsm://server01.vCrocs.info:4120/' Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to get service staus. $PSText = 'service ds_agent status' $DeepSecurityServiceStatus = Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput In this example you can use Copy-VMGuestFile to copy a file to a VM and use invoke-VMScript to run commands on a VM to install agent. All commands run with VM in a zero trust state. $VMName = 'VM Name' Copy-VMGuestFile -Source G:\\splunkforwarder-8.0.1-6db836e2fb9e-linux-2.6-amd64.deb -Destination /home/vcrocsadmin -VM $VMNAME -LocalToGuest -GuestCredential $SSHcredsmadmin #Run the install of the agent that was copied. $PSText = 'sudo -S \u003c\u003c\u003c \"Password1\" sudo apt install ./splunkforwarder-8.0.1-6db836e2fb9e-linux-2.6-amd64.deb' Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to config the agent $PSText = 'sudo -S \u003c\u003c\u003c \"Password1\" sudo /opt/splunkforwarder/bin/splunk enable boot-start --accept-license --answer-yes --no-prompt --seed-passwd Password1' Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to config the agent $PSText = 'sudo -S \u003c\u003c\u003c \"Password1\" sudo /opt/splunkforwarder/bin/splunk set deploy-poll server01.vCrocs.info:8089' Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput #Run command to get service staus. $PSText = 'sudo -S \u003c\u003c\u003c \"Password1\" service splunkd status' Invoke-VMScript -VM $VMName -ScriptType Bash -ScriptText $PSText -GuestCredential $SSHcred | Select-Object -ExpandProperty ScriptOutput ","date":"2020-04-19","objectID":"/hugo-loveit/automation-zero-trust/:0:0","tags":["PowerCLI","PowerShell","vRA","NSX","vRealize Automation","VMware Aria"],"title":"One way to do Automation in a Zero Trust Environment","uri":"/hugo-loveit/automation-zero-trust/"},{"categories":["PowerCLI"],"content":"PowerCLI Basics PowerCLI Code Some basic PowerCLI commands to get started. I have some simple scripts in production that are 10 lines of code and I have some scripts that do a lot that are 2500 lines of code. Take the time to learn all the commands that are available and you will be amazed at what you can automate. #Here are some basic commands that you can keep adding additional code #and get more precise on what you want to see. #Connect to a vCenter Connect-VIServer vcsa.domain.org #Disconnect from vCenter and not be prompted Disconnect-VIServer vcsa.domain.org -confirm:$false #Get VM Listing #Shows all VMs Get-VM #Shows all VMs sorted by Name Get-VM | Sort-Object Name #Shows all VMs sorted by Name that are Powered On Get-VM | Where-Object {$_.Powerstate -eq 'PoweredOn'} | Sort-Object Name #Shows all VMs sorted by Name, that are Powered On and only shows #Name,MemoryGB,NumCpu Get-VM | Where-Object {$_.Powerstate -eq 'PoweredOn'} | Sort-Object Name | Select-Object Name,MemoryGB,NumCpu Why use PowerCLI Picking a scripting language for automation can be a hard decision. My #1 reason to use PowerShell was because of the PowerCLI PowerShell module that VMware maintains. You can use the PowerCLI module to automate almost all of the VMware Products. There hasn’t been any automation process that I have not been able to use PowerShell to automate. PowerShell has a great collection of modules available to use with different products. PowerShell is also easy to use with Products that make APIs available. Happy Scripting! ","date":"2020-04-19","objectID":"/hugo-loveit/powercli-getting-started/:0:0","tags":["PowerShell","PowerCLI"],"title":"PowerCLI Getting Started","uri":"/hugo-loveit/powercli-getting-started/"},{"categories":["PowerCLI"],"content":"Add Windows Server Registry Values PowerShell Code Add Registry Values to Windows Server #vCrocs Registry Changes invoke-command -computername $FQDNVMname -ScriptBlock {new-Item HKLM:\\SOFTWARE\\vCrocs -f } invoke-command -computername $FQDNVMname -ScriptBlock {param ($SG) Set-ItemProperty hklm:\\software\\vCrocs -Name SupportGroup -Value \"$SG\" -Force} -ArgumentList $SG invoke-command -computername $FQDNVMname -ScriptBlock {param ($APP) Set-ItemProperty hklm:\\software\\vCrocs -Name Application -Value \"$APP\" -Force} -ArgumentList $APP invoke-command -computername $FQDNVMname -ScriptBlock {param ($LOC) Set-ItemProperty hklm:\\software\\vCrocs -Name Location -Value \"$LOC\" -Force} -ArgumentList $LOC invoke-command -computername $FQDNVMname -ScriptBlock {param ($SL) Set-ItemProperty hklm:\\software\\vCrocs -Name ServiceLevel -Value \"$SL\" -Force} -ArgumentList $SL ","date":"2020-04-19","objectID":"/hugo-loveit/add-registry-values/:0:0","tags":["PowerShell","PowerCLI","Registry"],"title":"Powershell code to add custom Registry values","uri":"/hugo-loveit/add-registry-values/"},{"categories":null,"content":" VMware TAM (Technical Account Manager) VMware vExpert 2020 - 2022 VMware vExpert Cloud Management 2021 - 2022 If you can script it, You can Automate it! Info The views and opinions expressed on this blog are my strictly my own and do not reflect the views and opinions of my employer. I Blog about Subjects and Products that I find interesting and will hopefully help someone get started on their Automation, Monitoring and Logging journey by providing some tips|tricks|processes|code needed. My current focus is Enterprise Automation | Monitoring and Logging. I have created an IaC (Infrastructure as Code) Environment. I am using VMware vRealize Automation and SaltStack Config to complete server builds, software installs, schedule VM snap shots, Microsoft 365 automation, Citrix Management, Automate Data Center Flips, Server Decommissions, and many other Day 2 processes… For monitoring I use vRealize Operations for the “Single Pane of Glass” experience. I also use vRealize Log Insight for logging and LCM (Life Cycle Manager) for installing all the vRealize Products. Almost all the code I write to complete the Automation that I create is done with PowerShell. The reason I choose to use PowerShell is because to do Automation with VMware products they have released their product PowerCLI, which is built on top of PowerShell. There hasn’t been anything that I wanted to Automate that I haven’t been able to do with PowerShell. To do remote Citrix management also works very well using PowerShell. I have also started to do Automation with Azure. I am using PowerShell to create VMs and SaltStack Config to complete the configuration management, install software and maintain state. Your thought process is the most powerful automation tool you’ll ever have! - Cody De Arkland vCommunity I have learned a lot from the vCommunity, Powershell and PowerCLI web sites. I want to use this blog as a way for me to give back. If one person finds anything I post helpful, I will consider my efforts successful. The code that I have shared I use with vRealize Automation Cloud Templates/Catalog Items and everyday VMware Admin functions. Everyday I learn something new. If I think it should be shared I will write a blog about it. Check back often to see what I am doing next. “It doesn’t make sense to hire smart people and then tell them what to do, We hire smart people so they can tell us what to do.” - Steve Jobs Thanks! I have worked with a great group of people at VMware, past and present. I would like to thank the following people for all their support in no particular order: Steve Leiberson, Karl Hauck, Cosmin Trif, Brock Peterson, Kevin Holland, Daniel Thomas, Marcus Roberts, Paul Schlosser, Eric Pennente. Special Thanks to David Kruse for getting me started with vRA. Special Thanks to Vincent Riccio for allowing me to do SaltStack Config Presentations with you at VMworld 21 and SaltConf 21. Special Thanks to my first manager at VMware: Alex Musicante. You believed in me and my passion/skills/knowledge of the VMware Products. You gave me a career opportunity that no one else did. Special Thanks to some past and present co-workers, SEs, TAMs, HVC Members that I learned a lot from: Kirk Shaffer, Robert Mitchell, Dan Grove, Steve Holmes, Steve Pittenger, Anton Wesztergom (Opened my eyes to vRA Day 2), Ryan Palmer, Megan Koss, Josh Demcher. Special Thanks to the person that gave me my first Job in IT: David Cornelius List of Bloggers that I follow and have learned a lot by them “Giving Back”: Cody De Arkland, Luc Dekens, Kyle Ruddy, William Lam, Nathen Bennett, Vince Wood, Alan Renouf. and anyone else that helped me in my journey called my career… Experience VMware Aria VMware Aria Hub VMware Aria Graph VMware Aria Automation VMware Aria Automation Config VMware Aria Operations VMware Aria Operations for Logs VMware vSphere VMware vCenter vRealize Automation vRealize SaltStack Config vRealize Operations PowerShell PowerCLI vRealize Log Insight Windows Servers L","date":"2022-12-30","objectID":"/hugo-loveit/about/:0:0","tags":null,"title":"Dale Hassinger","uri":"/hugo-loveit/about/"},{"categories":null,"content":"Favorite Links","date":"2022-12-30","objectID":"/hugo-loveit/links/","tags":null,"title":"Favorite Links","uri":"/hugo-loveit/links/"},{"categories":null,"content":" Links to some of my favorite Bloggers and Content: Bloggers: Brock Peterson - VMware Aria Operations Master Cosmin Trif - VMware Aria Suite Master LucD - PowerShell Master William Lam - VMware Master Yellow Bricks VMware: VMware Operations Management Book - Great Book! code.VMware.com - Samples/Resources Learn vRealize Automation Learn SaltStack Config blogs.VMware.com PowerShell PowerCLI VMware PowerCLI Cmdlets by Product vRealize Automation vRealize Operations vRealize Log Insight ports.VMware.com - Good Link when you live in a Zero trust environment Podcasts: Virtually Speaking Podcast The Hacks - Powered By SaltStack IT Reality Podcast ","date":"2022-12-30","objectID":"/hugo-loveit/links/:0:0","tags":null,"title":"Favorite Links","uri":"/hugo-loveit/links/"},{"categories":null,"content":" VMworld 2021 SaltConf 2021 Pat Gelsinger The Woz Belle Belle Belle Belle Belle Belle Belle Belle Belle and I Heaven Current Ride ","date":"2022-12-30","objectID":"/hugo-loveit/pics/:0:0","tags":null,"title":"Pics","uri":"/hugo-loveit/pics/"}]