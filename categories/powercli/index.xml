<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerCLI on www.vCrocs.info</title>
    <link>https://www.vcrocs.info/categories/powercli/</link>
    <description>Recent content in PowerCLI on www.vCrocs.info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.vcrocs.info/categories/powercli/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Coffee Talk Tip of the week - 05/08/2020</title>
      <link>https://www.vcrocs.info/blog/coffee-talk-05-08-2020/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.vcrocs.info/blog/coffee-talk-05-08-2020/</guid>
      <description>If you need to set the ESXi Host Advanced System Setting Syslog.global.logHost on every ESXI Host in your environment here is some sample PowerCLI code to set the values. Connect to all your vCenters. Get all your hosts. Set the value and then it will reload the syslog service.
The second PowerCLI code example is to get the ESXi Host Advanced System Setting Syslog.global.logHost value on every ESXI Host in your environment.</description>
    </item>
    
    <item>
      <title>Automation with Zero Trust</title>
      <link>https://www.vcrocs.info/blog/automation-zero-trust/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.vcrocs.info/blog/automation-zero-trust/</guid>
      <description>PowerShell Code There are two PowerCLI commands that have become my best friends in a Zero Trust Environment.
 Invoke-VMScript - Use to run scripts on VMs. Copy-VMGuestFile - Use to copy files to/from VMs.  In this example you can use Invoke-VMScript to run commands on a VM to install Trend Deep Security. All commands run with VM in a zero trust state.
 $VMName = &#39;VM Name&#39; #Copy file to the VM $PSText = &#39;wget https://server01.</description>
    </item>
    
    <item>
      <title>NSX PowerCLI Basics</title>
      <link>https://www.vcrocs.info/blog/powercli-nsx/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.vcrocs.info/blog/powercli-nsx/</guid>
      <description>NSX PowerCLI Code Some basic PowerCLI commands with NSX
Included some examples of code to Automate adding/removing NSX Security Tags from VMs. Show Security TAGs. Shows Secuirty TAGs assigned to a sepcific VM. Hope you find these snippets of code useful.
 # Need to install PowerShell Module PowerNSX # Connect to vCenter $vCenterName = &#39;vCenter.vCrocs.info&#39; Connect-VIServer $vCenterName -Credential $cred # Connect to NSX Server Connect-NsxServer -vCenterServer &#39;vCenter.vCrocs.info&#39; -Credential $cred # Show all Secuirty Tags Get-NsxSecurityTag | Select-Object Name | Sort-Object Name # Info about one specific Secuirty TAG Get-NsxSecurityTag -Name NSX.</description>
    </item>
    
    <item>
      <title>PowerCLI Basics</title>
      <link>https://www.vcrocs.info/blog/powercli-getting-started/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.vcrocs.info/blog/powercli-getting-started/</guid>
      <description>PowerCLI Code Some basic PowerCLI commands
 #Here are some basic commands that you can keep adding additional code #and get more precise on what you want to see. #Connect to a vCenter Connect-VIServer vcsa.domain.org #Disconnect from vCenter and not be prompted Disconnect-VIServer vcsa.domain.org -confirm:$false #Get VM Listing #Shows all VMs Get-VM #Shows all VMs sorted by Name Get-VM | Sort-Object Name #Shows all VMs sorted by Name that are Powered On Get-VM | Where-Object {$_.</description>
    </item>
    
  </channel>
</rss>