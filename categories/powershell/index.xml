<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on vCROCS.info</title>
    <link>https://www.vcrocs.info/categories/powershell/</link>
    <description>Recent content in PowerShell on vCROCS.info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.vcrocs.info/categories/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Coffee Talk Tip of the week - 05/01/2020</title>
      <link>https://www.vcrocs.info/2020/04/coffee-talk-tip-of-the-week-05/01/2020/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.vcrocs.info/2020/04/coffee-talk-tip-of-the-week-05/01/2020/</guid>
      <description>When working in a Zero Trust Environment and programs are not working the way they should it is nice to have some Tools available to do troubleshooting. When new applications are installed and not working you can be asking yourself is it my issue with the application or is the firewall blocking ports. I recently had a support call with VMware and they showed me two commands that work awesome to test to see if ports are open to a destination IP on a specific port.</description>
    </item>
    
    <item>
      <title>Add disk</title>
      <link>https://www.vcrocs.info/2020/04/add-disk/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.vcrocs.info/2020/04/add-disk/</guid>
      <description>PowerShell Code Powershell code to add disk to a Remote Windows Server VMware VM
 #The Following code shows how to add a New Drive, bring drive online, initialize and format: #Connect to vCenter Connect-VIServer vcsa.domain.org #Add new drive to VM New-HardDisk -VM $VMNAME -CapacityGB $DISKSIZEGB -StorageFormat Thin -Controller ‘SCSI Controller 1’ #Make disk online invoke-command -computername $VMNAME -scriptblock {Set-Disk 2 -isOffline $false} #Initialize disk invoke-command -computername $VMNAME -scriptblock {Initialize-Disk 2 -PartitionStyle GPT} #Create Partition invoke-command -computername $VMNAME -scriptblock {New-Partition -DiskNumber 2 -UseMaximumSize -DriveLetter E} #Format drive invoke-command -computername $VMNAME -scriptblock {Format-Volume -DriveLetter E -FileSystem NTFS -NewFileSystemLabel ‘Data’ -AllocationUnitSize 16384 -Confirm:$false} #------------------------------------------------------------------------- #The Following Code will show disk “Allocation Unit Size” on a remote Windows Server: $C = Invoke-Command -ComputerName $VMname {Get-WmiObject -Class Win32_Volume -Filter “DriveLetter = ‘C:&#39;” | Select-Object BLOCKSIZE} $C_AllocationUnitSize = ($C.</description>
    </item>
    
    <item>
      <title>Add Registry Values</title>
      <link>https://www.vcrocs.info/2020/04/add-registry-values/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.vcrocs.info/2020/04/add-registry-values/</guid>
      <description>PowerShell Code Add Registry Values to Windows Server
 #vCrocs Registry Changes invoke-command -computername $FQDNVMname -ScriptBlock {new-Item HKLM:\SOFTWARE\vCrocs -f } invoke-command -computername $FQDNVMname -ScriptBlock {param ($SG) Set-ItemProperty hklm:\software\vCrocs -Name SupportGroup -Value &amp;quot;$SG&amp;quot; -Force} -ArgumentList $SG invoke-command -computername $FQDNVMname -ScriptBlock {param ($APP) Set-ItemProperty hklm:\software\vCrocs -Name Application -Value &amp;quot;$APP&amp;quot; -Force} -ArgumentList $APP invoke-command -computername $FQDNVMname -ScriptBlock {param ($LOC) Set-ItemProperty hklm:\software\vCrocs -Name Location -Value &amp;quot;$LOC&amp;quot; -Force} -ArgumentList $LOC invoke-command -computername $FQDNVMname -ScriptBlock {param ($SL) Set-ItemProperty hklm:\software\vCrocs -Name ServiceLevel -Value &amp;quot;$SL&amp;quot; -Force} -ArgumentList $SL </description>
    </item>
    
    <item>
      <title>Automation with Zero Trust</title>
      <link>https://www.vcrocs.info/2020/04/automation-with-zero-trust/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.vcrocs.info/2020/04/automation-with-zero-trust/</guid>
      <description>PowerShell Code There are two PowerCLI commands that have become my best friends in a Zero Trust Environment.
 Invoke-VMScript - Use to run scripts on VMs. Copy-VMGuestFile - Use to copy files to/from VMs.  In this example you can use Invoke-VMScript to run commands on a VM to install Trend Deep Security. All commands run with VM in a zero trust state.
 $VMName = &#39;VM Name&#39; #Copy file to the VM $PSText = &#39;wget https://server01.</description>
    </item>
    
    <item>
      <title>PowerShell Log Files</title>
      <link>https://www.vcrocs.info/2020/04/powershell-log-files/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.vcrocs.info/2020/04/powershell-log-files/</guid>
      <description>PowerShell Code I use this code to create a log file during a VM build using vRealize Automation
Here&amp;rsquo;s an example:
 $VMname = &#39;ServerName&#39; #The next line defines where to save the log file $LOGFILENAME = &amp;quot;C:\vRA-Install-Logs\vRA-Install-Log-&amp;quot; + $VMname + &amp;quot;.log&amp;quot; #Check to see if file already exists. If it does delete it. if (Test-Path $LOGFILENAME) { Remove-Item -Path $LOGFILENAME } #Creates the Log File New-Item $LOGFILENAME -ItemType File #Update Log File.</description>
    </item>
    
    <item>
      <title>Randon Password</title>
      <link>https://www.vcrocs.info/2020/04/randon-password/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.vcrocs.info/2020/04/randon-password/</guid>
      <description>PowerShell Code I use this code to generate a random password during the automation process of creating a new Server VM. I then add the password to Password Manager with Powershell.
 #Generate Random text to use for Password $SQLPassword =@( [char[]](65..91 | Get-Random -Count 5) [char[]](97..123 | Get-Random -Count 5) &#39;!&#39;,&#39;#&#39;,&#39;(&#39;,&#39;)&#39; | Get-Random -Count 2 0..9 | Get-Random -Count 4 ) | Sort-Object {Get-Random} $Password = $SQLPassword -join &#39;&#39; </description>
    </item>
    
  </channel>
</rss>
