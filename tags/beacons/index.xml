<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Beacons - Tag - vCROCS</title>
        <link>https://www.vcrocs.info/tags/beacons/</link>
        <description>Beacons - Tag - vCROCS</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>Dale.Hassinger@vCROCS.info (| Dale Hassinger)</managingEditor>
            <webMaster>Dale.Hassinger@vCROCS.info (| Dale Hassinger)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 27 Aug 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.vcrocs.info/tags/beacons/" rel="self" type="application/rss+xml" /><item>
    <title>VMware vRealize SaltStack Config as a Windows Server Admin - Part 3</title>
    <link>https://www.vcrocs.info/saltstack-config-part-03/</link>
    <pubDate>Fri, 27 Aug 2021 00:00:00 &#43;0000</pubDate>
    <author>Dale Hassinger</author>
    <guid>https://www.vcrocs.info/saltstack-config-part-03/</guid>
    <description><![CDATA[<p><strong>Part 3: How to use SaltStack Config with Windows Server and PowerShell</strong></p>
<hr>
<p>The next steps on my journey with <strong>VMware vRealize SaltStack Config</strong> as a <strong>Windows Server Admin</strong> will be beacons and reactors. Working with Jobs helped me understand how to make changes Ad-Hoc. I have a Job to quickly stop the Print Spooler but what if I always want the state of the Print Spooler Service to be stopped.  How do I NOT allow a Server Admin to login into the server and manually start the service?</p>
<p>This is where beacons and reactors work with minion configurations that you want to make permanent. This is the configuration Management Part of Salt Stack. To always make sure a Windows Service is stopped I created a beacon.conf file. On a Windows Server the Beacon.conf needs to be in the &lsquo;C:\salt\conf\minion.d' folder. Anytime a beacon.conf file is added to a minion or modified the salt-minion service needs restarted. I have a salt Job to restart the salt-minion service.</p>
<h6 id="beacons">Beacons:</h6>
<h6 id="beacon-file-sends-events-to-the-event-bus-on-the-salt-master-from-a-minion">Beacon File: Sends events to the event bus on the salt master from a minion</h6>
<p>This beacon.conf example is for service state changes. The Beacon sends an event to the salt master if a Windows Service is started/stopped.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">beacons</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">service</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">-</span> <span class="n">services</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">       <span class="n">Spooler</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">         <span class="n">onchangeonly</span><span class="err">:</span> <span class="n">true</span></span></span></code></pre></td></tr></table>
</div>
</div>
<p>This is what the event will look like in the events if you are monitoring.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">salt</span><span class="p">/</span><span class="n">beacon</span><span class="p">/</span><span class="n">DBH</span><span class="p">-</span><span class="mf">211</span><span class="p">/</span><span class="n">service</span><span class="p">/</span><span class="n">Spooler</span>     <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Spooler&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;running&#34;</span><span class="err">:</span> <span class="n">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;_stamp&#34;</span><span class="err">:</span> <span class="s2">&#34;2021-08-06T11:53:57.212810&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;id&#34;</span><span class="err">:</span> <span class="s2">&#34;DBH-211&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;service_name&#34;</span><span class="err">:</span> <span class="s2">&#34;Spooler&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div>
<h6 id="reactors">Reactors:</h6>
<h6 id="reactor-file-monitors-the-event-bus-for-events-specified-ie-saltbeaconservicespooler">Reactor File: Monitors the event bus for events specified. IE: salt/beacon/*/service/Spooler</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">reactor</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">-</span> <span class="s1">&#39;salt/auth&#39;</span><span class="err">:</span>                              <span class="c"># React to a new minion</span>
</span></span><span class="line"><span class="cl">    <span class="p">-</span> <span class="n">salt</span><span class="err">:</span><span class="p">//</span><span class="n">reactor</span><span class="p">/</span><span class="nb">accept-key</span><span class="p">.</span><span class="nb">sls </span>          <span class="c"># Run this state to auto accept new minion</span>
</span></span><span class="line"><span class="cl">  <span class="p">-</span> <span class="s1">&#39;salt/beacon/*/service/Spooler&#39;</span><span class="err">:</span>          <span class="c"># React to Spooler Service Change</span>
</span></span><span class="line"><span class="cl">    <span class="p">-</span> <span class="n">salt</span><span class="err">:</span><span class="p">//</span><span class="n">vCROCS</span><span class="p">/</span><span class="n">spooler_auto_stop</span><span class="p">.</span><span class="nb">sls </span>    <span class="c"># Run this state</span></span></span></code></pre></td></tr></table>
</div>
</div>
<h6 id="how-the-beacons-and-reactors-work-together">How the beacons and reactors work together:</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c"># What this line is doing in the reactor is watching for an beacon event from any minion</span>
</span></span><span class="line"><span class="cl"><span class="c"># The * means all minions. You could specify a minion name.</span>
</span></span><span class="line"><span class="cl"><span class="c"># Looking for service events.  </span>
</span></span><span class="line"><span class="cl"><span class="c"># The service event that is specified is the Spooler event.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">-</span> <span class="s1">&#39;salt/beacon/*/service/Spooler&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># This is the event sent from the beacon to the event bus</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">salt</span><span class="p">/</span><span class="n">beacon</span><span class="p">/</span><span class="n">DBH</span><span class="p">-</span><span class="mf">211</span><span class="p">/</span><span class="n">service</span><span class="p">/</span><span class="n">Spooler</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># What the reactor is looking for and what the beacon sent matches.</span>
</span></span><span class="line"><span class="cl"><span class="c"># The state specified in the reactor will now run</span>
</span></span><span class="line"><span class="cl"><span class="c"># This is the state specified in my example</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">-</span> <span class="n">salt</span><span class="err">:</span><span class="p">//</span><span class="n">vCROCS</span><span class="p">/</span><span class="n">spooler_auto_stop</span><span class="p">.</span><span class="n">sls</span></span></span></code></pre></td></tr></table>
</div>
</div>
<h6 id="state-file">State File:</h6>
<h6 id="state-file-stops-the-spooler-service-if-it-was-started">State File: Stops the Spooler Service if it was started</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">{%</span> <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Spooler&#39;</span><span class="p">][</span><span class="s1">&#39;running&#39;</span><span class="p">]</span> <span class="p">==</span> <span class="n">true</span> <span class="p">%}</span>
</span></span><span class="line"><span class="cl"><span class="n">stop_service</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">local</span><span class="p">.</span><span class="py">service</span><span class="p">.</span><span class="n">stop</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">-</span> <span class="n">tgt</span><span class="err">:</span> <span class="p">{{</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="p">-</span> <span class="n">arg</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">      <span class="p">-</span> <span class="n">Spooler</span>
</span></span><span class="line"><span class="cl"><span class="p">{%</span> <span class="n">endif</span> <span class="p">%}</span></span></span></code></pre></td></tr></table>
</div>
</div>
<h6 id="state-file-starts-the-spooler-service-if-it-was-stopped">State File: Starts the Spooler Service if it was stopped</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">{%</span> <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;Spooler&#39;</span><span class="p">][</span><span class="s1">&#39;running&#39;</span><span class="p">]</span> <span class="p">==</span> <span class="n">False</span> <span class="p">%}</span>
</span></span><span class="line"><span class="cl"><span class="n">start_service</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">local</span><span class="p">.</span><span class="py">service</span><span class="p">.</span><span class="n">start</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">-</span> <span class="n">tgt</span><span class="err">:</span> <span class="p">{{</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="p">-</span> <span class="n">arg</span><span class="err">:</span>
</span></span><span class="line"><span class="cl">      <span class="p">-</span> <span class="n">Spooler</span>
</span></span><span class="line"><span class="cl"><span class="p">{%</span> <span class="n">endif</span> <span class="p">%}</span></span></span></code></pre></td></tr></table>
</div>
</div>
<hr>
<h6 id="beacons-1">Beacons:</h6>
<p>To copy the beacon file to the minions I created a Job that I can manually run.</p>
<h6 id="job-to-copy-a-file-to-a-minion">Job to copy a file to a minion:</h6>
<figure><a class="lightgallery" href="/saltstack-config-part-03/Salt-24.PNG" title="/saltstack-config-part-03/Salt-24.PNG" data-thumbnail="/saltstack-config-part-03/Salt-24.PNG" data-sub-html="<h2>Click to see Larger Image</h2>">
        
    </a><figcaption class="image-caption">Click to see Larger Image</figcaption>
    </figure>
<p>After the beacon file is copied to the minion you MUST restart the minion service.</p>
<h6 id="job-to-restart-minion-service">Job to restart minion service:</h6>
<figure><a class="lightgallery" href="/saltstack-config-part-03/Salt-28.PNG" title="/saltstack-config-part-03/Salt-28.PNG" data-thumbnail="/saltstack-config-part-03/Salt-28.PNG" data-sub-html="<h2>Click to see Larger Image</h2>">
        
    </a><figcaption class="image-caption">Click to see Larger Image</figcaption>
    </figure>
<hr>
<h6 id="lessons-learned">Lessons Learned:</h6>
<ul>
<li>Beacons are a good way to make sure the configuration you want is not altered.</li>
<li>Beacons can monitor more than just services that I am showing in this blog post. I will cover more use cases in future blog posts.</li>
</ul>
<hr>
<h6 id="salt-links-i-found-to-be-very-helpful">Salt Links I found to be very helpful:</h6>
<ul>
<li><a href="https://sites.google.com/site/mrxpalmeiras/saltstack/salt-cheat-sheet" target="_blank">SaltStack Cheat Sheet</a></li>
<li><a href="https://docs.saltproject.io/en/getstarted/"                            target="_blank">SaltStack Tutorials</a></li>
<li><a href="https://docs.saltproject.io/en/latest/contents.html"                   target="_blank">SaltStack Documentation</a></li>
<li><a href="https://saltstackcommunity.slack.com"                                  target="_blank">SaltStack Community Slack Channel</a></li>
<li><a href="https://learnvrealizeautomation.github.io"                             target="_blank">Learn vRealize Automation</a></li>
<li><a href="https://learnsaltstackconfig.github.io/"                               target="_blank">Learn SaltStack Config</a></li>
</ul>
<div style="background-color:#ccffcc; Padding:20px;" >
When I write about <b>vRealize Automation</b> ("vRA") I always say there are many ways to accomplish the same task.  <b>SaltStack Config</b> is the same way.  I am showing what I felt was important to see but every organization/environment will be different. There is no right or wrong way to use Salt. This is a <b>GREAT Tool</b> that is included with your vRealize Suite Advanced/Enterprise license. If you own the vRealize Suite, you own SaltStack Config.
</div>
<hr>
<ul>
<li>If you like wearing Crocs and want to get a pair like I wear, follow this link to Amazon:
<a target="_blank" href="https://www.amazon.com/dp/B001V7Z27W?psc=1&amp;ref=ppx_yo2ov_dt_b_product_details&_encoding=UTF8&tag=vcrocs-20&linkCode=ur2&linkId=fa4c787c9ab59a9b8a54b48c402b8517&camp=1789&creative=9325">My Favorite Crocs</a></li>
<li>If you found this Blog article useful and it helped you, Buy me a coffee to start my day.</li>
</ul>
<center>
<script type="text/javascript" src="https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js" data-name="bmc-button" data-slug="dalehassinger" data-color="#FFDD00" data-emoji=""  data-font="Cookie" data-text="Buy me a coffee" data-outline-color="#000000" data-font-color="#000000" data-coffee-color="#ffffff" ></script>
</center>]]></description>
</item>
</channel>
</rss>
